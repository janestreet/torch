// THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT BY HAND!

raw_tensor atg___and__(gc_tensor self, scalar other);
raw_tensor atg___and__tensor_(gc_tensor self, gc_tensor other);
raw_tensor atg___iand__(gc_tensor self, scalar other);
raw_tensor atg___iand__tensor_(gc_tensor self, gc_tensor other);
raw_tensor atg___ilshift__(gc_tensor self, scalar other);
raw_tensor atg___ilshift__tensor_(gc_tensor self, gc_tensor other);
raw_tensor atg___ior__(gc_tensor self, scalar other);
raw_tensor atg___ior__tensor_(gc_tensor self, gc_tensor other);
raw_tensor atg___irshift__(gc_tensor self, scalar other);
raw_tensor atg___irshift__tensor_(gc_tensor self, gc_tensor other);
raw_tensor atg___ixor__(gc_tensor self, scalar other);
raw_tensor atg___ixor__tensor_(gc_tensor self, gc_tensor other);
raw_tensor atg___lshift__(gc_tensor self, scalar other);
raw_tensor atg___lshift__scalar_out_(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg___lshift__tensor_(gc_tensor self, gc_tensor other);
raw_tensor atg___lshift__tensor_out_(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg___or__(gc_tensor self, scalar other);
raw_tensor atg___or__tensor_(gc_tensor self, gc_tensor other);
raw_tensor atg___rshift__(gc_tensor self, scalar other);
raw_tensor atg___rshift__scalar_out_(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg___rshift__tensor_(gc_tensor self, gc_tensor other);
raw_tensor atg___rshift__tensor_out_(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg___xor__(gc_tensor self, scalar other);
raw_tensor atg___xor__tensor_(gc_tensor self, gc_tensor other);
raw_tensor atg__adaptive_avg_pool2d(gc_tensor self, int64_t *output_size_data, int output_size_len);
raw_tensor atg__adaptive_avg_pool2d_backward(gc_tensor grad_output, gc_tensor self);
raw_tensor atg__adaptive_avg_pool2d_backward_out(gc_tensor out, gc_tensor grad_output, gc_tensor self);
raw_tensor atg__adaptive_avg_pool2d_out(gc_tensor out, gc_tensor self, int64_t *output_size_data, int output_size_len);
raw_tensor atg__adaptive_avg_pool3d(gc_tensor self, int64_t *output_size_data, int output_size_len);
raw_tensor atg__adaptive_avg_pool3d_backward(gc_tensor grad_output, gc_tensor self);
raw_tensor atg__adaptive_avg_pool3d_backward_out(gc_tensor out, gc_tensor grad_output, gc_tensor self);
raw_tensor atg__adaptive_avg_pool3d_out(gc_tensor out, gc_tensor self, int64_t *output_size_data, int output_size_len);
raw_tensor atg__add_batch_dim(gc_tensor self, int64_t batch_dim, int64_t level);
raw_tensor atg__add_relu(gc_tensor self, gc_tensor other);
raw_tensor atg__add_relu_(gc_tensor self, gc_tensor other);
raw_tensor atg__add_relu_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg__add_relu_scalar(gc_tensor self, scalar other);
raw_tensor atg__add_relu_scalar_(gc_tensor self, scalar other);
raw_tensor atg__add_relu_scalar_out(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg__addmm_activation(gc_tensor self, gc_tensor mat1, gc_tensor mat2, int use_gelu);
raw_tensor atg__addmm_activation_out(gc_tensor out, gc_tensor self, gc_tensor mat1, gc_tensor mat2, int use_gelu);
void atg__aminmax(raw_tensor *, gc_tensor self);
void atg__aminmax_dim(raw_tensor *, gc_tensor self, int64_t dim, int keepdim);
void atg__aminmax_dim_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor self, int64_t dim, int keepdim);
void atg__aminmax_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor self);
void atg__amp_update_scale(raw_tensor *, gc_tensor self, gc_tensor growth_tracker, gc_tensor found_inf, double scale_growth_factor, double scale_backoff_factor, int64_t growth_interval);
raw_tensor atg__amp_update_scale_(gc_tensor self, gc_tensor growth_tracker, gc_tensor found_inf, double scale_growth_factor, double scale_backoff_factor, int64_t growth_interval);
raw_tensor atg__amp_update_scale_out(gc_tensor out, gc_tensor self, gc_tensor growth_tracker, gc_tensor found_inf, double scale_growth_factor, double scale_backoff_factor, int64_t growth_interval);
void atg__assert_scalar(scalar self, char * assert_msg);
void atg__assert_tensor_metadata(gc_tensor a, int64_t *size_data, int size_len, int64_t *stride_data, int stride_len, int dtype, int device);
raw_tensor atg__autocast_to_full_precision(gc_tensor self, int cuda_enabled, int cpu_enabled);
raw_tensor atg__autocast_to_reduced_precision(gc_tensor self, int cuda_enabled, int cpu_enabled, int cuda_dtype, int cpu_dtype);
void atg__batch_norm_no_update(raw_tensor *, gc_tensor input, gc_tensor weight, gc_tensor bias, gc_tensor running_mean, gc_tensor running_var, double momentum, double eps);
void atg__batch_norm_no_update_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor out2, gc_tensor out3, gc_tensor input, gc_tensor weight, gc_tensor bias, gc_tensor running_mean, gc_tensor running_var, double momentum, double eps);
void atg__batch_norm_with_update(raw_tensor *, gc_tensor input, gc_tensor weight, gc_tensor bias, gc_tensor running_mean, gc_tensor running_var, double momentum, double eps);
void atg__batch_norm_with_update_functional(raw_tensor *, gc_tensor input, gc_tensor weight, gc_tensor bias, gc_tensor running_mean, gc_tensor running_var, double momentum, double eps);
void atg__batch_norm_with_update_out(raw_tensor *, gc_tensor out, gc_tensor save_mean, gc_tensor save_invstd, gc_tensor reserve, gc_tensor input, gc_tensor weight, gc_tensor bias, gc_tensor running_mean, gc_tensor running_var, double momentum, double eps);
raw_tensor atg__cast_byte(gc_tensor self, int non_blocking);
raw_tensor atg__cast_char(gc_tensor self, int non_blocking);
raw_tensor atg__cast_double(gc_tensor self, int non_blocking);
raw_tensor atg__cast_float(gc_tensor self, int non_blocking);
raw_tensor atg__cast_half(gc_tensor self, int non_blocking);
raw_tensor atg__cast_int(gc_tensor self, int non_blocking);
raw_tensor atg__cast_long(gc_tensor self, int non_blocking);
raw_tensor atg__cast_short(gc_tensor self, int non_blocking);
raw_tensor atg__cdist_backward(gc_tensor grad, gc_tensor x1, gc_tensor x2, double p, gc_tensor cdist);
raw_tensor atg__cdist_backward_out(gc_tensor out, gc_tensor grad, gc_tensor x1, gc_tensor x2, double p, gc_tensor cdist);
raw_tensor atg__cholesky_solve_helper(gc_tensor self, gc_tensor A, int upper);
raw_tensor atg__cholesky_solve_helper_out(gc_tensor out, gc_tensor self, gc_tensor A, int upper);
raw_tensor atg__chunk_cat(gc_tensor *tensors_data, int tensors_len, int64_t dim, int64_t num_chunks);
raw_tensor atg__chunk_cat_out(gc_tensor out, gc_tensor *tensors_data, int tensors_len, int64_t dim, int64_t num_chunks);
raw_tensor atg__coalesce(gc_tensor self);
raw_tensor atg__coalesce_out(gc_tensor out, gc_tensor self);
raw_tensor atg__coalesced(gc_tensor self, int coalesced);
raw_tensor atg__coalesced_(gc_tensor self, int coalesced);
raw_tensor atg__coalesced_out(gc_tensor out, gc_tensor self, int coalesced);
raw_tensor atg__compute_linear_combination(gc_tensor input, gc_tensor coefficients);
raw_tensor atg__compute_linear_combination_out(gc_tensor out, gc_tensor input, gc_tensor coefficients);
raw_tensor atg__conj(gc_tensor self);
raw_tensor atg__conj_copy(gc_tensor self);
raw_tensor atg__conj_copy_out(gc_tensor out, gc_tensor self);
raw_tensor atg__conj_physical(gc_tensor self);
raw_tensor atg__conj_physical_out(gc_tensor out, gc_tensor self);
raw_tensor atg__conv_depthwise2d(gc_tensor self, gc_tensor weight, int64_t *kernel_size_data, int kernel_size_len, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len);
raw_tensor atg__conv_depthwise2d_out(gc_tensor out, gc_tensor self, gc_tensor weight, int64_t *kernel_size_data, int kernel_size_len, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len);
raw_tensor atg__convert_indices_from_coo_to_csr(gc_tensor self, int64_t size, int out_int32);
raw_tensor atg__convert_indices_from_coo_to_csr_out(gc_tensor out, gc_tensor self, int64_t size, int out_int32);
raw_tensor atg__convert_indices_from_csr_to_coo(gc_tensor crow_indices, gc_tensor col_indices, int out_int32, int transpose);
raw_tensor atg__convert_indices_from_csr_to_coo_out(gc_tensor out, gc_tensor crow_indices, gc_tensor col_indices, int out_int32, int transpose);
raw_tensor atg__convert_weight_to_int4pack(gc_tensor self, int64_t innerKTiles);
raw_tensor atg__convert_weight_to_int4pack_for_cpu(gc_tensor self, int64_t innerKTiles);
raw_tensor atg__convolution(gc_tensor input, gc_tensor weight, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int transposed, int64_t *output_padding_data, int output_padding_len, int64_t groups, int benchmark, int deterministic, int cudnn_enabled, int allow_tf32);
raw_tensor atg__convolution_deprecated(gc_tensor input, gc_tensor weight, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int transposed, int64_t *output_padding_data, int output_padding_len, int64_t groups, int benchmark, int deterministic, int cudnn_enabled);
raw_tensor atg__convolution_mode(gc_tensor input, gc_tensor weight, gc_tensor bias, int64_t *stride_data, int stride_len, char * padding, int64_t *dilation_data, int dilation_len, int64_t groups);
raw_tensor atg__convolution_out(gc_tensor out, gc_tensor input, gc_tensor weight, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int transposed, int64_t *output_padding_data, int output_padding_len, int64_t groups, int benchmark, int deterministic, int cudnn_enabled, int allow_tf32);
raw_tensor atg__copy_from(gc_tensor self, gc_tensor dst, int non_blocking);
raw_tensor atg__copy_from_and_resize(gc_tensor self, gc_tensor dst);
raw_tensor atg__copy_from_and_resize_out(gc_tensor out, gc_tensor self, gc_tensor dst);
raw_tensor atg__copy_from_out(gc_tensor out, gc_tensor self, gc_tensor dst, int non_blocking);
raw_tensor atg__cslt_compress(gc_tensor input);
raw_tensor atg__cslt_sparse_mm(gc_tensor compressed_A, gc_tensor dense_B, gc_tensor bias, gc_tensor alpha, int out_dtype, int transpose_result, int64_t alg_id, int64_t split_k, int split_k_one_kernel);
int64_t atg__cslt_sparse_mm_search(gc_tensor compressed_A, gc_tensor dense_B, gc_tensor bias, gc_tensor alpha, int out_dtype, int transpose_result);
void atg__ctc_loss(raw_tensor *, gc_tensor log_probs, gc_tensor targets, int64_t *input_lengths_data, int input_lengths_len, int64_t *target_lengths_data, int target_lengths_len, int64_t blank, int zero_infinity);
raw_tensor atg__ctc_loss_backward(gc_tensor grad, gc_tensor log_probs, gc_tensor targets, int64_t *input_lengths_data, int input_lengths_len, int64_t *target_lengths_data, int target_lengths_len, gc_tensor neg_log_likelihood, gc_tensor log_alpha, int64_t blank, int zero_infinity);
raw_tensor atg__ctc_loss_backward_out(gc_tensor out, gc_tensor grad, gc_tensor log_probs, gc_tensor targets, int64_t *input_lengths_data, int input_lengths_len, int64_t *target_lengths_data, int target_lengths_len, gc_tensor neg_log_likelihood, gc_tensor log_alpha, int64_t blank, int zero_infinity);
raw_tensor atg__ctc_loss_backward_tensor(gc_tensor grad, gc_tensor log_probs, gc_tensor targets, gc_tensor input_lengths, gc_tensor target_lengths, gc_tensor neg_log_likelihood, gc_tensor log_alpha, int64_t blank, int zero_infinity);
void atg__ctc_loss_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor log_probs, gc_tensor targets, int64_t *input_lengths_data, int input_lengths_len, int64_t *target_lengths_data, int target_lengths_len, int64_t blank, int zero_infinity);
void atg__ctc_loss_tensor(raw_tensor *, gc_tensor log_probs, gc_tensor targets, gc_tensor input_lengths, gc_tensor target_lengths, int64_t blank, int zero_infinity);
void atg__ctc_loss_tensor_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor log_probs, gc_tensor targets, gc_tensor input_lengths, gc_tensor target_lengths, int64_t blank, int zero_infinity);
void atg__cudnn_ctc_loss(raw_tensor *, gc_tensor log_probs, gc_tensor targets, int64_t *input_lengths_data, int input_lengths_len, int64_t *target_lengths_data, int target_lengths_len, int64_t blank, int deterministic, int zero_infinity);
void atg__cudnn_ctc_loss_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor log_probs, gc_tensor targets, int64_t *input_lengths_data, int input_lengths_len, int64_t *target_lengths_data, int target_lengths_len, int64_t blank, int deterministic, int zero_infinity);
void atg__cudnn_ctc_loss_tensor(raw_tensor *, gc_tensor log_probs, gc_tensor targets, gc_tensor input_lengths, gc_tensor target_lengths, int64_t blank, int deterministic, int zero_infinity);
raw_tensor atg__cudnn_init_dropout_state(double dropout, int train, int64_t dropout_seed, int options_kind, int options_device);
raw_tensor atg__cudnn_init_dropout_state_out(gc_tensor out, double dropout, int train, int64_t dropout_seed);
void atg__cudnn_rnn(raw_tensor *, gc_tensor input, gc_tensor *weight_data, int weight_len, int64_t weight_stride0, gc_tensor weight_buf, gc_tensor hx, gc_tensor cx, int64_t mode, int64_t hidden_size, int64_t proj_size, int64_t num_layers, int batch_first, double dropout, int train, int bidirectional, int64_t *batch_sizes_data, int batch_sizes_len, gc_tensor dropout_state);
raw_tensor atg__cudnn_rnn_flatten_weight(gc_tensor *weight_arr_data, int weight_arr_len, int64_t weight_stride0, int64_t input_size, int64_t mode, int64_t hidden_size, int64_t proj_size, int64_t num_layers, int batch_first, int bidirectional);
raw_tensor atg__cudnn_rnn_flatten_weight_out(gc_tensor out, gc_tensor *weight_arr_data, int weight_arr_len, int64_t weight_stride0, int64_t input_size, int64_t mode, int64_t hidden_size, int64_t proj_size, int64_t num_layers, int batch_first, int bidirectional);
void atg__cudnn_rnn_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor out2, gc_tensor out3, gc_tensor out4, gc_tensor input, gc_tensor *weight_data, int weight_len, int64_t weight_stride0, gc_tensor weight_buf, gc_tensor hx, gc_tensor cx, int64_t mode, int64_t hidden_size, int64_t proj_size, int64_t num_layers, int batch_first, double dropout, int train, int bidirectional, int64_t *batch_sizes_data, int batch_sizes_len, gc_tensor dropout_state);
int64_t atg__debug_has_internal_overlap(gc_tensor self);
raw_tensor atg__dim_arange(gc_tensor like, int64_t dim);
int64_t atg__dimi(gc_tensor self);
int64_t atg__dimv(gc_tensor self);
raw_tensor atg__dirichlet_grad(gc_tensor x, gc_tensor alpha, gc_tensor total);
raw_tensor atg__dirichlet_grad_out(gc_tensor out, gc_tensor x, gc_tensor alpha, gc_tensor total);
raw_tensor atg__dyn_quant_matmul_4bit(gc_tensor inp, gc_tensor packed_weights, int64_t block_size, int64_t in_features, int64_t out_features);
raw_tensor atg__dyn_quant_pack_4bit_weight(gc_tensor weights, gc_tensor scales_zeros, gc_tensor bias, int64_t block_size, int64_t in_features, int64_t out_features);
void atg__efficient_attention_backward(raw_tensor *, gc_tensor grad_out_, gc_tensor query, gc_tensor key, gc_tensor value, gc_tensor bias, gc_tensor out, gc_tensor cu_seqlens_q, gc_tensor cu_seqlens_k, int64_t max_seqlen_q, int64_t max_seqlen_k, gc_tensor logsumexp, double dropout_p, gc_tensor philox_seed, gc_tensor philox_offset, int64_t custom_mask_type, int bias_requires_grad, double scale_v, int scale_null, int64_t num_splits_key_v, int num_splits_key_null, int64_t window_size_v, int window_size_null, int shared_storage_dqdkdv);
raw_tensor atg__efficientzerotensor(int64_t *size_data, int size_len, int options_kind, int options_device);
raw_tensor atg__efficientzerotensor_out(gc_tensor out, int64_t *size_data, int size_len);
void atg__embedding_bag(raw_tensor *, gc_tensor weight, gc_tensor indices, gc_tensor offsets, int scale_grad_by_freq, int64_t mode, int sparse, gc_tensor per_sample_weights, int include_last_offset, int64_t padding_idx);
raw_tensor atg__embedding_bag_backward(gc_tensor grad, gc_tensor indices, gc_tensor offsets, gc_tensor offset2bag, gc_tensor bag_size, gc_tensor maximum_indices, int64_t num_weights, int scale_grad_by_freq, int64_t mode, int sparse, gc_tensor per_sample_weights, int64_t padding_idx);
raw_tensor atg__embedding_bag_dense_backward(gc_tensor grad, gc_tensor indices, gc_tensor offset2bag, gc_tensor bag_size, gc_tensor maximum_indices, int64_t num_weights, int scale_grad_by_freq, int64_t mode, gc_tensor per_sample_weights, int64_t padding_idx);
raw_tensor atg__embedding_bag_dense_backward_out(gc_tensor out, gc_tensor grad, gc_tensor indices, gc_tensor offset2bag, gc_tensor bag_size, gc_tensor maximum_indices, int64_t num_weights, int scale_grad_by_freq, int64_t mode, gc_tensor per_sample_weights, int64_t padding_idx);
void atg__embedding_bag_forward_only(raw_tensor *, gc_tensor weight, gc_tensor indices, gc_tensor offsets, int scale_grad_by_freq, int64_t mode, int sparse, gc_tensor per_sample_weights, int include_last_offset, int64_t padding_idx);
void atg__embedding_bag_forward_only_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor out2, gc_tensor out3, gc_tensor weight, gc_tensor indices, gc_tensor offsets, int scale_grad_by_freq, int64_t mode, int sparse, gc_tensor per_sample_weights, int include_last_offset, int64_t padding_idx);
void atg__embedding_bag_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor out2, gc_tensor out3, gc_tensor weight, gc_tensor indices, gc_tensor offsets, int scale_grad_by_freq, int64_t mode, int sparse, gc_tensor per_sample_weights, int include_last_offset, int64_t padding_idx);
raw_tensor atg__embedding_bag_per_sample_weights_backward(gc_tensor grad, gc_tensor weight, gc_tensor indices, gc_tensor offsets, gc_tensor offset2bag, int64_t mode, int64_t padding_idx);
raw_tensor atg__embedding_bag_per_sample_weights_backward_out(gc_tensor out, gc_tensor grad, gc_tensor weight, gc_tensor indices, gc_tensor offsets, gc_tensor offset2bag, int64_t mode, int64_t padding_idx);
raw_tensor atg__embedding_bag_sparse_backward(gc_tensor grad, gc_tensor indices, gc_tensor offsets, gc_tensor offset2bag, gc_tensor bag_size, int64_t num_weights, int scale_grad_by_freq, int64_t mode, gc_tensor per_sample_weights, int64_t padding_idx);
raw_tensor atg__empty_affine_quantized(int64_t *size_data, int size_len, int options_kind, int options_device, double scale, int64_t zero_point);
raw_tensor atg__empty_affine_quantized_out(gc_tensor out, int64_t *size_data, int size_len, double scale, int64_t zero_point);
raw_tensor atg__empty_per_channel_affine_quantized(int64_t *size_data, int size_len, gc_tensor scales, gc_tensor zero_points, int64_t axis, int options_kind, int options_device);
raw_tensor atg__empty_per_channel_affine_quantized_out(gc_tensor out, int64_t *size_data, int size_len, gc_tensor scales, gc_tensor zero_points, int64_t axis);
raw_tensor atg__euclidean_dist(gc_tensor x1, gc_tensor x2);
raw_tensor atg__euclidean_dist_out(gc_tensor out, gc_tensor x1, gc_tensor x2);
raw_tensor atg__fake_quantize_learnable_per_channel_affine(gc_tensor self, gc_tensor scale, gc_tensor zero_point, int64_t axis, int64_t quant_min, int64_t quant_max, double grad_factor);
void atg__fake_quantize_learnable_per_channel_affine_backward(raw_tensor *, gc_tensor grad, gc_tensor self, gc_tensor scale, gc_tensor zero_point, int64_t axis, int64_t quant_min, int64_t quant_max, double grad_factor);
raw_tensor atg__fake_quantize_learnable_per_channel_affine_out(gc_tensor out, gc_tensor self, gc_tensor scale, gc_tensor zero_point, int64_t axis, int64_t quant_min, int64_t quant_max, double grad_factor);
raw_tensor atg__fake_quantize_learnable_per_tensor_affine(gc_tensor self, gc_tensor scale, gc_tensor zero_point, int64_t quant_min, int64_t quant_max, double grad_factor);
void atg__fake_quantize_learnable_per_tensor_affine_backward(raw_tensor *, gc_tensor grad, gc_tensor self, gc_tensor scale, gc_tensor zero_point, int64_t quant_min, int64_t quant_max, double grad_factor);
raw_tensor atg__fake_quantize_learnable_per_tensor_affine_out(gc_tensor out, gc_tensor self, gc_tensor scale, gc_tensor zero_point, int64_t quant_min, int64_t quant_max, double grad_factor);
void atg__fake_quantize_per_tensor_affine_cachemask_tensor_qparams(raw_tensor *, gc_tensor self, gc_tensor scale, gc_tensor zero_point, gc_tensor fake_quant_enabled, int64_t quant_min, int64_t quant_max);
void atg__fake_quantize_per_tensor_affine_cachemask_tensor_qparams_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor self, gc_tensor scale, gc_tensor zero_point, gc_tensor fake_quant_enabled, int64_t quant_min, int64_t quant_max);
raw_tensor atg__fft_c2c(gc_tensor self, int64_t *dim_data, int dim_len, int64_t normalization, int forward);
raw_tensor atg__fft_c2c_out(gc_tensor out, gc_tensor self, int64_t *dim_data, int dim_len, int64_t normalization, int forward);
raw_tensor atg__fft_c2r(gc_tensor self, int64_t *dim_data, int dim_len, int64_t normalization, int64_t last_dim_size);
raw_tensor atg__fft_c2r_out(gc_tensor out, gc_tensor self, int64_t *dim_data, int dim_len, int64_t normalization, int64_t last_dim_size);
raw_tensor atg__fft_r2c(gc_tensor self, int64_t *dim_data, int dim_len, int64_t normalization, int onesided);
raw_tensor atg__fft_r2c_out(gc_tensor out, gc_tensor self, int64_t *dim_data, int dim_len, int64_t normalization, int onesided);
raw_tensor atg__fill_mem_eff_dropout_mask_(gc_tensor self, double dropout_p, int64_t seed, int64_t offset);
void atg__flash_attention_backward(raw_tensor *, gc_tensor grad_out, gc_tensor query, gc_tensor key, gc_tensor value, gc_tensor out, gc_tensor logsumexp, gc_tensor cum_seq_q, gc_tensor cum_seq_k, int64_t max_q, int64_t max_k, double dropout_p, int is_causal, gc_tensor rng_state, gc_tensor unused, double scale_v, int scale_null, int64_t window_size_left_v, int window_size_left_null, int64_t window_size_right_v, int window_size_right_null);
raw_tensor atg__foobar(gc_tensor self, int arg1, int arg2, int arg3);
raw_tensor atg__foobar_out(gc_tensor out, gc_tensor self, int arg1, int arg2, int arg3);
raw_tensor atg__functional_assert_async(gc_tensor self, char * assert_msg, gc_tensor dep_token);
raw_tensor atg__functional_assert_scalar(scalar self, char * assert_msg, gc_tensor dep_token);
raw_tensor atg__functional_sym_constrain_range(scalar size, int64_t min_v, int min_null, int64_t max_v, int max_null, gc_tensor dep_token);
raw_tensor atg__functional_sym_constrain_range_for_size(scalar size, int64_t min_v, int min_null, int64_t max_v, int max_null, gc_tensor dep_token);
void atg__fused_adagrad(gc_tensor *out_data, int out_len, gc_tensor *self_data, int self_len, gc_tensor *grads_data, int grads_len, gc_tensor *state_sums_data, int state_sums_len, gc_tensor *state_steps_data, int state_steps_len, double lr, double lr_decay, double weight_decay, double eps, int maximize, gc_tensor grad_scale, gc_tensor found_inf);
void atg__fused_adagrad_(gc_tensor *self_data, int self_len, gc_tensor *grads_data, int grads_len, gc_tensor *state_sums_data, int state_sums_len, gc_tensor *state_steps_data, int state_steps_len, double lr, double lr_decay, double weight_decay, double eps, int maximize, gc_tensor grad_scale, gc_tensor found_inf);
void atg__fused_adam(gc_tensor *out_data, int out_len, gc_tensor *self_data, int self_len, gc_tensor *grads_data, int grads_len, gc_tensor *exp_avgs_data, int exp_avgs_len, gc_tensor *exp_avg_sqs_data, int exp_avg_sqs_len, gc_tensor *max_exp_avg_sqs_data, int max_exp_avg_sqs_len, gc_tensor *state_steps_data, int state_steps_len, double lr, double beta1, double beta2, double weight_decay, double eps, int amsgrad, int maximize, gc_tensor grad_scale, gc_tensor found_inf);
void atg__fused_adam_(gc_tensor *self_data, int self_len, gc_tensor *grads_data, int grads_len, gc_tensor *exp_avgs_data, int exp_avgs_len, gc_tensor *exp_avg_sqs_data, int exp_avg_sqs_len, gc_tensor *max_exp_avg_sqs_data, int max_exp_avg_sqs_len, gc_tensor *state_steps_data, int state_steps_len, double lr, double beta1, double beta2, double weight_decay, double eps, int amsgrad, int maximize, gc_tensor grad_scale, gc_tensor found_inf);
void atg__fused_adam_tensor_lr_(gc_tensor *self_data, int self_len, gc_tensor *grads_data, int grads_len, gc_tensor *exp_avgs_data, int exp_avgs_len, gc_tensor *exp_avg_sqs_data, int exp_avg_sqs_len, gc_tensor *max_exp_avg_sqs_data, int max_exp_avg_sqs_len, gc_tensor *state_steps_data, int state_steps_len, gc_tensor lr, double beta1, double beta2, double weight_decay, double eps, int amsgrad, int maximize, gc_tensor grad_scale, gc_tensor found_inf);
void atg__fused_adam_tensor_lr_out(gc_tensor *out_data, int out_len, gc_tensor *self_data, int self_len, gc_tensor *grads_data, int grads_len, gc_tensor *exp_avgs_data, int exp_avgs_len, gc_tensor *exp_avg_sqs_data, int exp_avg_sqs_len, gc_tensor *max_exp_avg_sqs_data, int max_exp_avg_sqs_len, gc_tensor *state_steps_data, int state_steps_len, gc_tensor lr, double beta1, double beta2, double weight_decay, double eps, int amsgrad, int maximize, gc_tensor grad_scale, gc_tensor found_inf);
void atg__fused_adamw(gc_tensor *out_data, int out_len, gc_tensor *self_data, int self_len, gc_tensor *grads_data, int grads_len, gc_tensor *exp_avgs_data, int exp_avgs_len, gc_tensor *exp_avg_sqs_data, int exp_avg_sqs_len, gc_tensor *max_exp_avg_sqs_data, int max_exp_avg_sqs_len, gc_tensor *state_steps_data, int state_steps_len, double lr, double beta1, double beta2, double weight_decay, double eps, int amsgrad, int maximize, gc_tensor grad_scale, gc_tensor found_inf);
void atg__fused_adamw_(gc_tensor *self_data, int self_len, gc_tensor *grads_data, int grads_len, gc_tensor *exp_avgs_data, int exp_avgs_len, gc_tensor *exp_avg_sqs_data, int exp_avg_sqs_len, gc_tensor *max_exp_avg_sqs_data, int max_exp_avg_sqs_len, gc_tensor *state_steps_data, int state_steps_len, double lr, double beta1, double beta2, double weight_decay, double eps, int amsgrad, int maximize, gc_tensor grad_scale, gc_tensor found_inf);
void atg__fused_adamw_tensor_lr_(gc_tensor *self_data, int self_len, gc_tensor *grads_data, int grads_len, gc_tensor *exp_avgs_data, int exp_avgs_len, gc_tensor *exp_avg_sqs_data, int exp_avg_sqs_len, gc_tensor *max_exp_avg_sqs_data, int max_exp_avg_sqs_len, gc_tensor *state_steps_data, int state_steps_len, gc_tensor lr, double beta1, double beta2, double weight_decay, double eps, int amsgrad, int maximize, gc_tensor grad_scale, gc_tensor found_inf);
void atg__fused_adamw_tensor_lr_out(gc_tensor *out_data, int out_len, gc_tensor *self_data, int self_len, gc_tensor *grads_data, int grads_len, gc_tensor *exp_avgs_data, int exp_avgs_len, gc_tensor *exp_avg_sqs_data, int exp_avg_sqs_len, gc_tensor *max_exp_avg_sqs_data, int max_exp_avg_sqs_len, gc_tensor *state_steps_data, int state_steps_len, gc_tensor lr, double beta1, double beta2, double weight_decay, double eps, int amsgrad, int maximize, gc_tensor grad_scale, gc_tensor found_inf);
void atg__fused_dropout(raw_tensor *, gc_tensor self, double p);
void atg__fused_dropout_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor self, double p);
void atg__fused_moving_avg_obs_fq_helper(raw_tensor *, gc_tensor self, gc_tensor observer_on, gc_tensor fake_quant_on, gc_tensor running_min, gc_tensor running_max, gc_tensor scale, gc_tensor zero_point, double averaging_const, int64_t quant_min, int64_t quant_max, int64_t ch_axis, int per_row_fake_quant, int symmetric_quant);
void atg__fused_moving_avg_obs_fq_helper_functional(raw_tensor *, gc_tensor self, gc_tensor observer_on, gc_tensor fake_quant_on, gc_tensor running_min, gc_tensor running_max, gc_tensor scale, gc_tensor zero_point, double averaging_const, int64_t quant_min, int64_t quant_max, int64_t ch_axis, int per_row_fake_quant, int symmetric_quant);
void atg__fused_moving_avg_obs_fq_helper_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor self, gc_tensor observer_on, gc_tensor fake_quant_on, gc_tensor running_min, gc_tensor running_max, gc_tensor scale, gc_tensor zero_point, double averaging_const, int64_t quant_min, int64_t quant_max, int64_t ch_axis, int per_row_fake_quant, int symmetric_quant);
int64_t atg__fused_sdp_choice(gc_tensor query, gc_tensor key, gc_tensor value, gc_tensor attn_mask, double dropout_p, int is_causal, double scale_v, int scale_null, int enable_gqa);
void atg__fused_sgd(gc_tensor *out_data, int out_len, gc_tensor *self_data, int self_len, gc_tensor *grads_data, int grads_len, gc_tensor *momentum_buffer_list_data, int momentum_buffer_list_len, double weight_decay, double momentum, double lr, double dampening, int nesterov, int maximize, int is_first_step, gc_tensor grad_scale, gc_tensor found_inf);
void atg__fused_sgd_(gc_tensor *self_data, int self_len, gc_tensor *grads_data, int grads_len, gc_tensor *momentum_buffer_list_data, int momentum_buffer_list_len, double weight_decay, double momentum, double lr, double dampening, int nesterov, int maximize, int is_first_step, gc_tensor grad_scale, gc_tensor found_inf);
void atg__fused_sgd_tensor_lr_(gc_tensor *self_data, int self_len, gc_tensor *grads_data, int grads_len, gc_tensor *momentum_buffer_list_data, int momentum_buffer_list_len, double weight_decay, double momentum, gc_tensor lr, double dampening, int nesterov, int maximize, int is_first_step, gc_tensor grad_scale, gc_tensor found_inf);
void atg__fused_sgd_tensor_lr_out(gc_tensor *out_data, int out_len, gc_tensor *self_data, int self_len, gc_tensor *grads_data, int grads_len, gc_tensor *momentum_buffer_list_data, int momentum_buffer_list_len, double weight_decay, double momentum, gc_tensor lr, double dampening, int nesterov, int maximize, int is_first_step, gc_tensor grad_scale, gc_tensor found_inf);
raw_tensor atg__fw_primal(gc_tensor self, int64_t level);
raw_tensor atg__fw_primal_copy(gc_tensor self, int64_t level);
raw_tensor atg__fw_primal_copy_out(gc_tensor out, gc_tensor self, int64_t level);
raw_tensor atg__gather_sparse_backward(gc_tensor self, int64_t dim, gc_tensor index, gc_tensor grad);
raw_tensor atg__grid_sampler_2d_cpu_fallback(gc_tensor input, gc_tensor grid, int64_t interpolation_mode, int64_t padding_mode, int align_corners);
void atg__grid_sampler_2d_cpu_fallback_backward(raw_tensor *, gc_tensor grad_output, gc_tensor input, gc_tensor grid, int64_t interpolation_mode, int64_t padding_mode, int align_corners);
raw_tensor atg__grid_sampler_2d_cpu_fallback_out(gc_tensor out, gc_tensor input, gc_tensor grid, int64_t interpolation_mode, int64_t padding_mode, int align_corners);
int atg__has_compatible_shallow_copy_type(gc_tensor self, gc_tensor from);
int atg__has_same_storage_numel(gc_tensor self, gc_tensor other);
raw_tensor *atg__histogramdd_bin_edges(gc_tensor self, int64_t *bins_data, int bins_len, double *range_data, int range_len, gc_tensor weight, int density);
void atg__histogramdd_bin_edges_out(gc_tensor *out_data, int out_len, gc_tensor self, int64_t *bins_data, int bins_len, double *range_data, int range_len, gc_tensor weight, int density);
raw_tensor atg__histogramdd_from_bin_cts(gc_tensor self, int64_t *bins_data, int bins_len, double *range_data, int range_len, gc_tensor weight, int density);
raw_tensor atg__histogramdd_from_bin_cts_out(gc_tensor out, gc_tensor self, int64_t *bins_data, int bins_len, double *range_data, int range_len, gc_tensor weight, int density);
raw_tensor atg__histogramdd_from_bin_tensors(gc_tensor self, gc_tensor *bins_data, int bins_len, gc_tensor weight, int density);
raw_tensor atg__histogramdd_from_bin_tensors_out(gc_tensor out, gc_tensor self, gc_tensor *bins_data, int bins_len, gc_tensor weight, int density);
raw_tensor atg__indices(gc_tensor self);
raw_tensor atg__indices_copy(gc_tensor self);
raw_tensor atg__indices_copy_out(gc_tensor out, gc_tensor self);
raw_tensor atg__int_mm(gc_tensor self, gc_tensor mat2);
raw_tensor atg__int_mm_out(gc_tensor out, gc_tensor self, gc_tensor mat2);
raw_tensor atg__is_all_true(gc_tensor self);
raw_tensor atg__is_any_true(gc_tensor self);
int atg__is_zerotensor(gc_tensor self);
raw_tensor atg__lazy_clone(gc_tensor self);
void atg__linalg_check_errors(gc_tensor info, char * api_name, int is_matrix);
void atg__linalg_det(raw_tensor *, gc_tensor A);
void atg__linalg_det_result(raw_tensor *, gc_tensor result, gc_tensor LU, gc_tensor pivots, gc_tensor A);
void atg__linalg_eigh(raw_tensor *, gc_tensor A, char * UPLO, int compute_v);
void atg__linalg_eigh_eigenvalues(raw_tensor *, gc_tensor eigenvalues, gc_tensor eigenvectors, gc_tensor A, char * UPLO, int compute_v);
raw_tensor atg__linalg_eigvals(gc_tensor self);
void atg__linalg_slogdet(raw_tensor *, gc_tensor A);
void atg__linalg_slogdet_sign(raw_tensor *, gc_tensor sign, gc_tensor logabsdet, gc_tensor LU, gc_tensor pivots, gc_tensor A);
void atg__linalg_solve_ex(raw_tensor *, gc_tensor A, gc_tensor B, int left, int check_errors);
void atg__linalg_solve_ex_result(raw_tensor *, gc_tensor result, gc_tensor LU, gc_tensor pivots, gc_tensor info, gc_tensor A, gc_tensor B, int left, int check_errors);
void atg__linalg_svd(raw_tensor *, gc_tensor A, int full_matrices, int compute_uv, char * driver_v, int driver_null);
void atg__linalg_svd_u(raw_tensor *, gc_tensor U, gc_tensor S, gc_tensor Vh, gc_tensor A, int full_matrices, int compute_uv, char * driver_v, int driver_null);
raw_tensor atg__log_softmax(gc_tensor self, int64_t dim, int half_to_float);
raw_tensor atg__log_softmax_backward_data(gc_tensor grad_output, gc_tensor output, int64_t dim, int input_dtype);
raw_tensor atg__log_softmax_backward_data_out(gc_tensor out, gc_tensor grad_output, gc_tensor output, int64_t dim, int input_dtype);
raw_tensor atg__log_softmax_out(gc_tensor out, gc_tensor self, int64_t dim, int half_to_float);
raw_tensor atg__logcumsumexp(gc_tensor self, int64_t dim);
raw_tensor atg__logcumsumexp_out(gc_tensor out, gc_tensor self, int64_t dim);
void atg__lstm_mps(raw_tensor *, gc_tensor input, gc_tensor *hx_data, int hx_len, gc_tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional, int batch_first);
void atg__lstm_mps_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor out2, gc_tensor out3, gc_tensor out4, gc_tensor out5, gc_tensor input, gc_tensor *hx_data, int hx_len, gc_tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional, int batch_first);
void atg__lu_with_info(raw_tensor *, gc_tensor self, int pivot, int check_errors);
raw_tensor atg__make_dep_token(int options_kind, int options_device);
raw_tensor atg__make_dual(gc_tensor primal, gc_tensor tangent, int64_t level);
raw_tensor atg__make_dual_copy(gc_tensor primal, gc_tensor tangent, int64_t level);
raw_tensor atg__make_dual_copy_out(gc_tensor out, gc_tensor primal, gc_tensor tangent, int64_t level);
raw_tensor atg__make_per_channel_quantized_tensor(gc_tensor self, gc_tensor scale, gc_tensor zero_point, int64_t axis);
raw_tensor atg__make_per_channel_quantized_tensor_out(gc_tensor out, gc_tensor self, gc_tensor scale, gc_tensor zero_point, int64_t axis);
raw_tensor atg__make_per_tensor_quantized_tensor(gc_tensor self, double scale, int64_t zero_point);
raw_tensor atg__make_per_tensor_quantized_tensor_out(gc_tensor out, gc_tensor self, double scale, int64_t zero_point);
raw_tensor atg__masked_scale(gc_tensor self, gc_tensor mask, double scale);
raw_tensor atg__masked_scale_out(gc_tensor out, gc_tensor self, gc_tensor mask, double scale);
raw_tensor atg__masked_softmax(gc_tensor self, gc_tensor mask, int64_t dim_v, int dim_null, int64_t mask_type_v, int mask_type_null);
raw_tensor atg__masked_softmax_backward(gc_tensor grad_output, gc_tensor output, gc_tensor mask, int64_t dim_v, int dim_null);
raw_tensor atg__masked_softmax_backward_out(gc_tensor out, gc_tensor grad_output, gc_tensor output, gc_tensor mask, int64_t dim_v, int dim_null);
raw_tensor atg__masked_softmax_out(gc_tensor out, gc_tensor self, gc_tensor mask, int64_t dim_v, int dim_null, int64_t mask_type_v, int mask_type_null);
raw_tensor atg__mixed_dtypes_linear(gc_tensor input, gc_tensor weight, gc_tensor scale, gc_tensor bias, char * activation_v, int activation_null);
raw_tensor atg__mkldnn_reshape(gc_tensor self, int64_t *shape_data, int shape_len);
raw_tensor atg__mkldnn_reshape_out(gc_tensor out, gc_tensor self, int64_t *shape_data, int shape_len);
raw_tensor atg__mkldnn_transpose(gc_tensor self, int64_t dim0, int64_t dim1);
raw_tensor atg__mkldnn_transpose_(gc_tensor self, int64_t dim0, int64_t dim1);
raw_tensor atg__mkldnn_transpose_out(gc_tensor out, gc_tensor self, int64_t dim0, int64_t dim1);
raw_tensor atg__mps_convolution(gc_tensor self, gc_tensor weight, gc_tensor bias, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups);
raw_tensor atg__mps_convolution_out(gc_tensor out, gc_tensor self, gc_tensor weight, gc_tensor bias, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups);
raw_tensor atg__mps_convolution_transpose(gc_tensor self, gc_tensor weight, int64_t *padding_data, int padding_len, int64_t *output_padding_data, int output_padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups);
raw_tensor atg__mps_convolution_transpose_out(gc_tensor out, gc_tensor self, gc_tensor weight, int64_t *padding_data, int padding_len, int64_t *output_padding_data, int output_padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups);
void atg__native_batch_norm_legit(raw_tensor *, gc_tensor input, gc_tensor weight, gc_tensor bias, gc_tensor running_mean, gc_tensor running_var, int training, double momentum, double eps);
void atg__native_batch_norm_legit_functional(raw_tensor *, gc_tensor input, gc_tensor weight, gc_tensor bias, gc_tensor running_mean, gc_tensor running_var, int training, double momentum, double eps);
void atg__native_batch_norm_legit_no_stats(raw_tensor *, gc_tensor input, gc_tensor weight, gc_tensor bias, int training, double momentum, double eps);
void atg__native_batch_norm_legit_no_stats_out(raw_tensor *, gc_tensor out, gc_tensor save_mean, gc_tensor save_invstd, gc_tensor input, gc_tensor weight, gc_tensor bias, int training, double momentum, double eps);
void atg__native_batch_norm_legit_no_training(raw_tensor *, gc_tensor input, gc_tensor weight, gc_tensor bias, gc_tensor running_mean, gc_tensor running_var, double momentum, double eps);
void atg__native_batch_norm_legit_no_training_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor out2, gc_tensor input, gc_tensor weight, gc_tensor bias, gc_tensor running_mean, gc_tensor running_var, double momentum, double eps);
void atg__native_batch_norm_legit_out(raw_tensor *, gc_tensor out, gc_tensor save_mean, gc_tensor save_invstd, gc_tensor input, gc_tensor weight, gc_tensor bias, gc_tensor running_mean, gc_tensor running_var, int training, double momentum, double eps);
void atg__native_multi_head_attention(raw_tensor *, gc_tensor query, gc_tensor key, gc_tensor value, int64_t embed_dim, int64_t num_head, gc_tensor qkv_weight, gc_tensor qkv_bias, gc_tensor proj_weight, gc_tensor proj_bias, gc_tensor mask, int need_weights, int average_attn_weights, int64_t mask_type_v, int mask_type_null);
void atg__native_multi_head_attention_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor query, gc_tensor key, gc_tensor value, int64_t embed_dim, int64_t num_head, gc_tensor qkv_weight, gc_tensor qkv_bias, gc_tensor proj_weight, gc_tensor proj_bias, gc_tensor mask, int need_weights, int average_attn_weights, int64_t mask_type_v, int mask_type_null);
raw_tensor atg__neg_view(gc_tensor self);
raw_tensor atg__neg_view_copy(gc_tensor self);
raw_tensor atg__neg_view_copy_out(gc_tensor out, gc_tensor self);
void atg__nested_compute_contiguous_strides_offsets(raw_tensor *, gc_tensor nested_size);
raw_tensor atg__nested_from_padded(gc_tensor padded, gc_tensor cpu_nested_shape_example, int fuse_transform_0213);
raw_tensor atg__nested_from_padded_and_nested_example(gc_tensor padded, gc_tensor nt_example);
raw_tensor atg__nested_from_padded_and_nested_example_out(gc_tensor out, gc_tensor padded, gc_tensor nt_example);
raw_tensor atg__nested_from_padded_out(gc_tensor out, gc_tensor padded, gc_tensor cpu_nested_shape_example, int fuse_transform_0213);
raw_tensor atg__nested_from_padded_tensor(gc_tensor padded, gc_tensor offsets, gc_tensor dummy, int64_t ragged_idx, gc_tensor min_seqlen, gc_tensor max_seqlen, int64_t sum_S_v, int sum_S_null);
raw_tensor atg__nested_get_jagged_dummy(gc_tensor any);
raw_tensor atg__nested_get_lengths(gc_tensor self);
raw_tensor atg__nested_get_max_seqlen(gc_tensor self);
raw_tensor atg__nested_get_min_seqlen(gc_tensor self);
raw_tensor atg__nested_get_offsets(gc_tensor self);
int64_t atg__nested_get_ragged_idx(gc_tensor self);
raw_tensor atg__nested_get_values(gc_tensor self);
raw_tensor atg__nested_get_values_copy(gc_tensor self);
raw_tensor atg__nested_get_values_copy_out(gc_tensor out, gc_tensor self);
raw_tensor atg__nested_select_backward(gc_tensor grad_output, gc_tensor self, int64_t dim, int64_t index);
raw_tensor atg__nested_sum_backward(gc_tensor grad, gc_tensor self, int64_t *dim_data, int dim_len, int keepdim);
raw_tensor atg__nested_view_from_buffer(gc_tensor self, gc_tensor nested_size, gc_tensor nested_strides, gc_tensor offsets);
raw_tensor atg__nested_view_from_buffer_copy(gc_tensor self, gc_tensor nested_size, gc_tensor nested_strides, gc_tensor offsets);
raw_tensor atg__nested_view_from_buffer_copy_out(gc_tensor out, gc_tensor self, gc_tensor nested_size, gc_tensor nested_strides, gc_tensor offsets);
raw_tensor atg__nested_view_from_jagged(gc_tensor self, gc_tensor offsets, gc_tensor dummy, gc_tensor lengths, int64_t ragged_idx, gc_tensor min_seqlen, gc_tensor max_seqlen);
raw_tensor atg__nested_view_from_jagged_copy(gc_tensor self, gc_tensor offsets, gc_tensor dummy, gc_tensor lengths, int64_t ragged_idx, gc_tensor min_seqlen, gc_tensor max_seqlen);
raw_tensor atg__nested_view_from_jagged_copy_out(gc_tensor out, gc_tensor self, gc_tensor offsets, gc_tensor dummy, gc_tensor lengths, int64_t ragged_idx, gc_tensor min_seqlen, gc_tensor max_seqlen);
raw_tensor atg__new_zeros_with_same_feature_meta(gc_tensor self, gc_tensor other, int64_t self_num_batch_dims);
raw_tensor atg__new_zeros_with_same_feature_meta_out(gc_tensor out, gc_tensor self, gc_tensor other, int64_t self_num_batch_dims);
int atg__nnpack_available();
raw_tensor atg__nnpack_spatial_convolution(gc_tensor input, gc_tensor weight, gc_tensor bias, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len);
raw_tensor atg__nnpack_spatial_convolution_out(gc_tensor out, gc_tensor input, gc_tensor weight, gc_tensor bias, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len);
int64_t atg__nnz(gc_tensor self);
void atg__pack_padded_sequence(raw_tensor *, gc_tensor input, gc_tensor lengths, int batch_first);
raw_tensor atg__pack_padded_sequence_backward(gc_tensor grad, int64_t *input_size_data, int input_size_len, gc_tensor batch_sizes, int batch_first);
void atg__pack_padded_sequence_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor input, gc_tensor lengths, int batch_first);
raw_tensor atg__pad_circular(gc_tensor self, int64_t *pad_data, int pad_len);
raw_tensor atg__pad_enum(gc_tensor self, int64_t *pad_data, int pad_len, int64_t mode, double value_v, int value_null);
void atg__pad_packed_sequence(raw_tensor *, gc_tensor data, gc_tensor batch_sizes, int batch_first, scalar padding_value, int64_t total_length);
raw_tensor atg__pdist_backward(gc_tensor grad, gc_tensor self, double p, gc_tensor pdist);
raw_tensor atg__pdist_backward_out(gc_tensor out, gc_tensor grad, gc_tensor self, double p, gc_tensor pdist);
raw_tensor atg__pin_memory(gc_tensor self, int device);
raw_tensor atg__pin_memory_out(gc_tensor out, gc_tensor self, int device);
raw_tensor atg__prelu_kernel(gc_tensor self, gc_tensor weight);
void atg__prelu_kernel_backward(raw_tensor *, gc_tensor grad_output, gc_tensor self, gc_tensor weight);
void atg__print(char * s);
void atg__propagate_xla_data(gc_tensor input, gc_tensor output);
raw_tensor atg__remove_batch_dim(gc_tensor self, int64_t level, int64_t batch_size, int64_t out_dim);
raw_tensor atg__reshape_alias(gc_tensor self, int64_t *size_data, int size_len, int64_t *stride_data, int stride_len);
raw_tensor atg__reshape_alias_copy(gc_tensor self, int64_t *size_data, int size_len, int64_t *stride_data, int stride_len);
raw_tensor atg__reshape_alias_copy_out(gc_tensor out, gc_tensor self, int64_t *size_data, int size_len, int64_t *stride_data, int stride_len);
raw_tensor atg__reshape_copy(gc_tensor self, int64_t *size_data, int size_len);
raw_tensor atg__reshape_from_tensor(gc_tensor self, gc_tensor shape);
raw_tensor atg__resize_output(gc_tensor self, int64_t *size_data, int size_len, int device);
raw_tensor atg__resize_output_(gc_tensor self, int64_t *size_data, int size_len, int device);
raw_tensor atg__resize_output_out(gc_tensor out, gc_tensor self, int64_t *size_data, int size_len, int device);
void atg__rowwise_prune(raw_tensor *, gc_tensor weight, gc_tensor mask, int compressed_indices_dtype);
raw_tensor atg__safe_softmax(gc_tensor self, int64_t dim, int dtype);
raw_tensor atg__sample_dirichlet(gc_tensor self);
raw_tensor atg__sample_dirichlet_out(gc_tensor out, gc_tensor self);
raw_tensor atg__saturate_weight_to_fp16(gc_tensor weight);
void atg__scaled_dot_product_attention_math(raw_tensor *, gc_tensor query, gc_tensor key, gc_tensor value, gc_tensor attn_mask, double dropout_p, int is_causal, gc_tensor dropout_mask, double scale_v, int scale_null, int enable_gqa);
void atg__scaled_dot_product_attention_math_for_mps(raw_tensor *, gc_tensor query, gc_tensor key, gc_tensor value, gc_tensor attn_mask, double dropout_p, int is_causal, gc_tensor dropout_mask, double scale_v, int scale_null);
void atg__scaled_dot_product_cudnn_attention_backward(raw_tensor *, gc_tensor grad_out, gc_tensor query, gc_tensor key, gc_tensor value, gc_tensor out, gc_tensor logsumexp, gc_tensor philox_seed, gc_tensor philox_offset, gc_tensor attn_bias, gc_tensor cum_seq_q, gc_tensor cum_seq_k, int64_t max_q, int64_t max_k, double dropout_p, int is_causal, double scale_v, int scale_null);
void atg__scaled_dot_product_efficient_attention(raw_tensor *, gc_tensor query, gc_tensor key, gc_tensor value, gc_tensor attn_bias, int compute_log_sumexp, double dropout_p, int is_causal, double scale_v, int scale_null);
void atg__scaled_dot_product_flash_attention_backward(raw_tensor *, gc_tensor grad_out, gc_tensor query, gc_tensor key, gc_tensor value, gc_tensor out, gc_tensor logsumexp, gc_tensor cum_seq_q, gc_tensor cum_seq_k, int64_t max_q, int64_t max_k, double dropout_p, int is_causal, gc_tensor philox_seed, gc_tensor philox_offset, double scale_v, int scale_null);
void atg__scaled_dot_product_flash_attention_for_cpu(raw_tensor *, gc_tensor query, gc_tensor key, gc_tensor value, double dropout_p, int is_causal, gc_tensor attn_mask, double scale_v, int scale_null);
void atg__scaled_dot_product_flash_attention_for_cpu_backward(raw_tensor *, gc_tensor grad_out, gc_tensor query, gc_tensor key, gc_tensor value, gc_tensor out, gc_tensor logsumexp, double dropout_p, int is_causal, gc_tensor attn_mask, double scale_v, int scale_null);
raw_tensor atg__scaled_grouped_mm(gc_tensor self, gc_tensor mat2, gc_tensor scale_a, gc_tensor scale_b, gc_tensor offs, gc_tensor bias, gc_tensor scale_result, int out_dtype, int use_fast_accum);
raw_tensor atg__scaled_mm(gc_tensor self, gc_tensor mat2, gc_tensor scale_a, gc_tensor scale_b, gc_tensor bias, gc_tensor scale_result, int out_dtype, int use_fast_accum);
raw_tensor atg__scaled_mm_out(gc_tensor out, gc_tensor self, gc_tensor mat2, gc_tensor scale_a, gc_tensor scale_b, gc_tensor bias, gc_tensor scale_result, int out_dtype, int use_fast_accum);
raw_tensor atg__scatter_reduce(gc_tensor self, int64_t dim, gc_tensor index, gc_tensor src, char * reduce, int include_self);
raw_tensor atg__scatter_reduce_(gc_tensor self, int64_t dim, gc_tensor index, gc_tensor src, char * reduce, int include_self);
raw_tensor atg__scatter_reduce_two_out(gc_tensor out, gc_tensor self, int64_t dim, gc_tensor index, gc_tensor src, char * reduce, int include_self);
raw_tensor atg__segment_reduce_backward(gc_tensor grad, gc_tensor output, gc_tensor data, char * reduce, gc_tensor lengths, gc_tensor offsets, int64_t axis, scalar initial);
raw_tensor atg__segment_reduce_backward_out(gc_tensor out, gc_tensor grad, gc_tensor output, gc_tensor data, char * reduce, gc_tensor lengths, gc_tensor offsets, int64_t axis, scalar initial);
raw_tensor atg__shape_as_tensor(gc_tensor self);
void atg__slow_conv2d_backward(raw_tensor *, gc_tensor grad_input, gc_tensor grad_weight, gc_tensor grad_bias, gc_tensor grad_output, gc_tensor self, gc_tensor weight, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len);
void atg__sobol_engine_draw(raw_tensor *, gc_tensor quasi, int64_t n, gc_tensor sobolstate, int64_t dimension, int64_t num_generated, int dtype);
raw_tensor atg__sobol_engine_ff_(gc_tensor self, int64_t n, gc_tensor sobolstate, int64_t dimension, int64_t num_generated);
raw_tensor atg__sobol_engine_initialize_state_(gc_tensor self, int64_t dimension);
raw_tensor atg__sobol_engine_scramble_(gc_tensor self, gc_tensor ltm, int64_t dimension);
raw_tensor atg__softmax(gc_tensor self, int64_t dim, int half_to_float);
raw_tensor atg__softmax_backward_data(gc_tensor grad_output, gc_tensor output, int64_t dim, int input_dtype);
raw_tensor atg__softmax_backward_data_out(gc_tensor grad_input, gc_tensor grad_output, gc_tensor output, int64_t dim, int input_dtype);
raw_tensor atg__softmax_out(gc_tensor out, gc_tensor self, int64_t dim, int half_to_float);
raw_tensor atg__sparse_addmm(gc_tensor self, gc_tensor mat1, gc_tensor mat2);
raw_tensor atg__sparse_addmm_out(gc_tensor out, gc_tensor self, gc_tensor mat1, gc_tensor mat2);
raw_tensor atg__sparse_broadcast_to(gc_tensor self, int64_t *size_data, int size_len);
raw_tensor atg__sparse_broadcast_to_copy(gc_tensor self, int64_t *size_data, int size_len);
raw_tensor atg__sparse_broadcast_to_copy_out(gc_tensor out, gc_tensor self, int64_t *size_data, int size_len);
raw_tensor atg__sparse_bsc_tensor_unsafe(gc_tensor ccol_indices, gc_tensor row_indices, gc_tensor values, int64_t *size_data, int size_len, int options_kind, int options_device);
raw_tensor atg__sparse_bsr_tensor_unsafe(gc_tensor crow_indices, gc_tensor col_indices, gc_tensor values, int64_t *size_data, int size_len, int options_kind, int options_device);
raw_tensor atg__sparse_compressed_tensor_unsafe(gc_tensor compressed_indices, gc_tensor plain_indices, gc_tensor values, int64_t *size_data, int size_len, int options_kind, int options_device);
raw_tensor atg__sparse_compressed_tensor_with_dims(int64_t nnz, int64_t dense_dim, int64_t *size_data, int size_len, int64_t *blocksize_data, int blocksize_len, int index_dtype, int options_kind, int options_device);
raw_tensor atg__sparse_coo_tensor_unsafe(gc_tensor indices, gc_tensor values, int64_t *size_data, int size_len, int options_kind, int options_device, int is_coalesced);
raw_tensor atg__sparse_coo_tensor_with_dims(int64_t sparse_dim, int64_t dense_dim, int64_t *size_data, int size_len, int options_kind, int options_device);
raw_tensor atg__sparse_coo_tensor_with_dims_and_tensors(int64_t sparse_dim, int64_t dense_dim, int64_t *size_data, int size_len, gc_tensor indices, gc_tensor values, int options_kind, int options_device, int is_coalesced);
raw_tensor atg__sparse_coo_tensor_with_dims_and_tensors_out(gc_tensor out, int64_t sparse_dim, int64_t dense_dim, int64_t *size_data, int size_len, gc_tensor indices, gc_tensor values, int is_coalesced);
raw_tensor atg__sparse_coo_tensor_with_dims_out(gc_tensor out, int64_t sparse_dim, int64_t dense_dim, int64_t *size_data, int size_len);
raw_tensor atg__sparse_csc_tensor_unsafe(gc_tensor ccol_indices, gc_tensor row_indices, gc_tensor values, int64_t *size_data, int size_len, int options_kind, int options_device);
raw_tensor atg__sparse_csr_prod(gc_tensor self, int64_t *dim_data, int dim_len, int keepdim, int dtype);
raw_tensor atg__sparse_csr_prod_dim_dtype_out(gc_tensor out, gc_tensor self, int64_t *dim_data, int dim_len, int keepdim, int dtype);
raw_tensor atg__sparse_csr_sum(gc_tensor self, int64_t *dim_data, int dim_len, int keepdim, int dtype);
raw_tensor atg__sparse_csr_sum_dim_dtype_out(gc_tensor out, gc_tensor self, int64_t *dim_data, int dim_len, int keepdim, int dtype);
raw_tensor atg__sparse_csr_tensor_unsafe(gc_tensor crow_indices, gc_tensor col_indices, gc_tensor values, int64_t *size_data, int size_len, int options_kind, int options_device);
raw_tensor atg__sparse_log_softmax(gc_tensor self, int64_t dim, int half_to_float);
raw_tensor atg__sparse_log_softmax_backward_data(gc_tensor grad_output, gc_tensor output, int64_t dim, gc_tensor self);
raw_tensor atg__sparse_log_softmax_backward_data_out(gc_tensor out, gc_tensor grad_output, gc_tensor output, int64_t dim, gc_tensor self);
raw_tensor atg__sparse_log_softmax_int(gc_tensor self, int64_t dim, int dtype);
raw_tensor atg__sparse_log_softmax_out(gc_tensor out, gc_tensor self, int64_t dim, int half_to_float);
raw_tensor atg__sparse_mask_projection(gc_tensor self, gc_tensor mask, int accumulate_matches);
raw_tensor atg__sparse_mask_projection_out(gc_tensor out, gc_tensor self, gc_tensor mask, int accumulate_matches);
raw_tensor atg__sparse_mm(gc_tensor sparse, gc_tensor dense);
raw_tensor atg__sparse_mm_reduce(gc_tensor sparse, gc_tensor dense, char * reduce);
void atg__sparse_mm_reduce_impl(raw_tensor *, gc_tensor self, gc_tensor other, char * reduce);
void atg__sparse_semi_structured_apply(raw_tensor *, gc_tensor input, gc_tensor thread_masks);
raw_tensor atg__sparse_semi_structured_apply_dense(gc_tensor input, gc_tensor thread_masks);
raw_tensor atg__sparse_semi_structured_linear(gc_tensor input, gc_tensor weight, gc_tensor meta, gc_tensor bias, char * activation_v, int activation_null, int out_dtype);
raw_tensor atg__sparse_semi_structured_mm(gc_tensor mat1, gc_tensor mat1_meta, gc_tensor mat2, int out_dtype);
void atg__sparse_semi_structured_tile(raw_tensor *, gc_tensor input, char * algorithm, int use_cutlass);
raw_tensor atg__sparse_softmax(gc_tensor self, int64_t dim, int half_to_float);
raw_tensor atg__sparse_softmax_backward_data(gc_tensor grad_output, gc_tensor output, int64_t dim, gc_tensor self);
raw_tensor atg__sparse_softmax_backward_data_out(gc_tensor out, gc_tensor grad_output, gc_tensor output, int64_t dim, gc_tensor self);
raw_tensor atg__sparse_softmax_int(gc_tensor self, int64_t dim, int dtype);
raw_tensor atg__sparse_softmax_out(gc_tensor out, gc_tensor self, int64_t dim, int half_to_float);
raw_tensor atg__sparse_sparse_matmul(gc_tensor self, gc_tensor other);
raw_tensor atg__sparse_sparse_matmul_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg__sparse_sum(gc_tensor self);
raw_tensor atg__sparse_sum_backward(gc_tensor grad, gc_tensor self, int64_t *dim_data, int dim_len);
raw_tensor atg__sparse_sum_backward_out(gc_tensor out, gc_tensor grad, gc_tensor self, int64_t *dim_data, int dim_len);
raw_tensor atg__sparse_sum_dim(gc_tensor self, int64_t *dim_data, int dim_len);
raw_tensor atg__sparse_sum_dim_dtype(gc_tensor self, int64_t *dim_data, int dim_len, int dtype);
raw_tensor atg__sparse_sum_dim_out(gc_tensor out, gc_tensor self, int64_t *dim_data, int dim_len);
raw_tensor atg__sparse_sum_dtype(gc_tensor self, int dtype);
raw_tensor atg__spdiags(gc_tensor diagonals, gc_tensor offsets, int64_t *shape_data, int shape_len);
raw_tensor atg__spdiags_out(gc_tensor out, gc_tensor diagonals, gc_tensor offsets, int64_t *shape_data, int shape_len);
raw_tensor atg__spsolve(gc_tensor A, gc_tensor B, int left);
raw_tensor atg__stack(gc_tensor *tensors_data, int tensors_len, int64_t dim);
raw_tensor atg__stack_out(gc_tensor out, gc_tensor *tensors_data, int tensors_len, int64_t dim);
raw_tensor atg__standard_gamma(gc_tensor self);
raw_tensor atg__standard_gamma_grad(gc_tensor self, gc_tensor output);
raw_tensor atg__standard_gamma_grad_out(gc_tensor out, gc_tensor self, gc_tensor output);
raw_tensor atg__standard_gamma_out(gc_tensor out, gc_tensor self);
raw_tensor atg__test_ambiguous_defaults(gc_tensor dummy, int64_t a, int64_t b);
raw_tensor atg__test_ambiguous_defaults_b(gc_tensor dummy, int64_t a, char * b);
raw_tensor atg__test_autograd_multiple_dispatch(gc_tensor self);
raw_tensor atg__test_autograd_multiple_dispatch_fullcoverage_out(gc_tensor out, gc_tensor self);
raw_tensor atg__test_autograd_multiple_dispatch_ntonly(gc_tensor self, int b);
raw_tensor atg__test_autograd_multiple_dispatch_view(gc_tensor self);
raw_tensor atg__test_autograd_multiple_dispatch_view_copy(gc_tensor self);
raw_tensor atg__test_autograd_multiple_dispatch_view_copy_out(gc_tensor out, gc_tensor self);
raw_tensor atg__test_check_tensor(gc_tensor self);
raw_tensor atg__test_functorch_fallback(gc_tensor self, gc_tensor other);
raw_tensor atg__test_functorch_fallback_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg__test_optional_filled_intlist(gc_tensor values, int64_t *addends_data, int addends_len);
raw_tensor atg__test_optional_filled_intlist_out(gc_tensor out, gc_tensor values, int64_t *addends_data, int addends_len);
raw_tensor atg__test_optional_floatlist(gc_tensor values, double *addends_data, int addends_len);
raw_tensor atg__test_optional_floatlist_out(gc_tensor out, gc_tensor values, double *addends_data, int addends_len);
raw_tensor atg__test_optional_intlist(gc_tensor values, int64_t *addends_data, int addends_len);
raw_tensor atg__test_optional_intlist_out(gc_tensor out, gc_tensor values, int64_t *addends_data, int addends_len);
raw_tensor atg__test_parallel_materialize(gc_tensor self, int64_t num_parallel, int skip_first);
raw_tensor atg__test_serialization_subcmul(gc_tensor self, gc_tensor other);
raw_tensor atg__test_string_default(gc_tensor dummy, char * a, char * b);
raw_tensor atg__test_warn_in_autograd(gc_tensor self);
raw_tensor atg__test_warn_in_autograd_out(gc_tensor out, gc_tensor self);
void atg__thnn_differentiable_gru_cell_backward(raw_tensor *, gc_tensor grad_hy, gc_tensor input_gates, gc_tensor hidden_gates, gc_tensor hx, gc_tensor input_bias, gc_tensor hidden_bias);
void atg__thnn_differentiable_lstm_cell_backward(raw_tensor *, gc_tensor grad_hy, gc_tensor grad_cy, gc_tensor input_gates, gc_tensor hidden_gates, gc_tensor input_bias, gc_tensor hidden_bias, gc_tensor cx, gc_tensor cy);
void atg__thnn_fused_gru_cell(raw_tensor *, gc_tensor input_gates, gc_tensor hidden_gates, gc_tensor hx, gc_tensor input_bias, gc_tensor hidden_bias);
void atg__thnn_fused_gru_cell_backward(raw_tensor *, gc_tensor grad_hy, gc_tensor workspace, int has_bias);
void atg__thnn_fused_gru_cell_backward_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor out2, gc_tensor out3, gc_tensor out4, gc_tensor grad_hy, gc_tensor workspace, int has_bias);
void atg__thnn_fused_gru_cell_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor input_gates, gc_tensor hidden_gates, gc_tensor hx, gc_tensor input_bias, gc_tensor hidden_bias);
void atg__thnn_fused_lstm_cell(raw_tensor *, gc_tensor input_gates, gc_tensor hidden_gates, gc_tensor cx, gc_tensor input_bias, gc_tensor hidden_bias);
void atg__thnn_fused_lstm_cell_backward(raw_tensor *, gc_tensor grad_hy, gc_tensor grad_cy, gc_tensor cx, gc_tensor cy, gc_tensor workspace, int has_bias);
void atg__thnn_fused_lstm_cell_backward_impl(raw_tensor *, gc_tensor grad_hy, gc_tensor grad_cy, gc_tensor cx, gc_tensor cy, gc_tensor workspace, int has_bias);
void atg__thnn_fused_lstm_cell_backward_impl_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor out2, gc_tensor grad_hy, gc_tensor grad_cy, gc_tensor cx, gc_tensor cy, gc_tensor workspace, int has_bias);
void atg__thnn_fused_lstm_cell_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor out2, gc_tensor input_gates, gc_tensor hidden_gates, gc_tensor cx, gc_tensor input_bias, gc_tensor hidden_bias);
raw_tensor atg__to_copy(gc_tensor self, int options_kind, int options_device, int non_blocking);
raw_tensor atg__to_copy_out(gc_tensor out, gc_tensor self, int non_blocking);
raw_tensor *atg__to_cpu(gc_tensor *tensors_data, int tensors_len);
raw_tensor atg__to_dense(gc_tensor self, int dtype, int masked_grad);
raw_tensor atg__to_dense_out(gc_tensor out, gc_tensor self, int dtype, int masked_grad);
raw_tensor atg__to_sparse_bsc(gc_tensor self, int64_t *blocksize_data, int blocksize_len, int64_t dense_dim_v, int dense_dim_null);
raw_tensor atg__to_sparse_bsc_out(gc_tensor out, gc_tensor self, int64_t *blocksize_data, int blocksize_len, int64_t dense_dim_v, int dense_dim_null);
raw_tensor atg__to_sparse_bsr(gc_tensor self, int64_t *blocksize_data, int blocksize_len, int64_t dense_dim_v, int dense_dim_null);
raw_tensor atg__to_sparse_bsr_out(gc_tensor out, gc_tensor self, int64_t *blocksize_data, int blocksize_len, int64_t dense_dim_v, int dense_dim_null);
raw_tensor atg__to_sparse_csc(gc_tensor self, int64_t dense_dim_v, int dense_dim_null);
raw_tensor atg__to_sparse_csc_out(gc_tensor out, gc_tensor self, int64_t dense_dim_v, int dense_dim_null);
raw_tensor atg__to_sparse_csr(gc_tensor self, int64_t dense_dim_v, int dense_dim_null);
raw_tensor atg__to_sparse_csr_out(gc_tensor out, gc_tensor self, int64_t dense_dim_v, int dense_dim_null);
void atg__to_sparse_semi_structured(raw_tensor *, gc_tensor dense);
void atg__transform_bias_rescale_qkv(raw_tensor *, gc_tensor qkv, gc_tensor qkv_bias, int64_t num_heads);
void atg__transform_bias_rescale_qkv_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor out2, gc_tensor qkv, gc_tensor qkv_bias, int64_t num_heads);
raw_tensor atg__transformer_encoder_layer_fwd(gc_tensor src, int64_t embed_dim, int64_t num_heads, gc_tensor qkv_weight, gc_tensor qkv_bias, gc_tensor proj_weight, gc_tensor proj_bias, int use_gelu, int norm_first, double eps, gc_tensor norm_weight_1, gc_tensor norm_bias_1, gc_tensor norm_weight_2, gc_tensor norm_bias_2, gc_tensor ffn_weight_1, gc_tensor ffn_bias_1, gc_tensor ffn_weight_2, gc_tensor ffn_bias_2, gc_tensor mask, int64_t mask_type_v, int mask_type_null);
raw_tensor atg__transformer_encoder_layer_fwd_out(gc_tensor out, gc_tensor src, int64_t embed_dim, int64_t num_heads, gc_tensor qkv_weight, gc_tensor qkv_bias, gc_tensor proj_weight, gc_tensor proj_bias, int use_gelu, int norm_first, double eps, gc_tensor norm_weight_1, gc_tensor norm_bias_1, gc_tensor norm_weight_2, gc_tensor norm_bias_2, gc_tensor ffn_weight_1, gc_tensor ffn_bias_1, gc_tensor ffn_weight_2, gc_tensor ffn_bias_2, gc_tensor mask, int64_t mask_type_v, int mask_type_null);
raw_tensor atg__trilinear(gc_tensor i1, gc_tensor i2, gc_tensor i3, int64_t *expand1_data, int expand1_len, int64_t *expand2_data, int expand2_len, int64_t *expand3_data, int expand3_len, int64_t *sumdim_data, int sumdim_len, int64_t unroll_dim);
raw_tensor atg__trilinear_out(gc_tensor out, gc_tensor i1, gc_tensor i2, gc_tensor i3, int64_t *expand1_data, int expand1_len, int64_t *expand2_data, int expand2_len, int64_t *expand3_data, int expand3_len, int64_t *sumdim_data, int sumdim_len, int64_t unroll_dim);
raw_tensor atg__triton_multi_head_attention(gc_tensor query, gc_tensor key, gc_tensor value, int64_t embed_dim, int64_t num_head, gc_tensor qkv_weight, gc_tensor qkv_bias, gc_tensor proj_weight, gc_tensor proj_bias, gc_tensor mask);
raw_tensor atg__triton_multi_head_attention_out(gc_tensor out, gc_tensor query, gc_tensor key, gc_tensor value, int64_t embed_dim, int64_t num_head, gc_tensor qkv_weight, gc_tensor qkv_bias, gc_tensor proj_weight, gc_tensor proj_bias, gc_tensor mask);
raw_tensor atg__triton_scaled_dot_attention(gc_tensor q, gc_tensor k, gc_tensor v, double dropout_p);
raw_tensor atg__triton_scaled_dot_attention_out(gc_tensor out, gc_tensor q, gc_tensor k, gc_tensor v, double dropout_p);
void atg__unique(raw_tensor *, gc_tensor self, int sorted, int return_inverse);
void atg__unique2(raw_tensor *, gc_tensor self, int sorted, int return_inverse, int return_counts);
void atg__unique2_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor out2, gc_tensor self, int sorted, int return_inverse, int return_counts);
void atg__unique_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor self, int sorted, int return_inverse);
void atg__unpack_dual(raw_tensor *, gc_tensor dual, int64_t level);
raw_tensor atg__unsafe_view(gc_tensor self, int64_t *size_data, int size_len);
raw_tensor atg__unsafe_view_out(gc_tensor out, gc_tensor self, int64_t *size_data, int size_len);
raw_tensor atg__upsample_bicubic2d_aa(gc_tensor self, int64_t *output_size_data, int output_size_len, int align_corners, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg__upsample_bicubic2d_aa_backward(gc_tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, int align_corners, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg__upsample_bicubic2d_aa_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, int align_corners, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg__upsample_bicubic2d_aa_out(gc_tensor out, gc_tensor self, int64_t *output_size_data, int output_size_len, int align_corners, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg__upsample_bicubic2d_aa_vec(gc_tensor input, int64_t *output_size_data, int output_size_len, int align_corners, double *scale_factors_data, int scale_factors_len);
raw_tensor atg__upsample_bilinear2d_aa(gc_tensor self, int64_t *output_size_data, int output_size_len, int align_corners, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg__upsample_bilinear2d_aa_backward(gc_tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, int align_corners, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg__upsample_bilinear2d_aa_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, int align_corners, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg__upsample_bilinear2d_aa_out(gc_tensor out, gc_tensor self, int64_t *output_size_data, int output_size_len, int align_corners, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg__upsample_bilinear2d_aa_vec(gc_tensor input, int64_t *output_size_data, int output_size_len, int align_corners, double *scale_factors_data, int scale_factors_len);
raw_tensor atg__upsample_nearest_exact1d(gc_tensor self, int64_t *output_size_data, int output_size_len, double scales_v, int scales_null);
raw_tensor atg__upsample_nearest_exact1d_backward(gc_tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, double scales_v, int scales_null);
raw_tensor atg__upsample_nearest_exact1d_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, double scales_v, int scales_null);
raw_tensor atg__upsample_nearest_exact1d_out(gc_tensor out, gc_tensor self, int64_t *output_size_data, int output_size_len, double scales_v, int scales_null);
raw_tensor atg__upsample_nearest_exact1d_vec(gc_tensor input, int64_t *output_size_data, int output_size_len, double *scale_factors_data, int scale_factors_len);
raw_tensor atg__upsample_nearest_exact2d(gc_tensor self, int64_t *output_size_data, int output_size_len, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg__upsample_nearest_exact2d_backward(gc_tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg__upsample_nearest_exact2d_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg__upsample_nearest_exact2d_out(gc_tensor out, gc_tensor self, int64_t *output_size_data, int output_size_len, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg__upsample_nearest_exact2d_vec(gc_tensor input, int64_t *output_size_data, int output_size_len, double *scale_factors_data, int scale_factors_len);
raw_tensor atg__upsample_nearest_exact3d(gc_tensor self, int64_t *output_size_data, int output_size_len, double scales_d_v, int scales_d_null, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg__upsample_nearest_exact3d_backward(gc_tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, double scales_d_v, int scales_d_null, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg__upsample_nearest_exact3d_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, double scales_d_v, int scales_d_null, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg__upsample_nearest_exact3d_out(gc_tensor out, gc_tensor self, int64_t *output_size_data, int output_size_len, double scales_d_v, int scales_d_null, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg__upsample_nearest_exact3d_vec(gc_tensor input, int64_t *output_size_data, int output_size_len, double *scale_factors_data, int scale_factors_len);
int atg__use_cudnn_ctc_loss(gc_tensor log_probs, gc_tensor targets, int64_t *input_lengths_data, int input_lengths_len, int64_t *target_lengths_data, int target_lengths_len, int64_t blank);
int atg__use_cudnn_ctc_loss_tensor(gc_tensor log_probs, gc_tensor targets, gc_tensor input_lengths, gc_tensor target_lengths, int64_t blank);
int atg__use_cudnn_rnn_flatten_weight();
void atg__validate_compressed_sparse_indices(int is_crow, gc_tensor compressed_idx, gc_tensor plain_idx, int64_t cdim, int64_t dim, int64_t nnz);
void atg__validate_sparse_bsc_tensor_args(gc_tensor ccol_indices, gc_tensor row_indices, gc_tensor values, int64_t *size_data, int size_len);
void atg__validate_sparse_bsr_tensor_args(gc_tensor crow_indices, gc_tensor col_indices, gc_tensor values, int64_t *size_data, int size_len);
void atg__validate_sparse_csc_tensor_args(gc_tensor ccol_indices, gc_tensor row_indices, gc_tensor values, int64_t *size_data, int size_len);
raw_tensor atg__values(gc_tensor self);
raw_tensor atg__values_copy(gc_tensor self);
raw_tensor atg__values_copy_out(gc_tensor out, gc_tensor self);
int64_t atg__version(gc_tensor self);
raw_tensor atg__weight_int4pack_mm(gc_tensor self, gc_tensor mat2, int64_t qGroupSize, gc_tensor qScaleAndZeros);
raw_tensor atg__weight_int4pack_mm_for_cpu(gc_tensor self, gc_tensor mat2, int64_t qGroupSize, gc_tensor qScaleAndZeros);
raw_tensor atg__weight_int8pack_mm(gc_tensor self, gc_tensor mat2, gc_tensor scales);
raw_tensor atg__weight_norm(gc_tensor v, gc_tensor g, int64_t dim);
void atg__weight_norm_differentiable_backward(raw_tensor *, gc_tensor grad_w, gc_tensor saved_v, gc_tensor saved_g, gc_tensor saved_norms, int64_t dim);
void atg__weight_norm_interface(raw_tensor *, gc_tensor v, gc_tensor g, int64_t dim);
void atg__weight_norm_interface_backward(raw_tensor *, gc_tensor grad_w, gc_tensor saved_v, gc_tensor saved_g, gc_tensor saved_norms, int64_t dim);
void atg__weight_norm_interface_backward_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor grad_w, gc_tensor saved_v, gc_tensor saved_g, gc_tensor saved_norms, int64_t dim);
void atg__weight_norm_interface_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor v, gc_tensor g, int64_t dim);
raw_tensor atg__wrapped_linear_prepack(gc_tensor weight, gc_tensor weight_scale, gc_tensor weight_zero_point, gc_tensor bias);
raw_tensor atg__wrapped_quantized_linear_prepacked(gc_tensor input, gc_tensor input_scale, gc_tensor input_zero_point, gc_tensor packed_weight, gc_tensor output_scale, gc_tensor output_zero_point, int64_t out_channel);
raw_tensor atg_abs(gc_tensor self);
raw_tensor atg_abs_(gc_tensor self);
raw_tensor atg_abs_out(gc_tensor out, gc_tensor self);
raw_tensor atg_absolute(gc_tensor self);
raw_tensor atg_absolute_(gc_tensor self);
raw_tensor atg_absolute_out(gc_tensor out, gc_tensor self);
raw_tensor atg_acos(gc_tensor self);
raw_tensor atg_acos_(gc_tensor self);
raw_tensor atg_acos_out(gc_tensor out, gc_tensor self);
raw_tensor atg_acosh(gc_tensor self);
raw_tensor atg_acosh_(gc_tensor self);
raw_tensor atg_acosh_out(gc_tensor out, gc_tensor self);
raw_tensor atg_adaptive_avg_pool1d(gc_tensor self, int64_t *output_size_data, int output_size_len);
raw_tensor atg_adaptive_avg_pool1d_out(gc_tensor out, gc_tensor self, int64_t *output_size_data, int output_size_len);
raw_tensor atg_adaptive_avg_pool2d(gc_tensor self, int64_t *output_size_data, int output_size_len);
raw_tensor atg_adaptive_avg_pool2d_out(gc_tensor out, gc_tensor self, int64_t *output_size_data, int output_size_len);
raw_tensor atg_adaptive_avg_pool3d(gc_tensor self, int64_t *output_size_data, int output_size_len);
raw_tensor atg_adaptive_avg_pool3d_backward(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self);
raw_tensor atg_adaptive_avg_pool3d_out(gc_tensor out, gc_tensor self, int64_t *output_size_data, int output_size_len);
void atg_adaptive_max_pool1d(raw_tensor *, gc_tensor self, int64_t *output_size_data, int output_size_len);
void atg_adaptive_max_pool2d(raw_tensor *, gc_tensor self, int64_t *output_size_data, int output_size_len);
raw_tensor atg_adaptive_max_pool2d_backward(gc_tensor grad_output, gc_tensor self, gc_tensor indices);
raw_tensor atg_adaptive_max_pool2d_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, gc_tensor indices);
void atg_adaptive_max_pool2d_out(raw_tensor *, gc_tensor out, gc_tensor indices, gc_tensor self, int64_t *output_size_data, int output_size_len);
void atg_adaptive_max_pool3d(raw_tensor *, gc_tensor self, int64_t *output_size_data, int output_size_len);
raw_tensor atg_adaptive_max_pool3d_backward(gc_tensor grad_output, gc_tensor self, gc_tensor indices);
raw_tensor atg_adaptive_max_pool3d_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, gc_tensor indices);
void atg_adaptive_max_pool3d_out(raw_tensor *, gc_tensor out, gc_tensor indices, gc_tensor self, int64_t *output_size_data, int output_size_len);
raw_tensor atg_add(gc_tensor self, gc_tensor other);
raw_tensor atg_add_(gc_tensor self, gc_tensor other);
raw_tensor atg_add_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_add_scalar(gc_tensor self, scalar other);
raw_tensor atg_add_scalar_(gc_tensor self, scalar other);
raw_tensor atg_add_scalar_out(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg_addbmm(gc_tensor self, gc_tensor batch1, gc_tensor batch2);
raw_tensor atg_addbmm_(gc_tensor self, gc_tensor batch1, gc_tensor batch2);
raw_tensor atg_addbmm_out(gc_tensor out, gc_tensor self, gc_tensor batch1, gc_tensor batch2);
raw_tensor atg_addcdiv(gc_tensor self, gc_tensor tensor1, gc_tensor tensor2);
raw_tensor atg_addcdiv_(gc_tensor self, gc_tensor tensor1, gc_tensor tensor2);
raw_tensor atg_addcdiv_out(gc_tensor out, gc_tensor self, gc_tensor tensor1, gc_tensor tensor2);
raw_tensor atg_addcmul(gc_tensor self, gc_tensor tensor1, gc_tensor tensor2);
raw_tensor atg_addcmul_(gc_tensor self, gc_tensor tensor1, gc_tensor tensor2);
raw_tensor atg_addcmul_out(gc_tensor out, gc_tensor self, gc_tensor tensor1, gc_tensor tensor2);
raw_tensor atg_addmm(gc_tensor self, gc_tensor mat1, gc_tensor mat2);
raw_tensor atg_addmm_(gc_tensor self, gc_tensor mat1, gc_tensor mat2);
raw_tensor atg_addmm_out(gc_tensor out, gc_tensor self, gc_tensor mat1, gc_tensor mat2);
raw_tensor atg_addmv(gc_tensor self, gc_tensor mat, gc_tensor vec);
raw_tensor atg_addmv_(gc_tensor self, gc_tensor mat, gc_tensor vec);
raw_tensor atg_addmv_out(gc_tensor out, gc_tensor self, gc_tensor mat, gc_tensor vec);
raw_tensor atg_addr(gc_tensor self, gc_tensor vec1, gc_tensor vec2);
raw_tensor atg_addr_(gc_tensor self, gc_tensor vec1, gc_tensor vec2);
raw_tensor atg_addr_out(gc_tensor out, gc_tensor self, gc_tensor vec1, gc_tensor vec2);
raw_tensor atg_adjoint(gc_tensor self);
raw_tensor atg_affine_grid_generator(gc_tensor theta, int64_t *size_data, int size_len, int align_corners);
raw_tensor atg_affine_grid_generator_backward(gc_tensor grad, int64_t *size_data, int size_len, int align_corners);
raw_tensor atg_affine_grid_generator_out(gc_tensor out, gc_tensor theta, int64_t *size_data, int size_len, int align_corners);
raw_tensor atg_alias(gc_tensor self);
raw_tensor atg_alias_copy(gc_tensor self);
raw_tensor atg_alias_copy_out(gc_tensor out, gc_tensor self);
raw_tensor atg_align_as(gc_tensor self, gc_tensor other);
raw_tensor *atg_align_tensors(gc_tensor *tensors_data, int tensors_len);
raw_tensor atg_all(gc_tensor self);
raw_tensor atg_all_all_out(gc_tensor out, gc_tensor self);
raw_tensor atg_all_dim(gc_tensor self, int64_t dim, int keepdim);
raw_tensor atg_all_dims(gc_tensor self, int64_t *dim_data, int dim_len, int keepdim);
raw_tensor atg_all_dims_out(gc_tensor out, gc_tensor self, int64_t *dim_data, int dim_len, int keepdim);
raw_tensor atg_all_out(gc_tensor out, gc_tensor self, int64_t dim, int keepdim);
int atg_allclose(gc_tensor self, gc_tensor other, double rtol, double atol, int equal_nan);
raw_tensor atg_alpha_dropout(gc_tensor input, double p, int train);
raw_tensor atg_alpha_dropout_(gc_tensor self, double p, int train);
raw_tensor atg_amax(gc_tensor self, int64_t *dim_data, int dim_len, int keepdim);
raw_tensor atg_amax_out(gc_tensor out, gc_tensor self, int64_t *dim_data, int dim_len, int keepdim);
raw_tensor atg_amin(gc_tensor self, int64_t *dim_data, int dim_len, int keepdim);
raw_tensor atg_amin_out(gc_tensor out, gc_tensor self, int64_t *dim_data, int dim_len, int keepdim);
void atg_aminmax(raw_tensor *, gc_tensor self, int64_t dim_v, int dim_null, int keepdim);
void atg_aminmax_out(raw_tensor *, gc_tensor min, gc_tensor max, gc_tensor self, int64_t dim_v, int dim_null, int keepdim);
raw_tensor atg_angle(gc_tensor self);
raw_tensor atg_angle_out(gc_tensor out, gc_tensor self);
raw_tensor atg_any(gc_tensor self);
raw_tensor atg_any_all_out(gc_tensor out, gc_tensor self);
raw_tensor atg_any_dim(gc_tensor self, int64_t dim, int keepdim);
raw_tensor atg_any_dims(gc_tensor self, int64_t *dim_data, int dim_len, int keepdim);
raw_tensor atg_any_dims_out(gc_tensor out, gc_tensor self, int64_t *dim_data, int dim_len, int keepdim);
raw_tensor atg_any_out(gc_tensor out, gc_tensor self, int64_t dim, int keepdim);
raw_tensor atg_arange(scalar end, int options_kind, int options_device);
raw_tensor atg_arange_start(scalar start, scalar end, int options_kind, int options_device);
raw_tensor atg_arange_start_step(scalar start, scalar end, int options_kind, int options_device);
raw_tensor atg_arccos(gc_tensor self);
raw_tensor atg_arccos_(gc_tensor self);
raw_tensor atg_arccos_out(gc_tensor out, gc_tensor self);
raw_tensor atg_arccosh(gc_tensor self);
raw_tensor atg_arccosh_(gc_tensor self);
raw_tensor atg_arccosh_out(gc_tensor out, gc_tensor self);
raw_tensor atg_arcsin(gc_tensor self);
raw_tensor atg_arcsin_(gc_tensor self);
raw_tensor atg_arcsin_out(gc_tensor out, gc_tensor self);
raw_tensor atg_arcsinh(gc_tensor self);
raw_tensor atg_arcsinh_(gc_tensor self);
raw_tensor atg_arcsinh_out(gc_tensor out, gc_tensor self);
raw_tensor atg_arctan(gc_tensor self);
raw_tensor atg_arctan2(gc_tensor self, gc_tensor other);
raw_tensor atg_arctan2_(gc_tensor self, gc_tensor other);
raw_tensor atg_arctan2_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_arctan_(gc_tensor self);
raw_tensor atg_arctan_out(gc_tensor out, gc_tensor self);
raw_tensor atg_arctanh(gc_tensor self);
raw_tensor atg_arctanh_(gc_tensor self);
raw_tensor atg_arctanh_out(gc_tensor out, gc_tensor self);
raw_tensor atg_argmax(gc_tensor self, int64_t dim_v, int dim_null, int keepdim);
raw_tensor atg_argmax_out(gc_tensor out, gc_tensor self, int64_t dim_v, int dim_null, int keepdim);
raw_tensor atg_argmin(gc_tensor self, int64_t dim_v, int dim_null, int keepdim);
raw_tensor atg_argmin_out(gc_tensor out, gc_tensor self, int64_t dim_v, int dim_null, int keepdim);
raw_tensor atg_argsort(gc_tensor self, int64_t dim, int descending);
raw_tensor atg_argsort_stable(gc_tensor self, int stable, int64_t dim, int descending);
raw_tensor atg_argsort_stable_out(gc_tensor out, gc_tensor self, int stable, int64_t dim, int descending);
raw_tensor atg_argwhere(gc_tensor self);
raw_tensor atg_as_strided(gc_tensor self, int64_t *size_data, int size_len, int64_t *stride_data, int stride_len, int64_t storage_offset_v, int storage_offset_null);
raw_tensor atg_as_strided_(gc_tensor self, int64_t *size_data, int size_len, int64_t *stride_data, int stride_len, int64_t storage_offset_v, int storage_offset_null);
raw_tensor atg_as_strided_copy(gc_tensor self, int64_t *size_data, int size_len, int64_t *stride_data, int stride_len, int64_t storage_offset_v, int storage_offset_null);
raw_tensor atg_as_strided_copy_out(gc_tensor out, gc_tensor self, int64_t *size_data, int size_len, int64_t *stride_data, int stride_len, int64_t storage_offset_v, int storage_offset_null);
raw_tensor atg_as_strided_scatter(gc_tensor self, gc_tensor src, int64_t *size_data, int size_len, int64_t *stride_data, int stride_len, int64_t storage_offset_v, int storage_offset_null);
raw_tensor atg_as_strided_scatter_out(gc_tensor out, gc_tensor self, gc_tensor src, int64_t *size_data, int size_len, int64_t *stride_data, int stride_len, int64_t storage_offset_v, int storage_offset_null);
raw_tensor atg_asin(gc_tensor self);
raw_tensor atg_asin_(gc_tensor self);
raw_tensor atg_asin_out(gc_tensor out, gc_tensor self);
raw_tensor atg_asinh(gc_tensor self);
raw_tensor atg_asinh_(gc_tensor self);
raw_tensor atg_asinh_out(gc_tensor out, gc_tensor self);
raw_tensor atg_atan(gc_tensor self);
raw_tensor atg_atan2(gc_tensor self, gc_tensor other);
raw_tensor atg_atan2_(gc_tensor self, gc_tensor other);
raw_tensor atg_atan2_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_atan_(gc_tensor self);
raw_tensor atg_atan_out(gc_tensor out, gc_tensor self);
raw_tensor atg_atanh(gc_tensor self);
raw_tensor atg_atanh_(gc_tensor self);
raw_tensor atg_atanh_out(gc_tensor out, gc_tensor self);
raw_tensor atg_atleast_1d(gc_tensor self);
raw_tensor *atg_atleast_1d_sequence(gc_tensor *tensors_data, int tensors_len);
raw_tensor atg_atleast_2d(gc_tensor self);
raw_tensor *atg_atleast_2d_sequence(gc_tensor *tensors_data, int tensors_len);
raw_tensor atg_atleast_3d(gc_tensor self);
raw_tensor *atg_atleast_3d_sequence(gc_tensor *tensors_data, int tensors_len);
raw_tensor atg_avg_pool1d(gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int ceil_mode, int count_include_pad);
raw_tensor atg_avg_pool1d_out(gc_tensor out, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int ceil_mode, int count_include_pad);
raw_tensor atg_avg_pool2d(gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int ceil_mode, int count_include_pad, int64_t divisor_override_v, int divisor_override_null);
raw_tensor atg_avg_pool2d_backward(gc_tensor grad_output, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int ceil_mode, int count_include_pad, int64_t divisor_override_v, int divisor_override_null);
raw_tensor atg_avg_pool2d_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int ceil_mode, int count_include_pad, int64_t divisor_override_v, int divisor_override_null);
raw_tensor atg_avg_pool2d_out(gc_tensor out, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int ceil_mode, int count_include_pad, int64_t divisor_override_v, int divisor_override_null);
raw_tensor atg_avg_pool3d(gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int ceil_mode, int count_include_pad, int64_t divisor_override_v, int divisor_override_null);
raw_tensor atg_avg_pool3d_backward(gc_tensor grad_output, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int ceil_mode, int count_include_pad, int64_t divisor_override_v, int divisor_override_null);
raw_tensor atg_avg_pool3d_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int ceil_mode, int count_include_pad, int64_t divisor_override_v, int divisor_override_null);
raw_tensor atg_avg_pool3d_out(gc_tensor out, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int ceil_mode, int count_include_pad, int64_t divisor_override_v, int divisor_override_null);
raw_tensor atg_baddbmm(gc_tensor self, gc_tensor batch1, gc_tensor batch2);
raw_tensor atg_baddbmm_(gc_tensor self, gc_tensor batch1, gc_tensor batch2);
raw_tensor atg_baddbmm_out(gc_tensor out, gc_tensor self, gc_tensor batch1, gc_tensor batch2);
raw_tensor atg_bartlett_window(int64_t window_length, int options_kind, int options_device);
raw_tensor atg_bartlett_window_out(gc_tensor out, int64_t window_length);
raw_tensor atg_bartlett_window_periodic(int64_t window_length, int periodic, int options_kind, int options_device);
raw_tensor atg_bartlett_window_periodic_out(gc_tensor out, int64_t window_length, int periodic);
raw_tensor atg_batch_norm(gc_tensor input, gc_tensor weight, gc_tensor bias, gc_tensor running_mean, gc_tensor running_var, int training, double momentum, double eps, int cudnn_enabled);
raw_tensor atg_batch_norm_backward_elemt(gc_tensor grad_out, gc_tensor input, gc_tensor mean, gc_tensor invstd, gc_tensor weight, gc_tensor sum_dy, gc_tensor sum_dy_xmu, gc_tensor count);
raw_tensor atg_batch_norm_backward_elemt_out(gc_tensor out, gc_tensor grad_out, gc_tensor input, gc_tensor mean, gc_tensor invstd, gc_tensor weight, gc_tensor sum_dy, gc_tensor sum_dy_xmu, gc_tensor count);
void atg_batch_norm_backward_reduce(raw_tensor *, gc_tensor grad_out, gc_tensor input, gc_tensor mean, gc_tensor invstd, gc_tensor weight, int input_g, int weight_g, int bias_g);
void atg_batch_norm_backward_reduce_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor out2, gc_tensor out3, gc_tensor grad_out, gc_tensor input, gc_tensor mean, gc_tensor invstd, gc_tensor weight, int input_g, int weight_g, int bias_g);
raw_tensor atg_batch_norm_elemt(gc_tensor input, gc_tensor weight, gc_tensor bias, gc_tensor mean, gc_tensor invstd, double eps);
raw_tensor atg_batch_norm_elemt_out(gc_tensor out, gc_tensor input, gc_tensor weight, gc_tensor bias, gc_tensor mean, gc_tensor invstd, double eps);
void atg_batch_norm_gather_stats(raw_tensor *, gc_tensor input, gc_tensor mean, gc_tensor invstd, gc_tensor running_mean, gc_tensor running_var, double momentum, double eps, int64_t count);
void atg_batch_norm_gather_stats_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor input, gc_tensor mean, gc_tensor invstd, gc_tensor running_mean, gc_tensor running_var, double momentum, double eps, int64_t count);
void atg_batch_norm_gather_stats_with_counts(raw_tensor *, gc_tensor input, gc_tensor mean, gc_tensor invstd, gc_tensor running_mean, gc_tensor running_var, double momentum, double eps, gc_tensor counts);
void atg_batch_norm_gather_stats_with_counts_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor input, gc_tensor mean, gc_tensor invstd, gc_tensor running_mean, gc_tensor running_var, double momentum, double eps, gc_tensor counts);
void atg_batch_norm_stats(raw_tensor *, gc_tensor input, double eps);
void atg_batch_norm_stats_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor input, double eps);
void atg_batch_norm_update_stats(raw_tensor *, gc_tensor input, gc_tensor running_mean, gc_tensor running_var, double momentum);
void atg_batch_norm_update_stats_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor input, gc_tensor running_mean, gc_tensor running_var, double momentum);
raw_tensor atg_bernoulli(gc_tensor self);
raw_tensor atg_bernoulli_(gc_tensor self, gc_tensor p);
raw_tensor atg_bernoulli_float_(gc_tensor self, double p);
raw_tensor atg_bernoulli_p(gc_tensor self, double p);
raw_tensor atg_bernoulli_tensor(gc_tensor self, gc_tensor p);
raw_tensor atg_bilinear(gc_tensor input1, gc_tensor input2, gc_tensor weight, gc_tensor bias);
raw_tensor atg_binary_cross_entropy(gc_tensor self, gc_tensor target, gc_tensor weight, int64_t reduction);
raw_tensor atg_binary_cross_entropy_backward(gc_tensor grad_output, gc_tensor self, gc_tensor target, gc_tensor weight, int64_t reduction);
raw_tensor atg_binary_cross_entropy_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, gc_tensor target, gc_tensor weight, int64_t reduction);
raw_tensor atg_binary_cross_entropy_out(gc_tensor out, gc_tensor self, gc_tensor target, gc_tensor weight, int64_t reduction);
raw_tensor atg_binary_cross_entropy_with_logits(gc_tensor self, gc_tensor target, gc_tensor weight, gc_tensor pos_weight, int64_t reduction);
raw_tensor atg_binary_cross_entropy_with_logits_out(gc_tensor out, gc_tensor self, gc_tensor target, gc_tensor weight, gc_tensor pos_weight, int64_t reduction);
raw_tensor atg_bincount(gc_tensor self, gc_tensor weights, int64_t minlength);
raw_tensor atg_bincount_out(gc_tensor out, gc_tensor self, gc_tensor weights, int64_t minlength);
raw_tensor atg_binomial(gc_tensor count, gc_tensor prob);
raw_tensor atg_binomial_out(gc_tensor out, gc_tensor count, gc_tensor prob);
raw_tensor atg_bitwise_and(gc_tensor self, scalar other);
raw_tensor atg_bitwise_and_(gc_tensor self, scalar other);
raw_tensor atg_bitwise_and_scalar_out(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg_bitwise_and_scalar_tensor(scalar self, gc_tensor other);
raw_tensor atg_bitwise_and_scalar_tensor_out(gc_tensor out, scalar self, gc_tensor other);
raw_tensor atg_bitwise_and_tensor(gc_tensor self, gc_tensor other);
raw_tensor atg_bitwise_and_tensor_(gc_tensor self, gc_tensor other);
raw_tensor atg_bitwise_and_tensor_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_bitwise_left_shift(gc_tensor self, gc_tensor other);
raw_tensor atg_bitwise_left_shift_(gc_tensor self, gc_tensor other);
raw_tensor atg_bitwise_left_shift_scalar_tensor(scalar self, gc_tensor other);
raw_tensor atg_bitwise_left_shift_scalar_tensor_out(gc_tensor out, scalar self, gc_tensor other);
raw_tensor atg_bitwise_left_shift_tensor_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_bitwise_left_shift_tensor_scalar(gc_tensor self, scalar other);
raw_tensor atg_bitwise_left_shift_tensor_scalar_(gc_tensor self, scalar other);
raw_tensor atg_bitwise_left_shift_tensor_scalar_out(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg_bitwise_not(gc_tensor self);
raw_tensor atg_bitwise_not_(gc_tensor self);
raw_tensor atg_bitwise_not_out(gc_tensor out, gc_tensor self);
raw_tensor atg_bitwise_or(gc_tensor self, scalar other);
raw_tensor atg_bitwise_or_(gc_tensor self, scalar other);
raw_tensor atg_bitwise_or_scalar_out(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg_bitwise_or_scalar_tensor(scalar self, gc_tensor other);
raw_tensor atg_bitwise_or_scalar_tensor_out(gc_tensor out, scalar self, gc_tensor other);
raw_tensor atg_bitwise_or_tensor(gc_tensor self, gc_tensor other);
raw_tensor atg_bitwise_or_tensor_(gc_tensor self, gc_tensor other);
raw_tensor atg_bitwise_or_tensor_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_bitwise_right_shift(gc_tensor self, gc_tensor other);
raw_tensor atg_bitwise_right_shift_(gc_tensor self, gc_tensor other);
raw_tensor atg_bitwise_right_shift_scalar_tensor(scalar self, gc_tensor other);
raw_tensor atg_bitwise_right_shift_scalar_tensor_out(gc_tensor out, scalar self, gc_tensor other);
raw_tensor atg_bitwise_right_shift_tensor_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_bitwise_right_shift_tensor_scalar(gc_tensor self, scalar other);
raw_tensor atg_bitwise_right_shift_tensor_scalar_(gc_tensor self, scalar other);
raw_tensor atg_bitwise_right_shift_tensor_scalar_out(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg_bitwise_xor(gc_tensor self, scalar other);
raw_tensor atg_bitwise_xor_(gc_tensor self, scalar other);
raw_tensor atg_bitwise_xor_scalar_out(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg_bitwise_xor_scalar_tensor(scalar self, gc_tensor other);
raw_tensor atg_bitwise_xor_scalar_tensor_out(gc_tensor out, scalar self, gc_tensor other);
raw_tensor atg_bitwise_xor_tensor(gc_tensor self, gc_tensor other);
raw_tensor atg_bitwise_xor_tensor_(gc_tensor self, gc_tensor other);
raw_tensor atg_bitwise_xor_tensor_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_blackman_window(int64_t window_length, int options_kind, int options_device);
raw_tensor atg_blackman_window_out(gc_tensor out, int64_t window_length);
raw_tensor atg_blackman_window_periodic(int64_t window_length, int periodic, int options_kind, int options_device);
raw_tensor atg_blackman_window_periodic_out(gc_tensor out, int64_t window_length, int periodic);
raw_tensor atg_block_diag(gc_tensor *tensors_data, int tensors_len);
raw_tensor atg_block_diag_out(gc_tensor out, gc_tensor *tensors_data, int tensors_len);
raw_tensor atg_bmm(gc_tensor self, gc_tensor mat2);
raw_tensor atg_bmm_out(gc_tensor out, gc_tensor self, gc_tensor mat2);
raw_tensor *atg_broadcast_tensors(gc_tensor *tensors_data, int tensors_len);
raw_tensor atg_broadcast_to(gc_tensor self, int64_t *size_data, int size_len);
raw_tensor atg_bucketize(gc_tensor self, gc_tensor boundaries, int out_int32, int right);
raw_tensor atg_bucketize_scalar(scalar self, gc_tensor boundaries, int out_int32, int right);
raw_tensor atg_bucketize_scalar_out(gc_tensor out, scalar self, gc_tensor boundaries, int out_int32, int right);
raw_tensor atg_bucketize_tensor_out(gc_tensor out, gc_tensor self, gc_tensor boundaries, int out_int32, int right);
int atg_can_cast(int from_, int to);
raw_tensor atg_cartesian_prod(gc_tensor *tensors_data, int tensors_len);
raw_tensor atg_cat(gc_tensor *tensors_data, int tensors_len, int64_t dim);
raw_tensor atg_cat_out(gc_tensor out, gc_tensor *tensors_data, int tensors_len, int64_t dim);
raw_tensor atg_cauchy(gc_tensor self, double median, double sigma);
raw_tensor atg_cauchy_(gc_tensor self, double median, double sigma);
raw_tensor atg_cauchy_out(gc_tensor out, gc_tensor self, double median, double sigma);
raw_tensor atg_ccol_indices(gc_tensor self);
raw_tensor atg_ccol_indices_copy(gc_tensor self);
raw_tensor atg_ccol_indices_copy_out(gc_tensor out, gc_tensor self);
raw_tensor atg_cdist(gc_tensor x1, gc_tensor x2, double p, int64_t compute_mode_v, int compute_mode_null);
raw_tensor atg_ceil(gc_tensor self);
raw_tensor atg_ceil_(gc_tensor self);
raw_tensor atg_ceil_out(gc_tensor out, gc_tensor self);
raw_tensor atg_celu(gc_tensor self);
raw_tensor atg_celu_(gc_tensor self);
raw_tensor atg_celu_out(gc_tensor out, gc_tensor self);
raw_tensor atg_chain_matmul(gc_tensor *matrices_data, int matrices_len);
raw_tensor atg_chain_matmul_out(gc_tensor out, gc_tensor *matrices_data, int matrices_len);
raw_tensor atg_chalf(gc_tensor self);
raw_tensor atg_channel_shuffle(gc_tensor self, int64_t groups);
raw_tensor atg_channel_shuffle_out(gc_tensor out, gc_tensor self, int64_t groups);
raw_tensor atg_cholesky(gc_tensor self, int upper);
raw_tensor atg_cholesky_inverse(gc_tensor self, int upper);
raw_tensor atg_cholesky_inverse_out(gc_tensor out, gc_tensor self, int upper);
raw_tensor atg_cholesky_out(gc_tensor out, gc_tensor self, int upper);
raw_tensor atg_cholesky_solve(gc_tensor self, gc_tensor input2, int upper);
raw_tensor atg_cholesky_solve_out(gc_tensor out, gc_tensor self, gc_tensor input2, int upper);
void atg_choose_qparams_optimized(raw_tensor *, gc_tensor input, int64_t numel, int64_t n_bins, double ratio, int64_t bit_width);
raw_tensor *atg_chunk(gc_tensor self, int64_t chunks, int64_t dim);
raw_tensor atg_clamp(gc_tensor self, scalar min, scalar max);
raw_tensor atg_clamp_(gc_tensor self, scalar min, scalar max);
raw_tensor atg_clamp_max(gc_tensor self, scalar max);
raw_tensor atg_clamp_max_(gc_tensor self, scalar max);
raw_tensor atg_clamp_max_out(gc_tensor out, gc_tensor self, scalar max);
raw_tensor atg_clamp_max_tensor(gc_tensor self, gc_tensor max);
raw_tensor atg_clamp_max_tensor_(gc_tensor self, gc_tensor max);
raw_tensor atg_clamp_max_tensor_out(gc_tensor out, gc_tensor self, gc_tensor max);
raw_tensor atg_clamp_min(gc_tensor self, scalar min);
raw_tensor atg_clamp_min_(gc_tensor self, scalar min);
raw_tensor atg_clamp_min_out(gc_tensor out, gc_tensor self, scalar min);
raw_tensor atg_clamp_min_tensor(gc_tensor self, gc_tensor min);
raw_tensor atg_clamp_min_tensor_(gc_tensor self, gc_tensor min);
raw_tensor atg_clamp_min_tensor_out(gc_tensor out, gc_tensor self, gc_tensor min);
raw_tensor atg_clamp_out(gc_tensor out, gc_tensor self, scalar min, scalar max);
raw_tensor atg_clamp_tensor(gc_tensor self, gc_tensor min, gc_tensor max);
raw_tensor atg_clamp_tensor_(gc_tensor self, gc_tensor min, gc_tensor max);
raw_tensor atg_clamp_tensor_out(gc_tensor out, gc_tensor self, gc_tensor min, gc_tensor max);
raw_tensor atg_clip(gc_tensor self, scalar min, scalar max);
raw_tensor atg_clip_(gc_tensor self, scalar min, scalar max);
raw_tensor atg_clip_out(gc_tensor out, gc_tensor self, scalar min, scalar max);
raw_tensor atg_clip_tensor(gc_tensor self, gc_tensor min, gc_tensor max);
raw_tensor atg_clip_tensor_(gc_tensor self, gc_tensor min, gc_tensor max);
raw_tensor atg_clip_tensor_out(gc_tensor out, gc_tensor self, gc_tensor min, gc_tensor max);
raw_tensor atg_clone(gc_tensor self);
raw_tensor atg_clone_out(gc_tensor out, gc_tensor self);
raw_tensor atg_coalesce(gc_tensor self);
raw_tensor atg_col2im(gc_tensor self, int64_t *output_size_data, int output_size_len, int64_t *kernel_size_data, int kernel_size_len, int64_t *dilation_data, int dilation_len, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len);
raw_tensor atg_col2im_out(gc_tensor out, gc_tensor self, int64_t *output_size_data, int output_size_len, int64_t *kernel_size_data, int kernel_size_len, int64_t *dilation_data, int dilation_len, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len);
raw_tensor atg_col_indices(gc_tensor self);
raw_tensor atg_col_indices_copy(gc_tensor self);
raw_tensor atg_col_indices_copy_out(gc_tensor out, gc_tensor self);
raw_tensor atg_column_stack(gc_tensor *tensors_data, int tensors_len);
raw_tensor atg_column_stack_out(gc_tensor out, gc_tensor *tensors_data, int tensors_len);
raw_tensor atg_combinations(gc_tensor self, int64_t r, int with_replacement);
raw_tensor atg_complex(gc_tensor real, gc_tensor imag);
raw_tensor atg_complex_out(gc_tensor out, gc_tensor real, gc_tensor imag);
raw_tensor atg_concat(gc_tensor *tensors_data, int tensors_len, int64_t dim);
raw_tensor atg_concat_out(gc_tensor out, gc_tensor *tensors_data, int tensors_len, int64_t dim);
raw_tensor atg_concatenate(gc_tensor *tensors_data, int tensors_len, int64_t dim);
raw_tensor atg_concatenate_out(gc_tensor out, gc_tensor *tensors_data, int tensors_len, int64_t dim);
raw_tensor atg_conj(gc_tensor self);
raw_tensor atg_conj_physical(gc_tensor self);
raw_tensor atg_conj_physical_(gc_tensor self);
raw_tensor atg_conj_physical_out(gc_tensor out, gc_tensor self);
raw_tensor atg_constant_pad_nd(gc_tensor self, int64_t *pad_data, int pad_len);
raw_tensor atg_constant_pad_nd_out(gc_tensor out, gc_tensor self, int64_t *pad_data, int pad_len);
raw_tensor atg_contiguous(gc_tensor self);
raw_tensor atg_conv1d(gc_tensor input, gc_tensor weight, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int64_t groups);
raw_tensor atg_conv1d_padding(gc_tensor input, gc_tensor weight, gc_tensor bias, int64_t *stride_data, int stride_len, char * padding, int64_t *dilation_data, int dilation_len, int64_t groups);
raw_tensor atg_conv2d(gc_tensor input, gc_tensor weight, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int64_t groups);
raw_tensor atg_conv2d_padding(gc_tensor input, gc_tensor weight, gc_tensor bias, int64_t *stride_data, int stride_len, char * padding, int64_t *dilation_data, int dilation_len, int64_t groups);
raw_tensor atg_conv3d(gc_tensor input, gc_tensor weight, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int64_t groups);
raw_tensor atg_conv3d_padding(gc_tensor input, gc_tensor weight, gc_tensor bias, int64_t *stride_data, int stride_len, char * padding, int64_t *dilation_data, int dilation_len, int64_t groups);
raw_tensor atg_conv_depthwise3d(gc_tensor self, gc_tensor weight, int64_t *kernel_size_data, int kernel_size_len, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len);
raw_tensor atg_conv_depthwise3d_out(gc_tensor out, gc_tensor self, gc_tensor weight, int64_t *kernel_size_data, int kernel_size_len, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len);
raw_tensor atg_conv_tbc(gc_tensor self, gc_tensor weight, gc_tensor bias, int64_t pad);
void atg_conv_tbc_backward(raw_tensor *, gc_tensor self, gc_tensor input, gc_tensor weight, gc_tensor bias, int64_t pad);
raw_tensor atg_conv_tbc_out(gc_tensor out, gc_tensor self, gc_tensor weight, gc_tensor bias, int64_t pad);
raw_tensor atg_conv_transpose1d(gc_tensor input, gc_tensor weight, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *output_padding_data, int output_padding_len, int64_t groups, int64_t *dilation_data, int dilation_len);
raw_tensor atg_conv_transpose2d(gc_tensor input, gc_tensor weight, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *output_padding_data, int output_padding_len, int64_t groups, int64_t *dilation_data, int dilation_len);
raw_tensor atg_conv_transpose3d(gc_tensor input, gc_tensor weight, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *output_padding_data, int output_padding_len, int64_t groups, int64_t *dilation_data, int dilation_len);
raw_tensor atg_convolution(gc_tensor input, gc_tensor weight, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int transposed, int64_t *output_padding_data, int output_padding_len, int64_t groups);
raw_tensor atg_convolution_out(gc_tensor out, gc_tensor input, gc_tensor weight, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int transposed, int64_t *output_padding_data, int output_padding_len, int64_t groups);
raw_tensor atg_convolution_overrideable(gc_tensor input, gc_tensor weight, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int transposed, int64_t *output_padding_data, int output_padding_len, int64_t groups);
raw_tensor atg_convolution_overrideable_out(gc_tensor out, gc_tensor input, gc_tensor weight, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int transposed, int64_t *output_padding_data, int output_padding_len, int64_t groups);
raw_tensor atg_copy(gc_tensor self, gc_tensor src, int non_blocking);
raw_tensor atg_copy_out(gc_tensor out, gc_tensor self, gc_tensor src, int non_blocking);
raw_tensor atg_copy_sparse_to_sparse(gc_tensor self, gc_tensor src, int non_blocking);
raw_tensor atg_copy_sparse_to_sparse_(gc_tensor self, gc_tensor src, int non_blocking);
raw_tensor atg_copy_sparse_to_sparse_out(gc_tensor out, gc_tensor self, gc_tensor src, int non_blocking);
raw_tensor atg_copysign(gc_tensor self, gc_tensor other);
raw_tensor atg_copysign_(gc_tensor self, gc_tensor other);
raw_tensor atg_copysign_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_copysign_scalar(gc_tensor self, scalar other);
raw_tensor atg_copysign_scalar_(gc_tensor self, scalar other);
raw_tensor atg_copysign_scalar_out(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg_corrcoef(gc_tensor self);
raw_tensor atg_cos(gc_tensor self);
raw_tensor atg_cos_(gc_tensor self);
raw_tensor atg_cos_out(gc_tensor out, gc_tensor self);
raw_tensor atg_cosh(gc_tensor self);
raw_tensor atg_cosh_(gc_tensor self);
raw_tensor atg_cosh_out(gc_tensor out, gc_tensor self);
raw_tensor atg_cosine_embedding_loss(gc_tensor input1, gc_tensor input2, gc_tensor target, double margin, int64_t reduction);
raw_tensor atg_cosine_similarity(gc_tensor x1, gc_tensor x2, int64_t dim, double eps);
raw_tensor atg_count_nonzero(gc_tensor out, gc_tensor self, int64_t *dim_data, int dim_len);
raw_tensor atg_count_nonzero_out(gc_tensor out, gc_tensor self, int64_t dim_v, int dim_null);
raw_tensor atg_cov(gc_tensor self, int64_t correction, gc_tensor fweights, gc_tensor aweights);
raw_tensor atg_cross(gc_tensor self, gc_tensor other, int64_t dim_v, int dim_null);
raw_tensor atg_cross_entropy_loss(gc_tensor self, gc_tensor target, gc_tensor weight, int64_t reduction, int64_t ignore_index, double label_smoothing);
raw_tensor atg_cross_out(gc_tensor out, gc_tensor self, gc_tensor other, int64_t dim_v, int dim_null);
raw_tensor atg_crow_indices(gc_tensor self);
raw_tensor atg_crow_indices_copy(gc_tensor self);
raw_tensor atg_crow_indices_copy_out(gc_tensor out, gc_tensor self);
raw_tensor atg_ctc_loss(gc_tensor log_probs, gc_tensor targets, int64_t *input_lengths_data, int input_lengths_len, int64_t *target_lengths_data, int target_lengths_len, int64_t blank, int64_t reduction, int zero_infinity);
raw_tensor atg_ctc_loss_tensor(gc_tensor log_probs, gc_tensor targets, gc_tensor input_lengths, gc_tensor target_lengths, int64_t blank, int64_t reduction, int zero_infinity);
raw_tensor atg_cudnn_affine_grid_generator(gc_tensor theta, int64_t n, int64_t C, int64_t H, int64_t W);
raw_tensor atg_cudnn_affine_grid_generator_backward(gc_tensor grad, int64_t n, int64_t C, int64_t H, int64_t W);
raw_tensor atg_cudnn_affine_grid_generator_backward_out(gc_tensor out, gc_tensor grad, int64_t n, int64_t C, int64_t H, int64_t W);
raw_tensor atg_cudnn_affine_grid_generator_out(gc_tensor out, gc_tensor theta, int64_t n, int64_t C, int64_t H, int64_t W);
void atg_cudnn_batch_norm(raw_tensor *, gc_tensor input, gc_tensor weight, gc_tensor bias, gc_tensor running_mean, gc_tensor running_var, int training, double exponential_average_factor, double epsilon);
void atg_cudnn_batch_norm_backward(raw_tensor *, gc_tensor input, gc_tensor grad_output, gc_tensor weight, gc_tensor running_mean, gc_tensor running_var, gc_tensor save_mean, gc_tensor save_var, double epsilon, gc_tensor reserveSpace);
void atg_cudnn_batch_norm_backward_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor out2, gc_tensor input, gc_tensor grad_output, gc_tensor weight, gc_tensor running_mean, gc_tensor running_var, gc_tensor save_mean, gc_tensor save_var, double epsilon, gc_tensor reserveSpace);
void atg_cudnn_batch_norm_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor out2, gc_tensor out3, gc_tensor input, gc_tensor weight, gc_tensor bias, gc_tensor running_mean, gc_tensor running_var, int training, double exponential_average_factor, double epsilon);
raw_tensor atg_cudnn_convolution(gc_tensor self, gc_tensor weight, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic, int allow_tf32);
raw_tensor atg_cudnn_convolution_add_relu(gc_tensor self, gc_tensor weight, gc_tensor z, scalar alpha, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int64_t groups);
raw_tensor atg_cudnn_convolution_add_relu_out(gc_tensor out, gc_tensor self, gc_tensor weight, gc_tensor z, scalar alpha, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int64_t groups);
raw_tensor atg_cudnn_convolution_out(gc_tensor out, gc_tensor self, gc_tensor weight, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic, int allow_tf32);
raw_tensor atg_cudnn_convolution_relu(gc_tensor self, gc_tensor weight, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int64_t groups);
raw_tensor atg_cudnn_convolution_relu_out(gc_tensor out, gc_tensor self, gc_tensor weight, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int64_t groups);
raw_tensor atg_cudnn_convolution_transpose(gc_tensor self, gc_tensor weight, int64_t *padding_data, int padding_len, int64_t *output_padding_data, int output_padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic, int allow_tf32);
raw_tensor atg_cudnn_convolution_transpose_out(gc_tensor out, gc_tensor self, gc_tensor weight, int64_t *padding_data, int padding_len, int64_t *output_padding_data, int output_padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic, int allow_tf32);
raw_tensor atg_cudnn_grid_sampler(gc_tensor self, gc_tensor grid);
void atg_cudnn_grid_sampler_backward(raw_tensor *, gc_tensor self, gc_tensor grid, gc_tensor grad_output);
void atg_cudnn_grid_sampler_backward_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor self, gc_tensor grid, gc_tensor grad_output);
raw_tensor atg_cudnn_grid_sampler_out(gc_tensor out, gc_tensor self, gc_tensor grid);
int atg_cudnn_is_acceptable(gc_tensor self);
void atg_cummax(raw_tensor *, gc_tensor self, int64_t dim);
void atg_cummax_out(raw_tensor *, gc_tensor values, gc_tensor indices, gc_tensor self, int64_t dim);
raw_tensor atg_cummaxmin_backward(gc_tensor grad, gc_tensor input, gc_tensor indices, int64_t dim);
void atg_cummin(raw_tensor *, gc_tensor self, int64_t dim);
void atg_cummin_out(raw_tensor *, gc_tensor values, gc_tensor indices, gc_tensor self, int64_t dim);
raw_tensor atg_cumprod(gc_tensor self, int64_t dim, int dtype);
raw_tensor atg_cumprod_(gc_tensor self, int64_t dim, int dtype);
raw_tensor atg_cumprod_backward(gc_tensor grad, gc_tensor input, int64_t dim, gc_tensor output);
raw_tensor atg_cumprod_out(gc_tensor out, gc_tensor self, int64_t dim, int dtype);
raw_tensor atg_cumsum(gc_tensor self, int64_t dim, int dtype);
raw_tensor atg_cumsum_(gc_tensor self, int64_t dim, int dtype);
raw_tensor atg_cumsum_out(gc_tensor out, gc_tensor self, int64_t dim, int dtype);
raw_tensor atg_cumulative_trapezoid(gc_tensor y, int64_t dim);
raw_tensor atg_cumulative_trapezoid_x(gc_tensor y, gc_tensor x, int64_t dim);
raw_tensor atg_data(gc_tensor self);
raw_tensor atg_deg2rad(gc_tensor self);
raw_tensor atg_deg2rad_(gc_tensor self);
raw_tensor atg_deg2rad_out(gc_tensor out, gc_tensor self);
int64_t atg_dense_dim(gc_tensor self);
raw_tensor atg_dequantize(gc_tensor self);
raw_tensor atg_dequantize_self_out(gc_tensor out, gc_tensor self);
raw_tensor *atg_dequantize_tensors(gc_tensor *tensors_data, int tensors_len);
void atg_dequantize_tensors_out(gc_tensor *out_data, int out_len, gc_tensor *tensors_data, int tensors_len);
raw_tensor atg_det(gc_tensor self);
raw_tensor atg_detach(gc_tensor self);
raw_tensor atg_detach_(gc_tensor self);
raw_tensor atg_detach_copy(gc_tensor self);
raw_tensor atg_detach_copy_out(gc_tensor out, gc_tensor self);
raw_tensor atg_diag(gc_tensor self, int64_t diagonal);
raw_tensor atg_diag_embed(gc_tensor self, int64_t offset, int64_t dim1, int64_t dim2);
raw_tensor atg_diag_embed_out(gc_tensor out, gc_tensor self, int64_t offset, int64_t dim1, int64_t dim2);
raw_tensor atg_diag_out(gc_tensor out, gc_tensor self, int64_t diagonal);
raw_tensor atg_diagflat(gc_tensor self, int64_t offset);
raw_tensor atg_diagonal(gc_tensor self, int64_t offset, int64_t dim1, int64_t dim2);
raw_tensor atg_diagonal_backward(gc_tensor grad_output, int64_t *input_sizes_data, int input_sizes_len, int64_t offset, int64_t dim1, int64_t dim2);
raw_tensor atg_diagonal_backward_out(gc_tensor out, gc_tensor grad_output, int64_t *input_sizes_data, int input_sizes_len, int64_t offset, int64_t dim1, int64_t dim2);
raw_tensor atg_diagonal_copy(gc_tensor self, int64_t offset, int64_t dim1, int64_t dim2);
raw_tensor atg_diagonal_copy_out(gc_tensor out, gc_tensor self, int64_t offset, int64_t dim1, int64_t dim2);
raw_tensor atg_diagonal_scatter(gc_tensor self, gc_tensor src, int64_t offset, int64_t dim1, int64_t dim2);
raw_tensor atg_diagonal_scatter_out(gc_tensor out, gc_tensor self, gc_tensor src, int64_t offset, int64_t dim1, int64_t dim2);
raw_tensor atg_diff(gc_tensor self, int64_t n, int64_t dim, gc_tensor prepend, gc_tensor append);
raw_tensor atg_diff_out(gc_tensor out, gc_tensor self, int64_t n, int64_t dim, gc_tensor prepend, gc_tensor append);
raw_tensor atg_digamma(gc_tensor self);
raw_tensor atg_digamma_(gc_tensor self);
raw_tensor atg_digamma_out(gc_tensor out, gc_tensor self);
raw_tensor atg_dist(gc_tensor self, gc_tensor other);
raw_tensor atg_dist_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_div(gc_tensor self, gc_tensor other);
raw_tensor atg_div_(gc_tensor self, gc_tensor other);
raw_tensor atg_div_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_div_out_mode(gc_tensor out, gc_tensor self, gc_tensor other, char * rounding_mode_v, int rounding_mode_null);
raw_tensor atg_div_scalar(gc_tensor self, scalar other);
raw_tensor atg_div_scalar_(gc_tensor self, scalar other);
raw_tensor atg_div_scalar_mode(gc_tensor self, scalar other, char * rounding_mode_v, int rounding_mode_null);
raw_tensor atg_div_scalar_mode_(gc_tensor self, scalar other, char * rounding_mode_v, int rounding_mode_null);
raw_tensor atg_div_scalar_mode_out(gc_tensor out, gc_tensor self, scalar other, char * rounding_mode_v, int rounding_mode_null);
raw_tensor atg_div_scalar_out(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg_div_tensor_mode(gc_tensor self, gc_tensor other, char * rounding_mode_v, int rounding_mode_null);
raw_tensor atg_div_tensor_mode_(gc_tensor self, gc_tensor other, char * rounding_mode_v, int rounding_mode_null);
raw_tensor atg_divide(gc_tensor self, gc_tensor other);
raw_tensor atg_divide_(gc_tensor self, gc_tensor other);
raw_tensor atg_divide_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_divide_out_mode(gc_tensor out, gc_tensor self, gc_tensor other, char * rounding_mode_v, int rounding_mode_null);
raw_tensor atg_divide_scalar(gc_tensor self, scalar other);
raw_tensor atg_divide_scalar_(gc_tensor self, scalar other);
raw_tensor atg_divide_scalar_mode(gc_tensor self, scalar other, char * rounding_mode_v, int rounding_mode_null);
raw_tensor atg_divide_scalar_mode_(gc_tensor self, scalar other, char * rounding_mode_v, int rounding_mode_null);
raw_tensor atg_divide_tensor_mode(gc_tensor self, gc_tensor other, char * rounding_mode_v, int rounding_mode_null);
raw_tensor atg_divide_tensor_mode_(gc_tensor self, gc_tensor other, char * rounding_mode_v, int rounding_mode_null);
raw_tensor atg_dot(gc_tensor self, gc_tensor tensor);
raw_tensor atg_dot_out(gc_tensor out, gc_tensor self, gc_tensor tensor);
raw_tensor atg_dropout(gc_tensor input, double p, int train);
raw_tensor atg_dropout_(gc_tensor self, double p, int train);
raw_tensor *atg_dsplit(gc_tensor self, int64_t sections);
raw_tensor *atg_dsplit_array(gc_tensor self, int64_t *indices_data, int indices_len);
raw_tensor atg_dstack(gc_tensor *tensors_data, int tensors_len);
raw_tensor atg_dstack_out(gc_tensor out, gc_tensor *tensors_data, int tensors_len);
raw_tensor atg_einsum(char * equation, gc_tensor *tensors_data, int tensors_len, int64_t *path_data, int path_len);
raw_tensor atg_elu(gc_tensor self);
raw_tensor atg_elu_(gc_tensor self);
raw_tensor atg_elu_backward(gc_tensor grad_output, scalar alpha, scalar scale, scalar input_scale, int is_result, gc_tensor self_or_result);
raw_tensor atg_elu_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, scalar alpha, scalar scale, scalar input_scale, int is_result, gc_tensor self_or_result);
raw_tensor atg_elu_out(gc_tensor out, gc_tensor self);
raw_tensor atg_embedding(gc_tensor weight, gc_tensor indices, int64_t padding_idx, int scale_grad_by_freq, int sparse);
raw_tensor atg_embedding_backward(gc_tensor grad, gc_tensor indices, int64_t num_weights, int64_t padding_idx, int scale_grad_by_freq, int sparse);
void atg_embedding_bag(raw_tensor *, gc_tensor weight, gc_tensor indices, gc_tensor offsets, int scale_grad_by_freq, int64_t mode, int sparse, gc_tensor per_sample_weights, int include_last_offset);
void atg_embedding_bag_padding_idx(raw_tensor *, gc_tensor weight, gc_tensor indices, gc_tensor offsets, int scale_grad_by_freq, int64_t mode, int sparse, gc_tensor per_sample_weights, int include_last_offset, int64_t padding_idx_v, int padding_idx_null);
raw_tensor atg_embedding_dense_backward(gc_tensor grad_output, gc_tensor indices, int64_t num_weights, int64_t padding_idx, int scale_grad_by_freq);
raw_tensor atg_embedding_dense_backward_out(gc_tensor out, gc_tensor grad_output, gc_tensor indices, int64_t num_weights, int64_t padding_idx, int scale_grad_by_freq);
raw_tensor atg_embedding_out(gc_tensor out, gc_tensor weight, gc_tensor indices, int64_t padding_idx, int scale_grad_by_freq, int sparse);
raw_tensor atg_embedding_renorm(gc_tensor self, gc_tensor indices, double max_norm, double norm_type);
raw_tensor atg_embedding_renorm_(gc_tensor self, gc_tensor indices, double max_norm, double norm_type);
raw_tensor atg_embedding_renorm_out(gc_tensor out, gc_tensor self, gc_tensor indices, double max_norm, double norm_type);
raw_tensor atg_embedding_sparse_backward(gc_tensor grad, gc_tensor indices, int64_t num_weights, int64_t padding_idx, int scale_grad_by_freq);
raw_tensor atg_empty(int64_t *size_data, int size_len, int options_kind, int options_device);
raw_tensor atg_empty_like(gc_tensor self);
raw_tensor atg_empty_like_out(gc_tensor out, gc_tensor self);
raw_tensor atg_empty_out(gc_tensor out, int64_t *size_data, int size_len);
raw_tensor atg_empty_permuted(int64_t *size_data, int size_len, int64_t *physical_layout_data, int physical_layout_len, int options_kind, int options_device);
raw_tensor atg_empty_permuted_out(gc_tensor out, int64_t *size_data, int size_len, int64_t *physical_layout_data, int physical_layout_len);
raw_tensor atg_empty_quantized(int64_t *size_data, int size_len, gc_tensor qtensor, int options_kind, int options_device);
raw_tensor atg_empty_quantized_out(gc_tensor out, int64_t *size_data, int size_len, gc_tensor qtensor);
raw_tensor atg_empty_strided(int64_t *size_data, int size_len, int64_t *stride_data, int stride_len, int options_kind, int options_device);
raw_tensor atg_empty_strided_out(gc_tensor out, int64_t *size_data, int size_len, int64_t *stride_data, int stride_len);
raw_tensor atg_eq(gc_tensor self, scalar other);
raw_tensor atg_eq_(gc_tensor self, scalar other);
raw_tensor atg_eq_scalar_out(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg_eq_tensor(gc_tensor self, gc_tensor other);
raw_tensor atg_eq_tensor_(gc_tensor self, gc_tensor other);
raw_tensor atg_eq_tensor_out(gc_tensor out, gc_tensor self, gc_tensor other);
int atg_equal(gc_tensor self, gc_tensor other);
raw_tensor atg_erf(gc_tensor self);
raw_tensor atg_erf_(gc_tensor self);
raw_tensor atg_erf_out(gc_tensor out, gc_tensor self);
raw_tensor atg_erfc(gc_tensor self);
raw_tensor atg_erfc_(gc_tensor self);
raw_tensor atg_erfc_out(gc_tensor out, gc_tensor self);
raw_tensor atg_erfinv(gc_tensor self);
raw_tensor atg_erfinv_(gc_tensor self);
raw_tensor atg_erfinv_out(gc_tensor out, gc_tensor self);
raw_tensor atg_exp(gc_tensor self);
raw_tensor atg_exp2(gc_tensor self);
raw_tensor atg_exp2_(gc_tensor self);
raw_tensor atg_exp2_out(gc_tensor out, gc_tensor self);
raw_tensor atg_exp_(gc_tensor self);
raw_tensor atg_exp_out(gc_tensor out, gc_tensor self);
raw_tensor atg_expand(gc_tensor self, int64_t *size_data, int size_len, int implicit);
raw_tensor atg_expand_as(gc_tensor self, gc_tensor other);
raw_tensor atg_expand_copy(gc_tensor self, int64_t *size_data, int size_len, int implicit);
raw_tensor atg_expand_copy_out(gc_tensor out, gc_tensor self, int64_t *size_data, int size_len, int implicit);
raw_tensor atg_expm1(gc_tensor self);
raw_tensor atg_expm1_(gc_tensor self);
raw_tensor atg_expm1_out(gc_tensor out, gc_tensor self);
raw_tensor atg_exponential(gc_tensor self, double lambd);
raw_tensor atg_exponential_(gc_tensor self, double lambd);
raw_tensor atg_exponential_out(gc_tensor out, gc_tensor self, double lambd);
raw_tensor atg_eye(int64_t n, int options_kind, int options_device);
raw_tensor atg_eye_m(int64_t n, int64_t m, int options_kind, int options_device);
raw_tensor atg_eye_m_out(gc_tensor out, int64_t n, int64_t m);
raw_tensor atg_eye_out(gc_tensor out, int64_t n);
raw_tensor atg_fake_quantize_per_channel_affine(gc_tensor self, gc_tensor scale, gc_tensor zero_point, int64_t axis, int64_t quant_min, int64_t quant_max);
void atg_fake_quantize_per_channel_affine_cachemask(raw_tensor *, gc_tensor self, gc_tensor scale, gc_tensor zero_point, int64_t axis, int64_t quant_min, int64_t quant_max);
raw_tensor atg_fake_quantize_per_channel_affine_cachemask_backward(gc_tensor grad, gc_tensor mask);
void atg_fake_quantize_per_channel_affine_cachemask_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor self, gc_tensor scale, gc_tensor zero_point, int64_t axis, int64_t quant_min, int64_t quant_max);
raw_tensor atg_fake_quantize_per_tensor_affine(gc_tensor self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max);
void atg_fake_quantize_per_tensor_affine_cachemask(raw_tensor *, gc_tensor self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max);
raw_tensor atg_fake_quantize_per_tensor_affine_cachemask_backward(gc_tensor grad, gc_tensor mask);
void atg_fake_quantize_per_tensor_affine_cachemask_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max);
raw_tensor atg_fake_quantize_per_tensor_affine_tensor_qparams(gc_tensor self, gc_tensor scale, gc_tensor zero_point, int64_t quant_min, int64_t quant_max);
raw_tensor atg_fbgemm_linear_fp16_weight(gc_tensor input, gc_tensor packed_weight, gc_tensor bias);
raw_tensor atg_fbgemm_linear_fp16_weight_fp32_activation(gc_tensor input, gc_tensor packed_weight, gc_tensor bias);
raw_tensor atg_fbgemm_linear_int8_weight(gc_tensor input, gc_tensor weight, gc_tensor packed, gc_tensor col_offsets, scalar weight_scale, scalar weight_zero_point, gc_tensor bias);
raw_tensor atg_fbgemm_linear_int8_weight_fp32_activation(gc_tensor input, gc_tensor weight, gc_tensor packed, gc_tensor col_offsets, scalar weight_scale, scalar weight_zero_point, gc_tensor bias);
raw_tensor atg_fbgemm_pack_gemm_matrix_fp16(gc_tensor input);
raw_tensor atg_fbgemm_pack_quantized_matrix(gc_tensor input);
raw_tensor atg_fbgemm_pack_quantized_matrix_kn(gc_tensor input, int64_t K, int64_t n);
raw_tensor atg_feature_alpha_dropout(gc_tensor input, double p, int train);
raw_tensor atg_feature_alpha_dropout_(gc_tensor self, double p, int train);
raw_tensor atg_feature_dropout(gc_tensor input, double p, int train);
raw_tensor atg_feature_dropout_(gc_tensor self, double p, int train);
raw_tensor atg_fft_fft(gc_tensor self, int64_t n_v, int n_null, int64_t dim, char * norm_v, int norm_null);
raw_tensor atg_fft_fft2(gc_tensor self, int64_t *s_data, int s_len, int64_t *dim_data, int dim_len, char * norm_v, int norm_null);
raw_tensor atg_fft_fft2_out(gc_tensor out, gc_tensor self, int64_t *s_data, int s_len, int64_t *dim_data, int dim_len, char * norm_v, int norm_null);
raw_tensor atg_fft_fft_out(gc_tensor out, gc_tensor self, int64_t n_v, int n_null, int64_t dim, char * norm_v, int norm_null);
raw_tensor atg_fft_fftfreq(int64_t n, double d, int options_kind, int options_device);
raw_tensor atg_fft_fftfreq_out(gc_tensor out, int64_t n, double d);
raw_tensor atg_fft_fftn(gc_tensor self, int64_t *s_data, int s_len, int64_t *dim_data, int dim_len, char * norm_v, int norm_null);
raw_tensor atg_fft_fftn_out(gc_tensor out, gc_tensor self, int64_t *s_data, int s_len, int64_t *dim_data, int dim_len, char * norm_v, int norm_null);
raw_tensor atg_fft_fftshift(gc_tensor self, int64_t *dim_data, int dim_len);
raw_tensor atg_fft_hfft(gc_tensor self, int64_t n_v, int n_null, int64_t dim, char * norm_v, int norm_null);
raw_tensor atg_fft_hfft2(gc_tensor self, int64_t *s_data, int s_len, int64_t *dim_data, int dim_len, char * norm_v, int norm_null);
raw_tensor atg_fft_hfft2_out(gc_tensor out, gc_tensor self, int64_t *s_data, int s_len, int64_t *dim_data, int dim_len, char * norm_v, int norm_null);
raw_tensor atg_fft_hfft_out(gc_tensor out, gc_tensor self, int64_t n_v, int n_null, int64_t dim, char * norm_v, int norm_null);
raw_tensor atg_fft_hfftn(gc_tensor self, int64_t *s_data, int s_len, int64_t *dim_data, int dim_len, char * norm_v, int norm_null);
raw_tensor atg_fft_hfftn_out(gc_tensor out, gc_tensor self, int64_t *s_data, int s_len, int64_t *dim_data, int dim_len, char * norm_v, int norm_null);
raw_tensor atg_fft_ifft(gc_tensor self, int64_t n_v, int n_null, int64_t dim, char * norm_v, int norm_null);
raw_tensor atg_fft_ifft2(gc_tensor self, int64_t *s_data, int s_len, int64_t *dim_data, int dim_len, char * norm_v, int norm_null);
raw_tensor atg_fft_ifft2_out(gc_tensor out, gc_tensor self, int64_t *s_data, int s_len, int64_t *dim_data, int dim_len, char * norm_v, int norm_null);
raw_tensor atg_fft_ifft_out(gc_tensor out, gc_tensor self, int64_t n_v, int n_null, int64_t dim, char * norm_v, int norm_null);
raw_tensor atg_fft_ifftn(gc_tensor self, int64_t *s_data, int s_len, int64_t *dim_data, int dim_len, char * norm_v, int norm_null);
raw_tensor atg_fft_ifftn_out(gc_tensor out, gc_tensor self, int64_t *s_data, int s_len, int64_t *dim_data, int dim_len, char * norm_v, int norm_null);
raw_tensor atg_fft_ifftshift(gc_tensor self, int64_t *dim_data, int dim_len);
raw_tensor atg_fft_ihfft(gc_tensor self, int64_t n_v, int n_null, int64_t dim, char * norm_v, int norm_null);
raw_tensor atg_fft_ihfft2(gc_tensor self, int64_t *s_data, int s_len, int64_t *dim_data, int dim_len, char * norm_v, int norm_null);
raw_tensor atg_fft_ihfft2_out(gc_tensor out, gc_tensor self, int64_t *s_data, int s_len, int64_t *dim_data, int dim_len, char * norm_v, int norm_null);
raw_tensor atg_fft_ihfft_out(gc_tensor out, gc_tensor self, int64_t n_v, int n_null, int64_t dim, char * norm_v, int norm_null);
raw_tensor atg_fft_ihfftn(gc_tensor self, int64_t *s_data, int s_len, int64_t *dim_data, int dim_len, char * norm_v, int norm_null);
raw_tensor atg_fft_ihfftn_out(gc_tensor out, gc_tensor self, int64_t *s_data, int s_len, int64_t *dim_data, int dim_len, char * norm_v, int norm_null);
raw_tensor atg_fft_irfft(gc_tensor self, int64_t n_v, int n_null, int64_t dim, char * norm_v, int norm_null);
raw_tensor atg_fft_irfft2(gc_tensor self, int64_t *s_data, int s_len, int64_t *dim_data, int dim_len, char * norm_v, int norm_null);
raw_tensor atg_fft_irfft2_out(gc_tensor out, gc_tensor self, int64_t *s_data, int s_len, int64_t *dim_data, int dim_len, char * norm_v, int norm_null);
raw_tensor atg_fft_irfft_out(gc_tensor out, gc_tensor self, int64_t n_v, int n_null, int64_t dim, char * norm_v, int norm_null);
raw_tensor atg_fft_irfftn(gc_tensor self, int64_t *s_data, int s_len, int64_t *dim_data, int dim_len, char * norm_v, int norm_null);
raw_tensor atg_fft_irfftn_out(gc_tensor out, gc_tensor self, int64_t *s_data, int s_len, int64_t *dim_data, int dim_len, char * norm_v, int norm_null);
raw_tensor atg_fft_rfft(gc_tensor self, int64_t n_v, int n_null, int64_t dim, char * norm_v, int norm_null);
raw_tensor atg_fft_rfft2(gc_tensor self, int64_t *s_data, int s_len, int64_t *dim_data, int dim_len, char * norm_v, int norm_null);
raw_tensor atg_fft_rfft2_out(gc_tensor out, gc_tensor self, int64_t *s_data, int s_len, int64_t *dim_data, int dim_len, char * norm_v, int norm_null);
raw_tensor atg_fft_rfft_out(gc_tensor out, gc_tensor self, int64_t n_v, int n_null, int64_t dim, char * norm_v, int norm_null);
raw_tensor atg_fft_rfftfreq(int64_t n, double d, int options_kind, int options_device);
raw_tensor atg_fft_rfftfreq_out(gc_tensor out, int64_t n, double d);
raw_tensor atg_fft_rfftn(gc_tensor self, int64_t *s_data, int s_len, int64_t *dim_data, int dim_len, char * norm_v, int norm_null);
raw_tensor atg_fft_rfftn_out(gc_tensor out, gc_tensor self, int64_t *s_data, int s_len, int64_t *dim_data, int dim_len, char * norm_v, int norm_null);
raw_tensor atg_fill(gc_tensor self, scalar value);
raw_tensor atg_fill_(gc_tensor self, scalar value);
raw_tensor atg_fill_diagonal_(gc_tensor self, scalar fill_value, int wrap);
raw_tensor atg_fill_scalar_out(gc_tensor out, gc_tensor self, scalar value);
raw_tensor atg_fill_tensor(gc_tensor self, gc_tensor value);
raw_tensor atg_fill_tensor_(gc_tensor self, gc_tensor value);
raw_tensor atg_fill_tensor_out(gc_tensor out, gc_tensor self, gc_tensor value);
raw_tensor atg_fix(gc_tensor self);
raw_tensor atg_fix_(gc_tensor self);
raw_tensor atg_fix_out(gc_tensor out, gc_tensor self);
raw_tensor atg_flatten(gc_tensor self, int64_t start_dim, int64_t end_dim);
raw_tensor atg_flatten_dense_tensors(gc_tensor *tensors_data, int tensors_len);
raw_tensor atg_flip(gc_tensor self, int64_t *dims_data, int dims_len);
raw_tensor atg_flip_out(gc_tensor out, gc_tensor self, int64_t *dims_data, int dims_len);
raw_tensor atg_fliplr(gc_tensor self);
raw_tensor atg_flipud(gc_tensor self);
raw_tensor atg_float_power(gc_tensor self, gc_tensor exponent);
raw_tensor atg_float_power_(gc_tensor self, scalar exponent);
raw_tensor atg_float_power_scalar(scalar self, gc_tensor exponent);
raw_tensor atg_float_power_scalar_out(gc_tensor out, scalar self, gc_tensor exponent);
raw_tensor atg_float_power_tensor_(gc_tensor self, gc_tensor exponent);
raw_tensor atg_float_power_tensor_scalar(gc_tensor self, scalar exponent);
raw_tensor atg_float_power_tensor_scalar_out(gc_tensor out, gc_tensor self, scalar exponent);
raw_tensor atg_float_power_tensor_tensor_out(gc_tensor out, gc_tensor self, gc_tensor exponent);
raw_tensor atg_floor(gc_tensor self);
raw_tensor atg_floor_(gc_tensor self);
raw_tensor atg_floor_divide(gc_tensor self, gc_tensor other);
raw_tensor atg_floor_divide_(gc_tensor self, gc_tensor other);
raw_tensor atg_floor_divide_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_floor_divide_scalar(gc_tensor self, scalar other);
raw_tensor atg_floor_divide_scalar_(gc_tensor self, scalar other);
raw_tensor atg_floor_divide_scalar_out(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg_floor_out(gc_tensor out, gc_tensor self);
raw_tensor atg_fmax(gc_tensor self, gc_tensor other);
raw_tensor atg_fmax_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_fmin(gc_tensor self, gc_tensor other);
raw_tensor atg_fmin_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_fmod(gc_tensor self, scalar other);
raw_tensor atg_fmod_(gc_tensor self, scalar other);
raw_tensor atg_fmod_scalar_out(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg_fmod_tensor(gc_tensor self, gc_tensor other);
raw_tensor atg_fmod_tensor_(gc_tensor self, gc_tensor other);
raw_tensor atg_fmod_tensor_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_frac(gc_tensor self);
raw_tensor atg_frac_(gc_tensor self);
raw_tensor atg_frac_out(gc_tensor out, gc_tensor self);
void atg_fractional_max_pool2d(raw_tensor *, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *output_size_data, int output_size_len, gc_tensor random_samples);
raw_tensor atg_fractional_max_pool2d_backward(gc_tensor grad_output, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *output_size_data, int output_size_len, gc_tensor indices);
raw_tensor atg_fractional_max_pool2d_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *output_size_data, int output_size_len, gc_tensor indices);
void atg_fractional_max_pool2d_output(raw_tensor *, gc_tensor output, gc_tensor indices, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *output_size_data, int output_size_len, gc_tensor random_samples);
void atg_fractional_max_pool3d(raw_tensor *, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *output_size_data, int output_size_len, gc_tensor random_samples);
raw_tensor atg_fractional_max_pool3d_backward(gc_tensor grad_output, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *output_size_data, int output_size_len, gc_tensor indices);
raw_tensor atg_fractional_max_pool3d_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *output_size_data, int output_size_len, gc_tensor indices);
void atg_fractional_max_pool3d_output(raw_tensor *, gc_tensor output, gc_tensor indices, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *output_size_data, int output_size_len, gc_tensor random_samples);
void atg_frexp(raw_tensor *, gc_tensor self);
void atg_frexp_tensor_out(raw_tensor *, gc_tensor mantissa, gc_tensor exponent, gc_tensor self);
raw_tensor atg_frobenius_norm(gc_tensor self, int64_t *dim_data, int dim_len, int keepdim);
raw_tensor atg_frobenius_norm_out(gc_tensor out, gc_tensor self, int64_t *dim_data, int dim_len, int keepdim);
raw_tensor atg_from_file(char * filename, int shared, int64_t size_v, int size_null, int options_kind, int options_device);
raw_tensor atg_from_file_out(gc_tensor out, char * filename, int shared, int64_t size_v, int size_null);
raw_tensor atg_full(int64_t *size_data, int size_len, scalar fill_value, int options_kind, int options_device);
raw_tensor atg_full_like(gc_tensor self, scalar fill_value);
raw_tensor atg_full_like_out(gc_tensor out, gc_tensor self, scalar fill_value);
raw_tensor atg_full_out(gc_tensor out, int64_t *size_data, int size_len, scalar fill_value);
raw_tensor atg_fused_moving_avg_obs_fake_quant(gc_tensor self, gc_tensor observer_on, gc_tensor fake_quant_on, gc_tensor running_min, gc_tensor running_max, gc_tensor scale, gc_tensor zero_point, double averaging_const, int64_t quant_min, int64_t quant_max, int64_t ch_axis, int per_row_fake_quant, int symmetric_quant);
raw_tensor atg_gather(gc_tensor self, int64_t dim, gc_tensor index, int sparse_grad);
raw_tensor atg_gather_backward(gc_tensor grad, gc_tensor self, int64_t dim, gc_tensor index, int sparse_grad);
raw_tensor atg_gather_out(gc_tensor out, gc_tensor self, int64_t dim, gc_tensor index, int sparse_grad);
raw_tensor atg_gcd(gc_tensor self, gc_tensor other);
raw_tensor atg_gcd_(gc_tensor self, gc_tensor other);
raw_tensor atg_gcd_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_ge(gc_tensor self, scalar other);
raw_tensor atg_ge_(gc_tensor self, scalar other);
raw_tensor atg_ge_scalar_out(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg_ge_tensor(gc_tensor self, gc_tensor other);
raw_tensor atg_ge_tensor_(gc_tensor self, gc_tensor other);
raw_tensor atg_ge_tensor_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_gelu(gc_tensor self, char * approximate);
raw_tensor atg_gelu_(gc_tensor self, char * approximate);
raw_tensor atg_gelu_backward(gc_tensor grad_output, gc_tensor self, char * approximate);
raw_tensor atg_gelu_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, char * approximate);
raw_tensor atg_gelu_out(gc_tensor out, gc_tensor self, char * approximate);
raw_tensor atg_geometric(gc_tensor self, double p);
raw_tensor atg_geometric_(gc_tensor self, double p);
raw_tensor atg_geometric_out(gc_tensor out, gc_tensor self, double p);
void atg_geqrf(raw_tensor *, gc_tensor self);
void atg_geqrf_a(raw_tensor *, gc_tensor a, gc_tensor tau, gc_tensor self);
raw_tensor atg_ger(gc_tensor self, gc_tensor vec2);
raw_tensor atg_ger_out(gc_tensor out, gc_tensor self, gc_tensor vec2);
raw_tensor atg_glu(gc_tensor self, int64_t dim);
raw_tensor atg_glu_backward(gc_tensor grad_output, gc_tensor self, int64_t dim);
raw_tensor atg_glu_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, int64_t dim);
raw_tensor atg_glu_backward_jvp(gc_tensor grad_x, gc_tensor grad_glu, gc_tensor x, gc_tensor dgrad_glu, gc_tensor dx, int64_t dim);
raw_tensor atg_glu_backward_jvp_out(gc_tensor out, gc_tensor grad_x, gc_tensor grad_glu, gc_tensor x, gc_tensor dgrad_glu, gc_tensor dx, int64_t dim);
raw_tensor atg_glu_jvp(gc_tensor glu, gc_tensor x, gc_tensor dx, int64_t dim);
raw_tensor atg_glu_jvp_out(gc_tensor out, gc_tensor glu, gc_tensor x, gc_tensor dx, int64_t dim);
raw_tensor atg_glu_out(gc_tensor out, gc_tensor self, int64_t dim);
raw_tensor atg_grad(gc_tensor self);
raw_tensor atg_greater(gc_tensor self, scalar other);
raw_tensor atg_greater_(gc_tensor self, scalar other);
raw_tensor atg_greater_equal(gc_tensor self, scalar other);
raw_tensor atg_greater_equal_(gc_tensor self, scalar other);
raw_tensor atg_greater_equal_scalar_out(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg_greater_equal_tensor(gc_tensor self, gc_tensor other);
raw_tensor atg_greater_equal_tensor_(gc_tensor self, gc_tensor other);
raw_tensor atg_greater_equal_tensor_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_greater_scalar_out(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg_greater_tensor(gc_tensor self, gc_tensor other);
raw_tensor atg_greater_tensor_(gc_tensor self, gc_tensor other);
raw_tensor atg_greater_tensor_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_grid_sampler(gc_tensor input, gc_tensor grid, int64_t interpolation_mode, int64_t padding_mode, int align_corners);
raw_tensor atg_grid_sampler_2d(gc_tensor input, gc_tensor grid, int64_t interpolation_mode, int64_t padding_mode, int align_corners);
raw_tensor atg_grid_sampler_2d_out(gc_tensor out, gc_tensor input, gc_tensor grid, int64_t interpolation_mode, int64_t padding_mode, int align_corners);
raw_tensor atg_grid_sampler_3d(gc_tensor input, gc_tensor grid, int64_t interpolation_mode, int64_t padding_mode, int align_corners);
raw_tensor atg_grid_sampler_3d_out(gc_tensor out, gc_tensor input, gc_tensor grid, int64_t interpolation_mode, int64_t padding_mode, int align_corners);
raw_tensor atg_group_norm(gc_tensor input, int64_t num_groups, gc_tensor weight, gc_tensor bias, double eps, int cudnn_enabled);
void atg_gru(raw_tensor *, gc_tensor input, gc_tensor hx, gc_tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional, int batch_first);
raw_tensor atg_gru_cell(gc_tensor input, gc_tensor hx, gc_tensor w_ih, gc_tensor w_hh, gc_tensor b_ih, gc_tensor b_hh);
void atg_gru_data(raw_tensor *, gc_tensor data, gc_tensor batch_sizes, gc_tensor hx, gc_tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional);
raw_tensor atg_gt(gc_tensor self, scalar other);
raw_tensor atg_gt_(gc_tensor self, scalar other);
raw_tensor atg_gt_scalar_out(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg_gt_tensor(gc_tensor self, gc_tensor other);
raw_tensor atg_gt_tensor_(gc_tensor self, gc_tensor other);
raw_tensor atg_gt_tensor_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_hamming_window(int64_t window_length, int options_kind, int options_device);
raw_tensor atg_hamming_window_out(gc_tensor out, int64_t window_length);
raw_tensor atg_hamming_window_periodic(int64_t window_length, int periodic, int options_kind, int options_device);
raw_tensor atg_hamming_window_periodic_alpha(int64_t window_length, int periodic, double alpha, int options_kind, int options_device);
raw_tensor atg_hamming_window_periodic_alpha_beta(int64_t window_length, int periodic, double alpha, double beta, int options_kind, int options_device);
raw_tensor atg_hamming_window_periodic_alpha_beta_out(gc_tensor out, int64_t window_length, int periodic, double alpha, double beta);
raw_tensor atg_hamming_window_periodic_alpha_out(gc_tensor out, int64_t window_length, int periodic, double alpha);
raw_tensor atg_hamming_window_periodic_out(gc_tensor out, int64_t window_length, int periodic);
raw_tensor atg_hann_window(int64_t window_length, int options_kind, int options_device);
raw_tensor atg_hann_window_out(gc_tensor out, int64_t window_length);
raw_tensor atg_hann_window_periodic(int64_t window_length, int periodic, int options_kind, int options_device);
raw_tensor atg_hann_window_periodic_out(gc_tensor out, int64_t window_length, int periodic);
raw_tensor atg_hardshrink(gc_tensor self);
raw_tensor atg_hardshrink_backward(gc_tensor grad_out, gc_tensor self, scalar lambd);
raw_tensor atg_hardshrink_backward_grad_input(gc_tensor grad_input, gc_tensor grad_out, gc_tensor self, scalar lambd);
raw_tensor atg_hardshrink_out(gc_tensor out, gc_tensor self);
raw_tensor atg_hardsigmoid(gc_tensor self);
raw_tensor atg_hardsigmoid_(gc_tensor self);
raw_tensor atg_hardsigmoid_backward(gc_tensor grad_output, gc_tensor self);
raw_tensor atg_hardsigmoid_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self);
raw_tensor atg_hardsigmoid_out(gc_tensor out, gc_tensor self);
raw_tensor atg_hardswish(gc_tensor self);
raw_tensor atg_hardswish_(gc_tensor self);
raw_tensor atg_hardswish_backward(gc_tensor grad_output, gc_tensor self);
raw_tensor atg_hardswish_backward_out(gc_tensor out, gc_tensor grad_output, gc_tensor self);
raw_tensor atg_hardswish_out(gc_tensor out, gc_tensor self);
raw_tensor atg_hardtanh(gc_tensor self);
raw_tensor atg_hardtanh_(gc_tensor self);
raw_tensor atg_hardtanh_backward(gc_tensor grad_output, gc_tensor self, scalar min_val, scalar max_val);
raw_tensor atg_hardtanh_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, scalar min_val, scalar max_val);
raw_tensor atg_hardtanh_out(gc_tensor out, gc_tensor self);
raw_tensor atg_heaviside(gc_tensor self, gc_tensor values);
raw_tensor atg_heaviside_(gc_tensor self, gc_tensor values);
raw_tensor atg_heaviside_out(gc_tensor out, gc_tensor self, gc_tensor values);
raw_tensor atg_hinge_embedding_loss(gc_tensor self, gc_tensor target, double margin, int64_t reduction);
raw_tensor atg_histc(gc_tensor self, int64_t bins);
raw_tensor atg_histc_out(gc_tensor out, gc_tensor self, int64_t bins);
raw_tensor *atg_hsplit(gc_tensor self, int64_t sections);
raw_tensor *atg_hsplit_array(gc_tensor self, int64_t *indices_data, int indices_len);
raw_tensor atg_hspmm(gc_tensor mat1, gc_tensor mat2);
raw_tensor atg_hspmm_out(gc_tensor out, gc_tensor mat1, gc_tensor mat2);
raw_tensor atg_hstack(gc_tensor *tensors_data, int tensors_len);
raw_tensor atg_hstack_out(gc_tensor out, gc_tensor *tensors_data, int tensors_len);
raw_tensor atg_huber_loss(gc_tensor self, gc_tensor target, int64_t reduction, double delta);
raw_tensor atg_huber_loss_backward(gc_tensor grad_output, gc_tensor self, gc_tensor target, int64_t reduction, double delta);
raw_tensor atg_huber_loss_backward_out(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, gc_tensor target, int64_t reduction, double delta);
raw_tensor atg_huber_loss_out(gc_tensor out, gc_tensor self, gc_tensor target, int64_t reduction, double delta);
raw_tensor atg_hypot(gc_tensor self, gc_tensor other);
raw_tensor atg_hypot_(gc_tensor self, gc_tensor other);
raw_tensor atg_hypot_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_i0(gc_tensor self);
raw_tensor atg_i0_(gc_tensor self);
raw_tensor atg_i0_out(gc_tensor out, gc_tensor self);
raw_tensor atg_igamma(gc_tensor self, gc_tensor other);
raw_tensor atg_igamma_(gc_tensor self, gc_tensor other);
raw_tensor atg_igamma_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_igammac(gc_tensor self, gc_tensor other);
raw_tensor atg_igammac_(gc_tensor self, gc_tensor other);
raw_tensor atg_igammac_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_im2col(gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *dilation_data, int dilation_len, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len);
raw_tensor atg_im2col_out(gc_tensor out, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *dilation_data, int dilation_len, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len);
raw_tensor atg_imag(gc_tensor self);
raw_tensor atg_index_add(gc_tensor self, int64_t dim, gc_tensor index, gc_tensor source);
raw_tensor atg_index_add_(gc_tensor self, int64_t dim, gc_tensor index, gc_tensor source);
raw_tensor atg_index_add_out(gc_tensor out, gc_tensor self, int64_t dim, gc_tensor index, gc_tensor source);
raw_tensor atg_index_copy(gc_tensor self, int64_t dim, gc_tensor index, gc_tensor source);
raw_tensor atg_index_copy_(gc_tensor self, int64_t dim, gc_tensor index, gc_tensor source);
raw_tensor atg_index_copy_out(gc_tensor out, gc_tensor self, int64_t dim, gc_tensor index, gc_tensor source);
raw_tensor atg_index_fill(gc_tensor self, int64_t dim, gc_tensor index, scalar value);
raw_tensor atg_index_fill_(gc_tensor self, int64_t dim, gc_tensor index, scalar value);
raw_tensor atg_index_fill_int_scalar_out(gc_tensor out, gc_tensor self, int64_t dim, gc_tensor index, scalar value);
raw_tensor atg_index_fill_int_tensor(gc_tensor self, int64_t dim, gc_tensor index, gc_tensor value);
raw_tensor atg_index_fill_int_tensor_(gc_tensor self, int64_t dim, gc_tensor index, gc_tensor value);
raw_tensor atg_index_fill_int_tensor_out(gc_tensor out, gc_tensor self, int64_t dim, gc_tensor index, gc_tensor value);
raw_tensor atg_index_reduce(gc_tensor self, int64_t dim, gc_tensor index, gc_tensor source, char * reduce, int include_self);
raw_tensor atg_index_reduce_(gc_tensor self, int64_t dim, gc_tensor index, gc_tensor source, char * reduce, int include_self);
raw_tensor atg_index_reduce_out(gc_tensor out, gc_tensor self, int64_t dim, gc_tensor index, gc_tensor source, char * reduce, int include_self);
raw_tensor atg_index_select(gc_tensor self, int64_t dim, gc_tensor index);
raw_tensor atg_index_select_backward(gc_tensor grad, int64_t *self_sizes_data, int self_sizes_len, int64_t dim, gc_tensor index);
raw_tensor atg_index_select_out(gc_tensor out, gc_tensor self, int64_t dim, gc_tensor index);
raw_tensor atg_indices(gc_tensor self);
raw_tensor atg_indices_copy(gc_tensor self);
raw_tensor atg_indices_copy_out(gc_tensor out, gc_tensor self);
raw_tensor atg_infinitely_differentiable_gelu_backward(gc_tensor grad, gc_tensor self);
raw_tensor atg_inner(gc_tensor self, gc_tensor other);
raw_tensor atg_inner_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_instance_norm(gc_tensor input, gc_tensor weight, gc_tensor bias, gc_tensor running_mean, gc_tensor running_var, int use_input_stats, double momentum, double eps, int cudnn_enabled);
raw_tensor atg_int_repr(gc_tensor self);
raw_tensor atg_int_repr_out(gc_tensor out, gc_tensor self);
raw_tensor atg_inverse(gc_tensor self);
raw_tensor atg_inverse_out(gc_tensor out, gc_tensor self);
int atg_is_coalesced(gc_tensor self);
int atg_is_complex(gc_tensor self);
int atg_is_conj(gc_tensor self);
int atg_is_distributed(gc_tensor self);
int atg_is_floating_point(gc_tensor self);
int atg_is_inference(gc_tensor self);
int atg_is_leaf(gc_tensor self);
int atg_is_neg(gc_tensor self);
int atg_is_nonzero(gc_tensor self);
int atg_is_pinned(gc_tensor self, int device);
int atg_is_same_size(gc_tensor self, gc_tensor other);
int atg_is_set_to(gc_tensor self, gc_tensor tensor);
int atg_is_signed(gc_tensor self);
int atg_is_vulkan_available();
raw_tensor atg_isclose(gc_tensor self, gc_tensor other, double rtol, double atol, int equal_nan);
raw_tensor atg_isfinite(gc_tensor self);
raw_tensor atg_isin(gc_tensor elements, gc_tensor test_elements, int assume_unique, int invert);
raw_tensor atg_isin_scalar_tensor(scalar element, gc_tensor test_elements, int assume_unique, int invert);
raw_tensor atg_isin_scalar_tensor_out(gc_tensor out, scalar element, gc_tensor test_elements, int assume_unique, int invert);
raw_tensor atg_isin_tensor_scalar(gc_tensor elements, scalar test_element, int assume_unique, int invert);
raw_tensor atg_isin_tensor_scalar_out(gc_tensor out, gc_tensor elements, scalar test_element, int assume_unique, int invert);
raw_tensor atg_isin_tensor_tensor_out(gc_tensor out, gc_tensor elements, gc_tensor test_elements, int assume_unique, int invert);
raw_tensor atg_isinf(gc_tensor self);
raw_tensor atg_isinf_out(gc_tensor out, gc_tensor self);
raw_tensor atg_isnan(gc_tensor self);
raw_tensor atg_isnan_out(gc_tensor out, gc_tensor self);
raw_tensor atg_isneginf(gc_tensor self);
raw_tensor atg_isneginf_out(gc_tensor out, gc_tensor self);
raw_tensor atg_isposinf(gc_tensor self);
raw_tensor atg_isposinf_out(gc_tensor out, gc_tensor self);
raw_tensor atg_isreal(gc_tensor self);
raw_tensor atg_istft(gc_tensor self, int64_t n_fft, int64_t hop_length_v, int hop_length_null, int64_t win_length_v, int win_length_null, gc_tensor window, int center, int normalized, int onesided, int64_t length_v, int length_null, int return_complex);
raw_tensor atg_kaiser_window(int64_t window_length, int options_kind, int options_device);
raw_tensor atg_kaiser_window_beta(int64_t window_length, int periodic, double beta, int options_kind, int options_device);
raw_tensor atg_kaiser_window_beta_out(gc_tensor out, int64_t window_length, int periodic, double beta);
raw_tensor atg_kaiser_window_out(gc_tensor out, int64_t window_length);
raw_tensor atg_kaiser_window_periodic(int64_t window_length, int periodic, int options_kind, int options_device);
raw_tensor atg_kaiser_window_periodic_out(gc_tensor out, int64_t window_length, int periodic);
raw_tensor atg_kl_div(gc_tensor self, gc_tensor target, int64_t reduction, int log_target);
raw_tensor atg_kron(gc_tensor self, gc_tensor other);
raw_tensor atg_kron_out(gc_tensor out, gc_tensor self, gc_tensor other);
void atg_kthvalue(raw_tensor *, gc_tensor self, int64_t k, int64_t dim, int keepdim);
void atg_kthvalue_values(raw_tensor *, gc_tensor values, gc_tensor indices, gc_tensor self, int64_t k, int64_t dim, int keepdim);
raw_tensor atg_l1_loss(gc_tensor self, gc_tensor target, int64_t reduction);
raw_tensor atg_layer_norm(gc_tensor input, int64_t *normalized_shape_data, int normalized_shape_len, gc_tensor weight, gc_tensor bias, double eps, int cudnn_enable);
raw_tensor atg_lcm(gc_tensor self, gc_tensor other);
raw_tensor atg_lcm_(gc_tensor self, gc_tensor other);
raw_tensor atg_lcm_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_ldexp(gc_tensor self, gc_tensor other);
raw_tensor atg_ldexp_(gc_tensor self, gc_tensor other);
raw_tensor atg_ldexp_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_le(gc_tensor self, scalar other);
raw_tensor atg_le_(gc_tensor self, scalar other);
raw_tensor atg_le_scalar_out(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg_le_tensor(gc_tensor self, gc_tensor other);
raw_tensor atg_le_tensor_(gc_tensor self, gc_tensor other);
raw_tensor atg_le_tensor_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_leaky_relu(gc_tensor self);
raw_tensor atg_leaky_relu_(gc_tensor self);
raw_tensor atg_leaky_relu_backward(gc_tensor grad_output, gc_tensor self, scalar negative_slope, int self_is_result);
raw_tensor atg_leaky_relu_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, scalar negative_slope, int self_is_result);
raw_tensor atg_leaky_relu_out(gc_tensor out, gc_tensor self);
raw_tensor atg_lerp(gc_tensor self, gc_tensor end, scalar weight);
raw_tensor atg_lerp_(gc_tensor self, gc_tensor end, scalar weight);
raw_tensor atg_lerp_scalar_out(gc_tensor out, gc_tensor self, gc_tensor end, scalar weight);
raw_tensor atg_lerp_tensor(gc_tensor self, gc_tensor end, gc_tensor weight);
raw_tensor atg_lerp_tensor_(gc_tensor self, gc_tensor end, gc_tensor weight);
raw_tensor atg_lerp_tensor_out(gc_tensor out, gc_tensor self, gc_tensor end, gc_tensor weight);
raw_tensor atg_less(gc_tensor self, scalar other);
raw_tensor atg_less_(gc_tensor self, scalar other);
raw_tensor atg_less_equal(gc_tensor self, scalar other);
raw_tensor atg_less_equal_(gc_tensor self, scalar other);
raw_tensor atg_less_equal_scalar_out(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg_less_equal_tensor(gc_tensor self, gc_tensor other);
raw_tensor atg_less_equal_tensor_(gc_tensor self, gc_tensor other);
raw_tensor atg_less_equal_tensor_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_less_scalar_out(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg_less_tensor(gc_tensor self, gc_tensor other);
raw_tensor atg_less_tensor_(gc_tensor self, gc_tensor other);
raw_tensor atg_less_tensor_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_lgamma(gc_tensor self);
raw_tensor atg_lgamma_(gc_tensor self);
raw_tensor atg_lgamma_out(gc_tensor out, gc_tensor self);
raw_tensor atg_lift(gc_tensor self);
raw_tensor atg_lift_fresh(gc_tensor self);
raw_tensor atg_lift_fresh_copy(gc_tensor self);
raw_tensor atg_lift_fresh_copy_out(gc_tensor out, gc_tensor self);
raw_tensor atg_lift_out(gc_tensor out, gc_tensor self);
raw_tensor atg_linalg_cholesky(gc_tensor self, int upper);
void atg_linalg_cholesky_ex(raw_tensor *, gc_tensor self, int upper, int check_errors);
void atg_linalg_cholesky_ex_l(raw_tensor *, gc_tensor L, gc_tensor info, gc_tensor self, int upper, int check_errors);
raw_tensor atg_linalg_cholesky_out(gc_tensor out, gc_tensor self, int upper);
raw_tensor atg_linalg_cond(gc_tensor self, scalar p);
raw_tensor atg_linalg_cond_out(gc_tensor out, gc_tensor self, scalar p);
raw_tensor atg_linalg_cond_p_str(gc_tensor self, char * p);
raw_tensor atg_linalg_cond_p_str_out(gc_tensor out, gc_tensor self, char * p);
raw_tensor atg_linalg_cross(gc_tensor self, gc_tensor other, int64_t dim);
raw_tensor atg_linalg_cross_out(gc_tensor out, gc_tensor self, gc_tensor other, int64_t dim);
raw_tensor atg_linalg_det(gc_tensor A);
raw_tensor atg_linalg_det_out(gc_tensor out, gc_tensor A);
raw_tensor atg_linalg_diagonal(gc_tensor A, int64_t offset, int64_t dim1, int64_t dim2);
void atg_linalg_eig(raw_tensor *, gc_tensor self);
void atg_linalg_eig_out(raw_tensor *, gc_tensor eigenvalues, gc_tensor eigenvectors, gc_tensor self);
void atg_linalg_eigh(raw_tensor *, gc_tensor self, char * UPLO);
void atg_linalg_eigh_eigvals(raw_tensor *, gc_tensor eigvals, gc_tensor eigvecs, gc_tensor self, char * UPLO);
raw_tensor atg_linalg_eigvals(gc_tensor self);
raw_tensor atg_linalg_eigvals_out(gc_tensor out, gc_tensor self);
raw_tensor atg_linalg_eigvalsh(gc_tensor self, char * UPLO);
raw_tensor atg_linalg_eigvalsh_out(gc_tensor out, gc_tensor self, char * UPLO);
raw_tensor atg_linalg_householder_product(gc_tensor input, gc_tensor tau);
raw_tensor atg_linalg_householder_product_out(gc_tensor out, gc_tensor input, gc_tensor tau);
raw_tensor atg_linalg_inv(gc_tensor A);
void atg_linalg_inv_ex(raw_tensor *, gc_tensor A, int check_errors);
void atg_linalg_inv_ex_inverse(raw_tensor *, gc_tensor inverse, gc_tensor info, gc_tensor A, int check_errors);
raw_tensor atg_linalg_inv_out(gc_tensor out, gc_tensor A);
void atg_linalg_ldl_factor(raw_tensor *, gc_tensor self, int hermitian);
void atg_linalg_ldl_factor_ex(raw_tensor *, gc_tensor self, int hermitian, int check_errors);
void atg_linalg_ldl_factor_ex_out(raw_tensor *, gc_tensor LD, gc_tensor pivots, gc_tensor info, gc_tensor self, int hermitian, int check_errors);
void atg_linalg_ldl_factor_out(raw_tensor *, gc_tensor LD, gc_tensor pivots, gc_tensor self, int hermitian);
raw_tensor atg_linalg_ldl_solve(gc_tensor LD, gc_tensor pivots, gc_tensor B, int hermitian);
raw_tensor atg_linalg_ldl_solve_out(gc_tensor out, gc_tensor LD, gc_tensor pivots, gc_tensor B, int hermitian);
void atg_linalg_lstsq(raw_tensor *, gc_tensor self, gc_tensor b, double rcond_v, int rcond_null, char * driver_v, int driver_null);
void atg_linalg_lstsq_out(raw_tensor *, gc_tensor solution, gc_tensor residuals, gc_tensor rank, gc_tensor singular_values, gc_tensor self, gc_tensor b, double rcond_v, int rcond_null, char * driver_v, int driver_null);
void atg_linalg_lu(raw_tensor *, gc_tensor A, int pivot);
void atg_linalg_lu_factor(raw_tensor *, gc_tensor A, int pivot);
void atg_linalg_lu_factor_ex(raw_tensor *, gc_tensor A, int pivot, int check_errors);
void atg_linalg_lu_factor_ex_out(raw_tensor *, gc_tensor LU, gc_tensor pivots, gc_tensor info, gc_tensor A, int pivot, int check_errors);
void atg_linalg_lu_factor_out(raw_tensor *, gc_tensor LU, gc_tensor pivots, gc_tensor A, int pivot);
void atg_linalg_lu_out(raw_tensor *, gc_tensor P, gc_tensor L, gc_tensor U, gc_tensor A, int pivot);
raw_tensor atg_linalg_lu_solve(gc_tensor LU, gc_tensor pivots, gc_tensor B, int left, int adjoint);
raw_tensor atg_linalg_lu_solve_out(gc_tensor out, gc_tensor LU, gc_tensor pivots, gc_tensor B, int left, int adjoint);
raw_tensor atg_linalg_matmul(gc_tensor self, gc_tensor other);
raw_tensor atg_linalg_matmul_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_linalg_matrix_exp(gc_tensor self);
raw_tensor atg_linalg_matrix_exp_out(gc_tensor out, gc_tensor self);
raw_tensor atg_linalg_matrix_power(gc_tensor self, int64_t n);
raw_tensor atg_linalg_matrix_power_out(gc_tensor out, gc_tensor self, int64_t n);
raw_tensor atg_linalg_matrix_rank(gc_tensor self, double tol, int hermitian);
raw_tensor atg_linalg_matrix_rank_atol_rtol_float(gc_tensor self, double atol_v, int atol_null, double rtol_v, int rtol_null, int hermitian);
raw_tensor atg_linalg_matrix_rank_atol_rtol_float_out(gc_tensor out, gc_tensor self, double atol_v, int atol_null, double rtol_v, int rtol_null, int hermitian);
raw_tensor atg_linalg_matrix_rank_atol_rtol_tensor(gc_tensor input, gc_tensor atol, gc_tensor rtol, int hermitian);
raw_tensor atg_linalg_matrix_rank_atol_rtol_tensor_out(gc_tensor out, gc_tensor input, gc_tensor atol, gc_tensor rtol, int hermitian);
raw_tensor atg_linalg_matrix_rank_out(gc_tensor out, gc_tensor self, double tol, int hermitian);
raw_tensor atg_linalg_matrix_rank_out_tol_tensor(gc_tensor out, gc_tensor input, gc_tensor tol, int hermitian);
raw_tensor atg_linalg_matrix_rank_tol_tensor(gc_tensor input, gc_tensor tol, int hermitian);
raw_tensor atg_linalg_multi_dot(gc_tensor *tensors_data, int tensors_len);
raw_tensor atg_linalg_multi_dot_out(gc_tensor out, gc_tensor *tensors_data, int tensors_len);
raw_tensor atg_linalg_pinv(gc_tensor self, double rcond, int hermitian);
raw_tensor atg_linalg_pinv_atol_rtol_float(gc_tensor self, double atol_v, int atol_null, double rtol_v, int rtol_null, int hermitian);
raw_tensor atg_linalg_pinv_atol_rtol_float_out(gc_tensor out, gc_tensor self, double atol_v, int atol_null, double rtol_v, int rtol_null, int hermitian);
raw_tensor atg_linalg_pinv_atol_rtol_tensor(gc_tensor self, gc_tensor atol, gc_tensor rtol, int hermitian);
raw_tensor atg_linalg_pinv_atol_rtol_tensor_out(gc_tensor out, gc_tensor self, gc_tensor atol, gc_tensor rtol, int hermitian);
raw_tensor atg_linalg_pinv_out(gc_tensor out, gc_tensor self, double rcond, int hermitian);
raw_tensor atg_linalg_pinv_out_rcond_tensor(gc_tensor out, gc_tensor self, gc_tensor rcond, int hermitian);
raw_tensor atg_linalg_pinv_rcond_tensor(gc_tensor self, gc_tensor rcond, int hermitian);
void atg_linalg_qr(raw_tensor *, gc_tensor A, char * mode);
void atg_linalg_qr_out(raw_tensor *, gc_tensor Q, gc_tensor R, gc_tensor A, char * mode);
void atg_linalg_slogdet(raw_tensor *, gc_tensor A);
void atg_linalg_slogdet_out(raw_tensor *, gc_tensor sign, gc_tensor logabsdet, gc_tensor A);
raw_tensor atg_linalg_solve(gc_tensor A, gc_tensor B, int left);
void atg_linalg_solve_ex(raw_tensor *, gc_tensor A, gc_tensor B, int left, int check_errors);
void atg_linalg_solve_ex_out(raw_tensor *, gc_tensor result, gc_tensor info, gc_tensor A, gc_tensor B, int left, int check_errors);
raw_tensor atg_linalg_solve_out(gc_tensor out, gc_tensor A, gc_tensor B, int left);
raw_tensor atg_linalg_solve_triangular(gc_tensor self, gc_tensor B, int upper, int left, int unitriangular);
raw_tensor atg_linalg_solve_triangular_out(gc_tensor out, gc_tensor self, gc_tensor B, int upper, int left, int unitriangular);
void atg_linalg_svd(raw_tensor *, gc_tensor A, int full_matrices, char * driver_v, int driver_null);
void atg_linalg_svd_u(raw_tensor *, gc_tensor U, gc_tensor S, gc_tensor Vh, gc_tensor A, int full_matrices, char * driver_v, int driver_null);
raw_tensor atg_linalg_svdvals(gc_tensor A, char * driver_v, int driver_null);
raw_tensor atg_linalg_svdvals_out(gc_tensor out, gc_tensor A, char * driver_v, int driver_null);
raw_tensor atg_linalg_tensorinv(gc_tensor self, int64_t ind);
raw_tensor atg_linalg_tensorinv_out(gc_tensor out, gc_tensor self, int64_t ind);
raw_tensor atg_linalg_tensorsolve(gc_tensor self, gc_tensor other, int64_t *dims_data, int dims_len);
raw_tensor atg_linalg_tensorsolve_out(gc_tensor out, gc_tensor self, gc_tensor other, int64_t *dims_data, int dims_len);
raw_tensor atg_linalg_vander(gc_tensor x, int64_t n_v, int n_null);
raw_tensor atg_linalg_vecdot(gc_tensor x, gc_tensor y, int64_t dim);
raw_tensor atg_linalg_vecdot_out(gc_tensor out, gc_tensor x, gc_tensor y, int64_t dim);
raw_tensor atg_linear(gc_tensor input, gc_tensor weight, gc_tensor bias);
raw_tensor atg_linear_out(gc_tensor out, gc_tensor input, gc_tensor weight, gc_tensor bias);
raw_tensor atg_linspace(scalar start, scalar end, int64_t steps, int options_kind, int options_device);
raw_tensor atg_linspace_out(gc_tensor out, scalar start, scalar end, int64_t steps);
raw_tensor atg_linspace_scalar_tensor(scalar start, gc_tensor end, int64_t steps, int options_kind, int options_device);
raw_tensor atg_linspace_scalar_tensor_out(gc_tensor out, scalar start, gc_tensor end, int64_t steps);
raw_tensor atg_linspace_tensor_scalar(gc_tensor start, scalar end, int64_t steps, int options_kind, int options_device);
raw_tensor atg_linspace_tensor_scalar_out(gc_tensor out, gc_tensor start, scalar end, int64_t steps);
raw_tensor atg_linspace_tensor_tensor(gc_tensor start, gc_tensor end, int64_t steps, int options_kind, int options_device);
raw_tensor atg_linspace_tensor_tensor_out(gc_tensor out, gc_tensor start, gc_tensor end, int64_t steps);
raw_tensor atg_log(gc_tensor self);
raw_tensor atg_log10(gc_tensor self);
raw_tensor atg_log10_(gc_tensor self);
raw_tensor atg_log10_out(gc_tensor out, gc_tensor self);
raw_tensor atg_log1p(gc_tensor self);
raw_tensor atg_log1p_(gc_tensor self);
raw_tensor atg_log1p_out(gc_tensor out, gc_tensor self);
raw_tensor atg_log2(gc_tensor self);
raw_tensor atg_log2_(gc_tensor self);
raw_tensor atg_log2_out(gc_tensor out, gc_tensor self);
raw_tensor atg_log_(gc_tensor self);
raw_tensor atg_log_normal(gc_tensor self, double mean, double std);
raw_tensor atg_log_normal_(gc_tensor self, double mean, double std);
raw_tensor atg_log_normal_out(gc_tensor out, gc_tensor self, double mean, double std);
raw_tensor atg_log_out(gc_tensor out, gc_tensor self);
raw_tensor atg_log_sigmoid(gc_tensor self);
raw_tensor atg_log_sigmoid_backward(gc_tensor grad_output, gc_tensor self, gc_tensor buffer);
raw_tensor atg_log_sigmoid_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, gc_tensor buffer);
raw_tensor atg_log_sigmoid_out(gc_tensor out, gc_tensor self);
raw_tensor atg_log_softmax(gc_tensor self, int64_t dim, int dtype);
raw_tensor atg_log_softmax_int_out(gc_tensor out, gc_tensor self, int64_t dim, int dtype);
raw_tensor atg_logaddexp(gc_tensor self, gc_tensor other);
raw_tensor atg_logaddexp2(gc_tensor self, gc_tensor other);
raw_tensor atg_logaddexp2_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_logaddexp_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_logcumsumexp(gc_tensor self, int64_t dim);
raw_tensor atg_logcumsumexp_out(gc_tensor out, gc_tensor self, int64_t dim);
raw_tensor atg_logdet(gc_tensor self);
raw_tensor atg_logical_and(gc_tensor self, gc_tensor other);
raw_tensor atg_logical_and_(gc_tensor self, gc_tensor other);
raw_tensor atg_logical_and_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_logical_not(gc_tensor self);
raw_tensor atg_logical_not_(gc_tensor self);
raw_tensor atg_logical_not_out(gc_tensor out, gc_tensor self);
raw_tensor atg_logical_or(gc_tensor self, gc_tensor other);
raw_tensor atg_logical_or_(gc_tensor self, gc_tensor other);
raw_tensor atg_logical_or_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_logical_xor(gc_tensor self, gc_tensor other);
raw_tensor atg_logical_xor_(gc_tensor self, gc_tensor other);
raw_tensor atg_logical_xor_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_logit(gc_tensor self, double eps_v, int eps_null);
raw_tensor atg_logit_(gc_tensor self, double eps_v, int eps_null);
raw_tensor atg_logit_backward(gc_tensor grad_output, gc_tensor self, double eps_v, int eps_null);
raw_tensor atg_logit_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, double eps_v, int eps_null);
raw_tensor atg_logit_out(gc_tensor out, gc_tensor self, double eps_v, int eps_null);
raw_tensor atg_logspace(scalar start, scalar end, int64_t steps, double base, int options_kind, int options_device);
raw_tensor atg_logspace_out(gc_tensor out, scalar start, scalar end, int64_t steps, double base);
raw_tensor atg_logspace_scalar_tensor(scalar start, gc_tensor end, int64_t steps, double base, int options_kind, int options_device);
raw_tensor atg_logspace_scalar_tensor_out(gc_tensor out, scalar start, gc_tensor end, int64_t steps, double base);
raw_tensor atg_logspace_tensor_scalar(gc_tensor start, scalar end, int64_t steps, double base, int options_kind, int options_device);
raw_tensor atg_logspace_tensor_scalar_out(gc_tensor out, gc_tensor start, scalar end, int64_t steps, double base);
raw_tensor atg_logspace_tensor_tensor(gc_tensor start, gc_tensor end, int64_t steps, double base, int options_kind, int options_device);
raw_tensor atg_logspace_tensor_tensor_out(gc_tensor out, gc_tensor start, gc_tensor end, int64_t steps, double base);
raw_tensor atg_logsumexp(gc_tensor self, int64_t *dim_data, int dim_len, int keepdim);
raw_tensor atg_logsumexp_out(gc_tensor out, gc_tensor self, int64_t *dim_data, int dim_len, int keepdim);
void atg_lstm(raw_tensor *, gc_tensor input, gc_tensor *hx_data, int hx_len, gc_tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional, int batch_first);
void atg_lstm_cell(raw_tensor *, gc_tensor input, gc_tensor *hx_data, int hx_len, gc_tensor w_ih, gc_tensor w_hh, gc_tensor b_ih, gc_tensor b_hh);
void atg_lstm_data(raw_tensor *, gc_tensor data, gc_tensor batch_sizes, gc_tensor *hx_data, int hx_len, gc_tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional);
void atg_lstm_mps_backward(gc_tensor out0, gc_tensor *out1_data, int out1_len, gc_tensor *out2_data, int out2_len, gc_tensor grad_y, gc_tensor grad_hy, gc_tensor grad_cy, gc_tensor z_state, gc_tensor cell_state_fwd, gc_tensor input, gc_tensor layersOutputs, gc_tensor *hx_data, int hx_len, gc_tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional, int batch_first);
raw_tensor atg_lt(gc_tensor self, scalar other);
raw_tensor atg_lt_(gc_tensor self, scalar other);
raw_tensor atg_lt_scalar_out(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg_lt_tensor(gc_tensor self, gc_tensor other);
raw_tensor atg_lt_tensor_(gc_tensor self, gc_tensor other);
raw_tensor atg_lt_tensor_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_lu_solve(gc_tensor self, gc_tensor LU_data, gc_tensor LU_pivots);
raw_tensor atg_lu_solve_out(gc_tensor out, gc_tensor self, gc_tensor LU_data, gc_tensor LU_pivots);
void atg_lu_unpack(raw_tensor *, gc_tensor LU_data, gc_tensor LU_pivots, int unpack_data, int unpack_pivots);
void atg_lu_unpack_out(raw_tensor *, gc_tensor P, gc_tensor L, gc_tensor U, gc_tensor LU_data, gc_tensor LU_pivots, int unpack_data, int unpack_pivots);
raw_tensor atg_margin_ranking_loss(gc_tensor input1, gc_tensor input2, gc_tensor target, double margin, int64_t reduction);
raw_tensor atg_masked_fill(gc_tensor self, gc_tensor mask, scalar value);
raw_tensor atg_masked_fill_(gc_tensor self, gc_tensor mask, scalar value);
raw_tensor atg_masked_fill_scalar_out(gc_tensor out, gc_tensor self, gc_tensor mask, scalar value);
raw_tensor atg_masked_fill_tensor(gc_tensor self, gc_tensor mask, gc_tensor value);
raw_tensor atg_masked_fill_tensor_(gc_tensor self, gc_tensor mask, gc_tensor value);
raw_tensor atg_masked_fill_tensor_out(gc_tensor out, gc_tensor self, gc_tensor mask, gc_tensor value);
raw_tensor atg_masked_scatter(gc_tensor self, gc_tensor mask, gc_tensor source);
raw_tensor atg_masked_scatter_(gc_tensor self, gc_tensor mask, gc_tensor source);
raw_tensor atg_masked_scatter_backward(gc_tensor grad_output, gc_tensor mask, int64_t *sizes_data, int sizes_len);
raw_tensor atg_masked_scatter_out(gc_tensor out, gc_tensor self, gc_tensor mask, gc_tensor source);
raw_tensor atg_masked_select(gc_tensor self, gc_tensor mask);
raw_tensor atg_masked_select_backward(gc_tensor grad, gc_tensor input, gc_tensor mask);
raw_tensor atg_masked_select_out(gc_tensor out, gc_tensor self, gc_tensor mask);
raw_tensor atg_matmul(gc_tensor self, gc_tensor other);
raw_tensor atg_matmul_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_matrix_exp(gc_tensor self);
raw_tensor atg_matrix_exp_backward(gc_tensor self, gc_tensor grad);
raw_tensor atg_matrix_h(gc_tensor self);
raw_tensor atg_matrix_power(gc_tensor self, int64_t n);
raw_tensor atg_matrix_power_out(gc_tensor out, gc_tensor self, int64_t n);
raw_tensor atg_max(gc_tensor self);
void atg_max_dim(raw_tensor *, gc_tensor self, int64_t dim, int keepdim);
void atg_max_dim_max(raw_tensor *, gc_tensor max, gc_tensor max_values, gc_tensor self, int64_t dim, int keepdim);
raw_tensor atg_max_other(gc_tensor self, gc_tensor other);
raw_tensor atg_max_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_max_pool1d(gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
void atg_max_pool1d_with_indices(raw_tensor *, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
raw_tensor atg_max_pool2d(gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
raw_tensor atg_max_pool2d_backward(gc_tensor grad_output, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
raw_tensor atg_max_pool2d_backward_out(gc_tensor out, gc_tensor grad_output, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
void atg_max_pool2d_with_indices(raw_tensor *, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
raw_tensor atg_max_pool2d_with_indices_backward(gc_tensor grad_output, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode, gc_tensor indices);
raw_tensor atg_max_pool2d_with_indices_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode, gc_tensor indices);
void atg_max_pool2d_with_indices_out(raw_tensor *, gc_tensor out, gc_tensor indices, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
raw_tensor atg_max_pool3d(gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
void atg_max_pool3d_with_indices(raw_tensor *, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
raw_tensor atg_max_pool3d_with_indices_backward(gc_tensor grad_output, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode, gc_tensor indices);
raw_tensor atg_max_pool3d_with_indices_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode, gc_tensor indices);
void atg_max_pool3d_with_indices_out(raw_tensor *, gc_tensor out, gc_tensor indices, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
raw_tensor atg_max_unary_out(gc_tensor out, gc_tensor self);
raw_tensor atg_max_unpool2d(gc_tensor self, gc_tensor indices, int64_t *output_size_data, int output_size_len);
raw_tensor atg_max_unpool2d_out(gc_tensor out, gc_tensor self, gc_tensor indices, int64_t *output_size_data, int output_size_len);
raw_tensor atg_max_unpool3d(gc_tensor self, gc_tensor indices, int64_t *output_size_data, int output_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len);
raw_tensor atg_max_unpool3d_out(gc_tensor out, gc_tensor self, gc_tensor indices, int64_t *output_size_data, int output_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len);
raw_tensor atg_maximum(gc_tensor self, gc_tensor other);
raw_tensor atg_maximum_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_mean(gc_tensor self, int dtype);
raw_tensor atg_mean_dim(gc_tensor self, int64_t *dim_data, int dim_len, int keepdim, int dtype);
raw_tensor atg_mean_dtype_out(gc_tensor out, gc_tensor self, int dtype);
raw_tensor atg_mean_out(gc_tensor out, gc_tensor self, int64_t *dim_data, int dim_len, int keepdim, int dtype);
raw_tensor atg_median(gc_tensor self);
void atg_median_dim(raw_tensor *, gc_tensor self, int64_t dim, int keepdim);
void atg_median_dim_values(raw_tensor *, gc_tensor values, gc_tensor indices, gc_tensor self, int64_t dim, int keepdim);
raw_tensor atg_median_out(gc_tensor out, gc_tensor self);
raw_tensor *atg_meshgrid(gc_tensor *tensors_data, int tensors_len);
raw_tensor *atg_meshgrid_indexing(gc_tensor *tensors_data, int tensors_len, char * indexing);
raw_tensor atg_mh(gc_tensor self);
raw_tensor atg_min(gc_tensor self);
void atg_min_dim(raw_tensor *, gc_tensor self, int64_t dim, int keepdim);
void atg_min_dim_min(raw_tensor *, gc_tensor min, gc_tensor min_indices, gc_tensor self, int64_t dim, int keepdim);
raw_tensor atg_min_other(gc_tensor self, gc_tensor other);
raw_tensor atg_min_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_min_unary_out(gc_tensor out, gc_tensor self);
raw_tensor atg_minimum(gc_tensor self, gc_tensor other);
raw_tensor atg_minimum_out(gc_tensor out, gc_tensor self, gc_tensor other);
void atg_miopen_batch_norm(raw_tensor *, gc_tensor input, gc_tensor weight, gc_tensor bias, gc_tensor running_mean, gc_tensor running_var, int training, double exponential_average_factor, double epsilon);
void atg_miopen_batch_norm_backward(raw_tensor *, gc_tensor input, gc_tensor grad_output, gc_tensor weight, gc_tensor running_mean, gc_tensor running_var, gc_tensor save_mean, gc_tensor save_var, double epsilon);
void atg_miopen_batch_norm_backward_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor out2, gc_tensor input, gc_tensor grad_output, gc_tensor weight, gc_tensor running_mean, gc_tensor running_var, gc_tensor save_mean, gc_tensor save_var, double epsilon);
void atg_miopen_batch_norm_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor out2, gc_tensor input, gc_tensor weight, gc_tensor bias, gc_tensor running_mean, gc_tensor running_var, int training, double exponential_average_factor, double epsilon);
raw_tensor atg_miopen_convolution(gc_tensor self, gc_tensor weight, gc_tensor bias, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
raw_tensor atg_miopen_convolution_add_relu(gc_tensor self, gc_tensor weight, gc_tensor z, scalar alpha, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int64_t groups);
raw_tensor atg_miopen_convolution_out(gc_tensor out, gc_tensor self, gc_tensor weight, gc_tensor bias, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
raw_tensor atg_miopen_convolution_relu(gc_tensor self, gc_tensor weight, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int64_t groups);
raw_tensor atg_miopen_convolution_transpose(gc_tensor self, gc_tensor weight, gc_tensor bias, int64_t *padding_data, int padding_len, int64_t *output_padding_data, int output_padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
raw_tensor atg_miopen_convolution_transpose_out(gc_tensor out, gc_tensor self, gc_tensor weight, gc_tensor bias, int64_t *padding_data, int padding_len, int64_t *output_padding_data, int output_padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
raw_tensor atg_miopen_depthwise_convolution(gc_tensor self, gc_tensor weight, gc_tensor bias, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
raw_tensor atg_miopen_depthwise_convolution_out(gc_tensor out, gc_tensor self, gc_tensor weight, gc_tensor bias, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
void atg_miopen_rnn(raw_tensor *, gc_tensor input, gc_tensor *weight_data, int weight_len, int64_t weight_stride0, gc_tensor hx, gc_tensor cx, int64_t mode, int64_t hidden_size, int64_t num_layers, int batch_first, double dropout, int train, int bidirectional, int64_t *batch_sizes_data, int batch_sizes_len, gc_tensor dropout_state);
void atg_miopen_rnn_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor out2, gc_tensor out3, gc_tensor out4, gc_tensor input, gc_tensor *weight_data, int weight_len, int64_t weight_stride0, gc_tensor hx, gc_tensor cx, int64_t mode, int64_t hidden_size, int64_t num_layers, int batch_first, double dropout, int train, int bidirectional, int64_t *batch_sizes_data, int batch_sizes_len, gc_tensor dropout_state);
raw_tensor atg_mish(gc_tensor self);
raw_tensor atg_mish_(gc_tensor self);
raw_tensor atg_mish_backward(gc_tensor grad_output, gc_tensor self);
raw_tensor atg_mish_out(gc_tensor out, gc_tensor self);
raw_tensor atg_mkldnn_adaptive_avg_pool2d(gc_tensor self, int64_t *output_size_data, int output_size_len);
raw_tensor atg_mkldnn_adaptive_avg_pool2d_backward(gc_tensor grad_output, gc_tensor self);
raw_tensor atg_mkldnn_adaptive_avg_pool2d_backward_out(gc_tensor out, gc_tensor grad_output, gc_tensor self);
raw_tensor atg_mkldnn_adaptive_avg_pool2d_out(gc_tensor out, gc_tensor self, int64_t *output_size_data, int output_size_len);
raw_tensor atg_mkldnn_convolution(gc_tensor self, gc_tensor weight, gc_tensor bias, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups);
raw_tensor atg_mkldnn_convolution_out(gc_tensor out, gc_tensor self, gc_tensor weight, gc_tensor bias, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups);
raw_tensor atg_mkldnn_linear(gc_tensor self, gc_tensor weight, gc_tensor bias);
raw_tensor atg_mkldnn_linear_backward_input(int64_t *input_size_data, int input_size_len, gc_tensor grad_output, gc_tensor weight);
raw_tensor atg_mkldnn_linear_backward_input_out(gc_tensor out, int64_t *input_size_data, int input_size_len, gc_tensor grad_output, gc_tensor weight);
void atg_mkldnn_linear_backward_weights(raw_tensor *, gc_tensor grad_output, gc_tensor input, gc_tensor weight, int bias_defined);
void atg_mkldnn_linear_backward_weights_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor grad_output, gc_tensor input, gc_tensor weight, int bias_defined);
raw_tensor atg_mkldnn_linear_out(gc_tensor out, gc_tensor self, gc_tensor weight, gc_tensor bias);
raw_tensor atg_mkldnn_max_pool2d(gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
raw_tensor atg_mkldnn_max_pool2d_backward(gc_tensor grad_output, gc_tensor output, gc_tensor input, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
raw_tensor atg_mkldnn_max_pool2d_backward_out(gc_tensor out, gc_tensor grad_output, gc_tensor output, gc_tensor input, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
raw_tensor atg_mkldnn_max_pool2d_out(gc_tensor out, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
raw_tensor atg_mkldnn_max_pool3d(gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
raw_tensor atg_mkldnn_max_pool3d_backward(gc_tensor grad_output, gc_tensor output, gc_tensor input, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
raw_tensor atg_mkldnn_max_pool3d_backward_out(gc_tensor out, gc_tensor grad_output, gc_tensor output, gc_tensor input, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
raw_tensor atg_mkldnn_max_pool3d_out(gc_tensor out, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
raw_tensor atg_mkldnn_reorder_conv2d_weight(gc_tensor self, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int64_t *input_size_data, int input_size_len);
raw_tensor atg_mkldnn_reorder_conv2d_weight_out(gc_tensor out, gc_tensor self, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int64_t *input_size_data, int input_size_len);
raw_tensor atg_mkldnn_reorder_conv3d_weight(gc_tensor self, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int64_t *input_size_data, int input_size_len);
raw_tensor atg_mkldnn_reorder_conv3d_weight_out(gc_tensor out, gc_tensor self, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int64_t *input_size_data, int input_size_len);
void atg_mkldnn_rnn_layer(raw_tensor *, gc_tensor input, gc_tensor weight0, gc_tensor weight1, gc_tensor weight2, gc_tensor weight3, gc_tensor hx_, gc_tensor cx_, int reverse, int64_t *batch_sizes_data, int batch_sizes_len, int64_t mode, int64_t hidden_size, int64_t num_layers, int has_biases, int bidirectional, int batch_first, int train);
void atg_mkldnn_rnn_layer_backward(raw_tensor *, gc_tensor input, gc_tensor weight1, gc_tensor weight2, gc_tensor weight3, gc_tensor weight4, gc_tensor hx_, gc_tensor cx_tmp, gc_tensor output, gc_tensor hy_, gc_tensor cy_, gc_tensor grad_output, gc_tensor grad_hy, gc_tensor grad_cy, int reverse, int64_t mode, int64_t hidden_size, int64_t num_layers, int has_biases, int train, int bidirectional, int64_t *batch_sizes_data, int batch_sizes_len, int batch_first, gc_tensor workspace);
void atg_mkldnn_rnn_layer_backward_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor out2, gc_tensor out3, gc_tensor out4, gc_tensor out5, gc_tensor out6, gc_tensor input, gc_tensor weight1, gc_tensor weight2, gc_tensor weight3, gc_tensor weight4, gc_tensor hx_, gc_tensor cx_tmp, gc_tensor output, gc_tensor hy_, gc_tensor cy_, gc_tensor grad_output, gc_tensor grad_hy, gc_tensor grad_cy, int reverse, int64_t mode, int64_t hidden_size, int64_t num_layers, int has_biases, int train, int bidirectional, int64_t *batch_sizes_data, int batch_sizes_len, int batch_first, gc_tensor workspace);
void atg_mkldnn_rnn_layer_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor out2, gc_tensor out3, gc_tensor input, gc_tensor weight0, gc_tensor weight1, gc_tensor weight2, gc_tensor weight3, gc_tensor hx_, gc_tensor cx_, int reverse, int64_t *batch_sizes_data, int batch_sizes_len, int64_t mode, int64_t hidden_size, int64_t num_layers, int has_biases, int bidirectional, int batch_first, int train);
raw_tensor atg_mm(gc_tensor self, gc_tensor mat2);
raw_tensor atg_mm_out(gc_tensor out, gc_tensor self, gc_tensor mat2);
void atg_mode(raw_tensor *, gc_tensor self, int64_t dim, int keepdim);
void atg_mode_values(raw_tensor *, gc_tensor values, gc_tensor indices, gc_tensor self, int64_t dim, int keepdim);
raw_tensor atg_moveaxis(gc_tensor self, int64_t *source_data, int source_len, int64_t *destination_data, int destination_len);
raw_tensor atg_moveaxis_int(gc_tensor self, int64_t source, int64_t destination);
raw_tensor atg_movedim(gc_tensor self, int64_t *source_data, int source_len, int64_t *destination_data, int destination_len);
raw_tensor atg_movedim_int(gc_tensor self, int64_t source, int64_t destination);
raw_tensor atg_mse_loss(gc_tensor self, gc_tensor target, int64_t reduction);
raw_tensor atg_mse_loss_backward(gc_tensor grad_output, gc_tensor self, gc_tensor target, int64_t reduction);
raw_tensor atg_mse_loss_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, gc_tensor target, int64_t reduction);
raw_tensor atg_mse_loss_out(gc_tensor out, gc_tensor self, gc_tensor target, int64_t reduction);
raw_tensor atg_msort(gc_tensor self);
raw_tensor atg_msort_out(gc_tensor out, gc_tensor self);
raw_tensor atg_mt(gc_tensor self);
raw_tensor atg_mul(gc_tensor self, gc_tensor other);
raw_tensor atg_mul_(gc_tensor self, gc_tensor other);
raw_tensor atg_mul_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_mul_scalar(gc_tensor self, scalar other);
raw_tensor atg_mul_scalar_(gc_tensor self, scalar other);
raw_tensor atg_mul_scalar_out(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg_multi_margin_loss_backward(gc_tensor grad_output, gc_tensor self, gc_tensor target, scalar p, scalar margin, gc_tensor weight, int64_t reduction);
raw_tensor atg_multi_margin_loss_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, gc_tensor target, scalar p, scalar margin, gc_tensor weight, int64_t reduction);
raw_tensor atg_multilabel_margin_loss(gc_tensor self, gc_tensor target, int64_t reduction);
raw_tensor atg_multilabel_margin_loss_backward(gc_tensor grad_output, gc_tensor self, gc_tensor target, int64_t reduction, gc_tensor is_target);
raw_tensor atg_multilabel_margin_loss_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, gc_tensor target, int64_t reduction, gc_tensor is_target);
raw_tensor atg_multilabel_margin_loss_out(gc_tensor out, gc_tensor self, gc_tensor target, int64_t reduction);
raw_tensor atg_multinomial(gc_tensor self, int64_t num_samples, int replacement);
raw_tensor atg_multinomial_out(gc_tensor out, gc_tensor self, int64_t num_samples, int replacement);
raw_tensor atg_multiply(gc_tensor self, gc_tensor other);
raw_tensor atg_multiply_(gc_tensor self, gc_tensor other);
raw_tensor atg_multiply_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_multiply_scalar(gc_tensor self, scalar other);
raw_tensor atg_multiply_scalar_(gc_tensor self, scalar other);
raw_tensor atg_mv(gc_tensor self, gc_tensor vec);
raw_tensor atg_mv_out(gc_tensor out, gc_tensor self, gc_tensor vec);
raw_tensor atg_mvlgamma(gc_tensor self, int64_t p);
raw_tensor atg_mvlgamma_(gc_tensor self, int64_t p);
raw_tensor atg_mvlgamma_out(gc_tensor out, gc_tensor self, int64_t p);
raw_tensor atg_nan_to_num(gc_tensor self, double nan_v, int nan_null, double posinf_v, int posinf_null, double neginf_v, int neginf_null);
raw_tensor atg_nan_to_num_(gc_tensor self, double nan_v, int nan_null, double posinf_v, int posinf_null, double neginf_v, int neginf_null);
raw_tensor atg_nan_to_num_out(gc_tensor out, gc_tensor self, double nan_v, int nan_null, double posinf_v, int posinf_null, double neginf_v, int neginf_null);
raw_tensor atg_nanmean(gc_tensor self, int64_t *dim_data, int dim_len, int keepdim, int dtype);
raw_tensor atg_nanmean_out(gc_tensor out, gc_tensor self, int64_t *dim_data, int dim_len, int keepdim, int dtype);
raw_tensor atg_nanmedian(gc_tensor self);
void atg_nanmedian_dim(raw_tensor *, gc_tensor self, int64_t dim, int keepdim);
void atg_nanmedian_dim_values(raw_tensor *, gc_tensor values, gc_tensor indices, gc_tensor self, int64_t dim, int keepdim);
raw_tensor atg_nanmedian_out(gc_tensor out, gc_tensor self);
raw_tensor atg_nanquantile(gc_tensor self, gc_tensor q, int64_t dim_v, int dim_null, int keepdim, char * interpolation);
raw_tensor atg_nanquantile_out(gc_tensor out, gc_tensor self, gc_tensor q, int64_t dim_v, int dim_null, int keepdim, char * interpolation);
raw_tensor atg_nanquantile_scalar(gc_tensor self, double q, int64_t dim_v, int dim_null, int keepdim, char * interpolation);
raw_tensor atg_nanquantile_scalar_out(gc_tensor out, gc_tensor self, double q, int64_t dim_v, int dim_null, int keepdim, char * interpolation);
raw_tensor atg_nansum(gc_tensor self, int64_t *dim_data, int dim_len, int keepdim, int dtype);
raw_tensor atg_nansum_out(gc_tensor out, gc_tensor self, int64_t *dim_data, int dim_len, int keepdim, int dtype);
raw_tensor atg_narrow(gc_tensor self, int64_t dim, int64_t start, int64_t length);
raw_tensor atg_narrow_copy(gc_tensor self, int64_t dim, int64_t start, int64_t length);
raw_tensor atg_narrow_copy_out(gc_tensor out, gc_tensor self, int64_t dim, int64_t start, int64_t length);
raw_tensor atg_narrow_tensor(gc_tensor self, int64_t dim, gc_tensor start, int64_t length);
void atg_native_batch_norm(raw_tensor *, gc_tensor input, gc_tensor weight, gc_tensor bias, gc_tensor running_mean, gc_tensor running_var, int training, double momentum, double eps);
void atg_native_batch_norm_out(raw_tensor *, gc_tensor out, gc_tensor save_mean, gc_tensor save_invstd, gc_tensor input, gc_tensor weight, gc_tensor bias, gc_tensor running_mean, gc_tensor running_var, int training, double momentum, double eps);
raw_tensor atg_native_channel_shuffle(gc_tensor self, int64_t groups);
void atg_native_dropout(raw_tensor *, gc_tensor input, double p, int train);
raw_tensor atg_native_dropout_backward(gc_tensor grad_output, gc_tensor mask, double scale);
raw_tensor atg_native_dropout_backward_out(gc_tensor out, gc_tensor grad_output, gc_tensor mask, double scale);
void atg_native_dropout_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor input, double p, int train);
void atg_native_group_norm(raw_tensor *, gc_tensor input, gc_tensor weight, gc_tensor bias, int64_t n, int64_t C, int64_t HxW, int64_t group, double eps);
void atg_native_group_norm_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor out2, gc_tensor input, gc_tensor weight, gc_tensor bias, int64_t n, int64_t C, int64_t HxW, int64_t group, double eps);
void atg_native_layer_norm(raw_tensor *, gc_tensor input, int64_t *normalized_shape_data, int normalized_shape_len, gc_tensor weight, gc_tensor bias, double eps);
void atg_native_layer_norm_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor out2, gc_tensor input, int64_t *normalized_shape_data, int normalized_shape_len, gc_tensor weight, gc_tensor bias, double eps);
raw_tensor atg_native_norm(gc_tensor self);
raw_tensor atg_native_norm_out(gc_tensor out, gc_tensor self);
raw_tensor atg_native_norm_scalaropt_dim_dtype(gc_tensor self, scalar p, int64_t *dim_data, int dim_len, int keepdim, int dtype);
raw_tensor atg_native_norm_scalaropt_dim_dtype_out(gc_tensor out, gc_tensor self, scalar p, int64_t *dim_data, int dim_len, int keepdim, int dtype);
raw_tensor atg_ne(gc_tensor self, scalar other);
raw_tensor atg_ne_(gc_tensor self, scalar other);
raw_tensor atg_ne_scalar_out(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg_ne_tensor(gc_tensor self, gc_tensor other);
raw_tensor atg_ne_tensor_(gc_tensor self, gc_tensor other);
raw_tensor atg_ne_tensor_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_neg(gc_tensor self);
raw_tensor atg_neg_(gc_tensor self);
raw_tensor atg_neg_out(gc_tensor out, gc_tensor self);
raw_tensor atg_negative(gc_tensor self);
raw_tensor atg_negative_(gc_tensor self);
raw_tensor atg_negative_out(gc_tensor out, gc_tensor self);
raw_tensor atg_nested_to_padded_tensor(gc_tensor self, double padding, int64_t *output_size_data, int output_size_len);
raw_tensor atg_new_empty(gc_tensor self, int64_t *size_data, int size_len, int options_kind, int options_device);
raw_tensor atg_new_empty_out(gc_tensor out, gc_tensor self, int64_t *size_data, int size_len);
raw_tensor atg_new_empty_strided(gc_tensor self, int64_t *size_data, int size_len, int64_t *stride_data, int stride_len, int options_kind, int options_device);
raw_tensor atg_new_empty_strided_out(gc_tensor out, gc_tensor self, int64_t *size_data, int size_len, int64_t *stride_data, int stride_len);
raw_tensor atg_new_full(gc_tensor self, int64_t *size_data, int size_len, scalar fill_value, int options_kind, int options_device);
raw_tensor atg_new_full_out(gc_tensor out, gc_tensor self, int64_t *size_data, int size_len, scalar fill_value);
raw_tensor atg_new_ones(gc_tensor self, int64_t *size_data, int size_len, int options_kind, int options_device);
raw_tensor atg_new_ones_out(gc_tensor out, gc_tensor self, int64_t *size_data, int size_len);
raw_tensor atg_new_zeros(gc_tensor self, int64_t *size_data, int size_len, int options_kind, int options_device);
raw_tensor atg_new_zeros_out(gc_tensor out, gc_tensor self, int64_t *size_data, int size_len);
raw_tensor atg_nextafter(gc_tensor self, gc_tensor other);
raw_tensor atg_nextafter_(gc_tensor self, gc_tensor other);
raw_tensor atg_nextafter_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_nll_loss(gc_tensor self, gc_tensor target, gc_tensor weight, int64_t reduction, int64_t ignore_index);
raw_tensor atg_nll_loss2d(gc_tensor self, gc_tensor target, gc_tensor weight, int64_t reduction, int64_t ignore_index);
raw_tensor atg_nll_loss2d_backward(gc_tensor grad_output, gc_tensor self, gc_tensor target, gc_tensor weight, int64_t reduction, int64_t ignore_index, gc_tensor total_weight);
raw_tensor atg_nll_loss2d_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, gc_tensor target, gc_tensor weight, int64_t reduction, int64_t ignore_index, gc_tensor total_weight);
raw_tensor atg_nll_loss2d_out(gc_tensor out, gc_tensor self, gc_tensor target, gc_tensor weight, int64_t reduction, int64_t ignore_index);
raw_tensor atg_nll_loss_backward(gc_tensor grad_output, gc_tensor self, gc_tensor target, gc_tensor weight, int64_t reduction, int64_t ignore_index, gc_tensor total_weight);
raw_tensor atg_nll_loss_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, gc_tensor target, gc_tensor weight, int64_t reduction, int64_t ignore_index, gc_tensor total_weight);
raw_tensor atg_nll_loss_nd(gc_tensor self, gc_tensor target, gc_tensor weight, int64_t reduction, int64_t ignore_index);
raw_tensor atg_nll_loss_out(gc_tensor out, gc_tensor self, gc_tensor target, gc_tensor weight, int64_t reduction, int64_t ignore_index);
raw_tensor atg_nonzero(gc_tensor self);
raw_tensor *atg_nonzero_numpy(gc_tensor self);
raw_tensor atg_nonzero_out(gc_tensor out, gc_tensor self);
raw_tensor atg_nonzero_static(gc_tensor self, int64_t size, int64_t fill_value);
raw_tensor atg_nonzero_static_out(gc_tensor out, gc_tensor self, int64_t size, int64_t fill_value);
raw_tensor atg_norm(gc_tensor self);
raw_tensor atg_norm_dtype_out(gc_tensor out, gc_tensor self, scalar p, int64_t *dim_data, int dim_len, int keepdim, int dtype);
raw_tensor atg_norm_except_dim(gc_tensor v, int64_t pow, int64_t dim);
raw_tensor atg_norm_out(gc_tensor out, gc_tensor self, scalar p, int64_t *dim_data, int dim_len, int keepdim);
raw_tensor atg_norm_scalar_out(gc_tensor out, gc_tensor self);
raw_tensor atg_norm_scalaropt_dim(gc_tensor self, scalar p, int64_t *dim_data, int dim_len, int keepdim);
raw_tensor atg_norm_scalaropt_dim_dtype(gc_tensor self, scalar p, int64_t *dim_data, int dim_len, int keepdim, int dtype);
raw_tensor atg_norm_scalaropt_dtype(gc_tensor self, scalar p, int dtype);
raw_tensor atg_norm_scalaropt_dtype_out(gc_tensor out, gc_tensor self, scalar p, int dtype);
raw_tensor atg_normal_(gc_tensor self, double mean, double std);
raw_tensor atg_normal_functional(gc_tensor self, double mean, double std);
raw_tensor atg_not_equal(gc_tensor self, scalar other);
raw_tensor atg_not_equal_(gc_tensor self, scalar other);
raw_tensor atg_not_equal_scalar_out(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg_not_equal_tensor(gc_tensor self, gc_tensor other);
raw_tensor atg_not_equal_tensor_(gc_tensor self, gc_tensor other);
raw_tensor atg_not_equal_tensor_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_nuclear_norm(gc_tensor self, int keepdim);
raw_tensor atg_nuclear_norm_dim(gc_tensor self, int64_t *dim_data, int dim_len, int keepdim);
raw_tensor atg_nuclear_norm_dim_out(gc_tensor out, gc_tensor self, int64_t *dim_data, int dim_len, int keepdim);
raw_tensor atg_nuclear_norm_out(gc_tensor out, gc_tensor self, int keepdim);
raw_tensor atg_numpy_t(gc_tensor self);
raw_tensor atg_one_hot(gc_tensor self, int64_t num_classes);
raw_tensor atg_ones(int64_t *size_data, int size_len, int options_kind, int options_device);
raw_tensor atg_ones_like(gc_tensor self);
raw_tensor atg_ones_like_out(gc_tensor out, gc_tensor self);
raw_tensor atg_ones_out(gc_tensor out, int64_t *size_data, int size_len);
raw_tensor atg_orgqr(gc_tensor self, gc_tensor input2);
raw_tensor atg_orgqr_out(gc_tensor out, gc_tensor self, gc_tensor input2);
raw_tensor atg_ormqr(gc_tensor self, gc_tensor input2, gc_tensor input3, int left, int transpose);
raw_tensor atg_ormqr_out(gc_tensor out, gc_tensor self, gc_tensor input2, gc_tensor input3, int left, int transpose);
raw_tensor atg_outer(gc_tensor self, gc_tensor vec2);
raw_tensor atg_outer_out(gc_tensor out, gc_tensor self, gc_tensor vec2);
int64_t atg_output_nr(gc_tensor self);
raw_tensor atg_pad(gc_tensor self, int64_t *pad_data, int pad_len, char * mode, double value_v, int value_null);
raw_tensor atg_pad_sequence(gc_tensor *sequences_data, int sequences_len, int batch_first, double padding_value, char * padding_side);
raw_tensor atg_pairwise_distance(gc_tensor x1, gc_tensor x2, double p, double eps, int keepdim);
raw_tensor atg_pdist(gc_tensor self, double p);
raw_tensor atg_permute(gc_tensor self, int64_t *dims_data, int dims_len);
raw_tensor atg_permute_copy(gc_tensor self, int64_t *dims_data, int dims_len);
raw_tensor atg_permute_copy_out(gc_tensor out, gc_tensor self, int64_t *dims_data, int dims_len);
raw_tensor atg_pin_memory(gc_tensor self, int device);
raw_tensor atg_pinverse(gc_tensor self, double rcond);
raw_tensor atg_pixel_shuffle(gc_tensor self, int64_t upscale_factor);
raw_tensor atg_pixel_shuffle_out(gc_tensor out, gc_tensor self, int64_t upscale_factor);
raw_tensor atg_pixel_unshuffle(gc_tensor self, int64_t downscale_factor);
raw_tensor atg_pixel_unshuffle_out(gc_tensor out, gc_tensor self, int64_t downscale_factor);
raw_tensor atg_poisson(gc_tensor self);
raw_tensor atg_poisson_nll_loss(gc_tensor input, gc_tensor target, int log_input, int full, double eps, int64_t reduction);
raw_tensor atg_poisson_out(gc_tensor out, gc_tensor self);
raw_tensor atg_polar(gc_tensor abs, gc_tensor angle);
raw_tensor atg_polar_out(gc_tensor out, gc_tensor abs, gc_tensor angle);
raw_tensor atg_polygamma(int64_t n, gc_tensor self);
raw_tensor atg_polygamma_(gc_tensor self, int64_t n);
raw_tensor atg_polygamma_out(gc_tensor out, int64_t n, gc_tensor self);
raw_tensor atg_positive(gc_tensor self);
raw_tensor atg_pow(gc_tensor self, gc_tensor exponent);
raw_tensor atg_pow_(gc_tensor self, scalar exponent);
raw_tensor atg_pow_scalar(scalar self, gc_tensor exponent);
raw_tensor atg_pow_scalar_out(gc_tensor out, scalar self, gc_tensor exponent);
raw_tensor atg_pow_tensor_(gc_tensor self, gc_tensor exponent);
raw_tensor atg_pow_tensor_scalar(gc_tensor self, scalar exponent);
raw_tensor atg_pow_tensor_scalar_out(gc_tensor out, gc_tensor self, scalar exponent);
raw_tensor atg_pow_tensor_tensor_out(gc_tensor out, gc_tensor self, gc_tensor exponent);
raw_tensor atg_prelu(gc_tensor self, gc_tensor weight);
raw_tensor atg_prod(gc_tensor self, int dtype);
raw_tensor atg_prod_dim_int(gc_tensor self, int64_t dim, int keepdim, int dtype);
raw_tensor atg_prod_int_out(gc_tensor out, gc_tensor self, int64_t dim, int keepdim, int dtype);
raw_tensor atg_prod_out(gc_tensor out, gc_tensor self, int dtype);
raw_tensor atg_put(gc_tensor self, gc_tensor index, gc_tensor source, int accumulate);
raw_tensor atg_put_(gc_tensor self, gc_tensor index, gc_tensor source, int accumulate);
raw_tensor atg_put_out(gc_tensor out, gc_tensor self, gc_tensor index, gc_tensor source, int accumulate);
int64_t atg_q_per_channel_axis(gc_tensor self);
raw_tensor atg_q_per_channel_scales(gc_tensor self);
raw_tensor atg_q_per_channel_scales_out(gc_tensor out, gc_tensor self);
raw_tensor atg_q_per_channel_zero_points(gc_tensor self);
raw_tensor atg_q_per_channel_zero_points_out(gc_tensor out, gc_tensor self);
double atg_q_scale(gc_tensor self);
int64_t atg_q_zero_point(gc_tensor self);
void atg_qr(raw_tensor *, gc_tensor self, int some);
void atg_qr_q(raw_tensor *, gc_tensor Q, gc_tensor R, gc_tensor self, int some);
raw_tensor atg_quantile(gc_tensor self, gc_tensor q, int64_t dim_v, int dim_null, int keepdim, char * interpolation);
raw_tensor atg_quantile_out(gc_tensor out, gc_tensor self, gc_tensor q, int64_t dim_v, int dim_null, int keepdim, char * interpolation);
raw_tensor atg_quantile_scalar(gc_tensor self, double q, int64_t dim_v, int dim_null, int keepdim, char * interpolation);
raw_tensor atg_quantile_scalar_out(gc_tensor out, gc_tensor self, double q, int64_t dim_v, int dim_null, int keepdim, char * interpolation);
raw_tensor atg_quantize_per_channel(gc_tensor self, gc_tensor scales, gc_tensor zero_points, int64_t axis, int dtype);
raw_tensor atg_quantize_per_channel_out(gc_tensor out, gc_tensor self, gc_tensor scales, gc_tensor zero_points, int64_t axis, int dtype);
raw_tensor atg_quantize_per_tensor(gc_tensor self, double scale, int64_t zero_point, int dtype);
raw_tensor atg_quantize_per_tensor_dynamic(gc_tensor self, int dtype, int reduce_range);
raw_tensor atg_quantize_per_tensor_dynamic_out(gc_tensor out, gc_tensor self, int dtype, int reduce_range);
raw_tensor atg_quantize_per_tensor_out(gc_tensor out, gc_tensor self, double scale, int64_t zero_point, int dtype);
raw_tensor atg_quantize_per_tensor_tensor_qparams(gc_tensor self, gc_tensor scale, gc_tensor zero_point, int dtype);
raw_tensor atg_quantize_per_tensor_tensor_qparams_out(gc_tensor out, gc_tensor self, gc_tensor scale, gc_tensor zero_point, int dtype);
raw_tensor *atg_quantize_per_tensor_tensors(gc_tensor *tensors_data, int tensors_len, gc_tensor scales, gc_tensor zero_points, int dtype);
void atg_quantize_per_tensor_tensors_out(gc_tensor *out_data, int out_len, gc_tensor *tensors_data, int tensors_len, gc_tensor scales, gc_tensor zero_points, int dtype);
raw_tensor atg_quantized_batch_norm(gc_tensor input, gc_tensor weight, gc_tensor bias, gc_tensor mean, gc_tensor var, double eps, double output_scale, int64_t output_zero_point);
raw_tensor atg_quantized_batch_norm_out(gc_tensor out, gc_tensor input, gc_tensor weight, gc_tensor bias, gc_tensor mean, gc_tensor var, double eps, double output_scale, int64_t output_zero_point);
raw_tensor atg_quantized_gru_cell(gc_tensor input, gc_tensor hx, gc_tensor w_ih, gc_tensor w_hh, gc_tensor b_ih, gc_tensor b_hh, gc_tensor packed_ih, gc_tensor packed_hh, gc_tensor col_offsets_ih, gc_tensor col_offsets_hh, scalar scale_ih, scalar scale_hh, scalar zero_point_ih, scalar zero_point_hh);
void atg_quantized_lstm_cell(raw_tensor *, gc_tensor input, gc_tensor *hx_data, int hx_len, gc_tensor w_ih, gc_tensor w_hh, gc_tensor b_ih, gc_tensor b_hh, gc_tensor packed_ih, gc_tensor packed_hh, gc_tensor col_offsets_ih, gc_tensor col_offsets_hh, scalar scale_ih, scalar scale_hh, scalar zero_point_ih, scalar zero_point_hh);
raw_tensor atg_quantized_max_pool1d(gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
raw_tensor atg_quantized_max_pool1d_out(gc_tensor out, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
raw_tensor atg_quantized_max_pool2d(gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
raw_tensor atg_quantized_max_pool2d_out(gc_tensor out, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
raw_tensor atg_quantized_max_pool3d(gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
raw_tensor atg_quantized_max_pool3d_out(gc_tensor out, gc_tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
raw_tensor atg_quantized_rnn_relu_cell(gc_tensor input, gc_tensor hx, gc_tensor w_ih, gc_tensor w_hh, gc_tensor b_ih, gc_tensor b_hh, gc_tensor packed_ih, gc_tensor packed_hh, gc_tensor col_offsets_ih, gc_tensor col_offsets_hh, scalar scale_ih, scalar scale_hh, scalar zero_point_ih, scalar zero_point_hh);
raw_tensor atg_quantized_rnn_tanh_cell(gc_tensor input, gc_tensor hx, gc_tensor w_ih, gc_tensor w_hh, gc_tensor b_ih, gc_tensor b_hh, gc_tensor packed_ih, gc_tensor packed_hh, gc_tensor col_offsets_ih, gc_tensor col_offsets_hh, scalar scale_ih, scalar scale_hh, scalar zero_point_ih, scalar zero_point_hh);
raw_tensor atg_rad2deg(gc_tensor self);
raw_tensor atg_rad2deg_(gc_tensor self);
raw_tensor atg_rad2deg_out(gc_tensor out, gc_tensor self);
raw_tensor atg_rand(int64_t *size_data, int size_len, int options_kind, int options_device);
raw_tensor atg_rand_like(gc_tensor self);
raw_tensor atg_rand_like_out(gc_tensor out, gc_tensor self);
raw_tensor atg_rand_out(gc_tensor out, int64_t *size_data, int size_len);
raw_tensor atg_randint(int64_t high, int64_t *size_data, int size_len, int options_kind, int options_device);
raw_tensor atg_randint_like(gc_tensor self, int64_t high);
raw_tensor atg_randint_like_low_dtype(gc_tensor self, int64_t low, int64_t high);
raw_tensor atg_randint_like_low_dtype_out(gc_tensor out, gc_tensor self, int64_t low, int64_t high);
raw_tensor atg_randint_like_out(gc_tensor out, gc_tensor self, int64_t high);
raw_tensor atg_randint_low(int64_t low, int64_t high, int64_t *size_data, int size_len, int options_kind, int options_device);
raw_tensor atg_randint_low_out(gc_tensor out, int64_t low, int64_t high, int64_t *size_data, int size_len);
raw_tensor atg_randint_out(gc_tensor out, int64_t high, int64_t *size_data, int size_len);
raw_tensor atg_randn(int64_t *size_data, int size_len, int options_kind, int options_device);
raw_tensor atg_randn_like(gc_tensor self);
raw_tensor atg_randn_like_out(gc_tensor out, gc_tensor self);
raw_tensor atg_randn_out(gc_tensor out, int64_t *size_data, int size_len);
raw_tensor atg_random(gc_tensor self);
raw_tensor atg_random_(gc_tensor self);
raw_tensor atg_random_from(gc_tensor self, int64_t from, int64_t to_v, int to_null);
raw_tensor atg_random_from_(gc_tensor self, int64_t from, int64_t to_v, int to_null);
raw_tensor atg_random_from_out(gc_tensor out, gc_tensor self, int64_t from, int64_t to_v, int to_null);
raw_tensor atg_random_out(gc_tensor out, gc_tensor self);
raw_tensor atg_random_to(gc_tensor self, int64_t to);
raw_tensor atg_random_to_(gc_tensor self, int64_t to);
raw_tensor atg_random_to_out(gc_tensor out, gc_tensor self, int64_t to);
raw_tensor atg_randperm(int64_t n, int options_kind, int options_device);
raw_tensor atg_randperm_out(gc_tensor out, int64_t n);
raw_tensor atg_range(scalar start, scalar end, int options_kind, int options_device);
raw_tensor atg_range_out(gc_tensor out, scalar start, scalar end);
raw_tensor atg_range_out_(gc_tensor out, scalar start, scalar end);
raw_tensor atg_range_step(scalar start, scalar end, int options_kind, int options_device);
raw_tensor atg_ravel(gc_tensor self);
raw_tensor atg_real(gc_tensor self);
raw_tensor atg_reciprocal(gc_tensor self);
raw_tensor atg_reciprocal_(gc_tensor self);
raw_tensor atg_reciprocal_out(gc_tensor out, gc_tensor self);
raw_tensor atg_reflection_pad1d(gc_tensor self, int64_t *padding_data, int padding_len);
raw_tensor atg_reflection_pad1d_backward(gc_tensor grad_output, gc_tensor self, int64_t *padding_data, int padding_len);
raw_tensor atg_reflection_pad1d_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, int64_t *padding_data, int padding_len);
raw_tensor atg_reflection_pad1d_out(gc_tensor out, gc_tensor self, int64_t *padding_data, int padding_len);
raw_tensor atg_reflection_pad2d(gc_tensor self, int64_t *padding_data, int padding_len);
raw_tensor atg_reflection_pad2d_backward(gc_tensor grad_output, gc_tensor self, int64_t *padding_data, int padding_len);
raw_tensor atg_reflection_pad2d_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, int64_t *padding_data, int padding_len);
raw_tensor atg_reflection_pad2d_out(gc_tensor out, gc_tensor self, int64_t *padding_data, int padding_len);
raw_tensor atg_reflection_pad3d(gc_tensor self, int64_t *padding_data, int padding_len);
raw_tensor atg_reflection_pad3d_backward(gc_tensor grad_output, gc_tensor self, int64_t *padding_data, int padding_len);
raw_tensor atg_reflection_pad3d_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, int64_t *padding_data, int padding_len);
raw_tensor atg_reflection_pad3d_out(gc_tensor out, gc_tensor self, int64_t *padding_data, int padding_len);
raw_tensor atg_relu(gc_tensor self);
raw_tensor atg_relu6(gc_tensor self);
raw_tensor atg_relu6_(gc_tensor self);
raw_tensor atg_relu_(gc_tensor self);
raw_tensor atg_relu_out(gc_tensor out, gc_tensor self);
raw_tensor atg_remainder(gc_tensor self, scalar other);
raw_tensor atg_remainder_(gc_tensor self, scalar other);
raw_tensor atg_remainder_scalar_out(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg_remainder_scalar_tensor(scalar self, gc_tensor other);
raw_tensor atg_remainder_scalar_tensor_out(gc_tensor out, scalar self, gc_tensor other);
raw_tensor atg_remainder_tensor(gc_tensor self, gc_tensor other);
raw_tensor atg_remainder_tensor_(gc_tensor self, gc_tensor other);
raw_tensor atg_remainder_tensor_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_renorm(gc_tensor self, scalar p, int64_t dim, scalar maxnorm);
raw_tensor atg_renorm_(gc_tensor self, scalar p, int64_t dim, scalar maxnorm);
raw_tensor atg_renorm_out(gc_tensor out, gc_tensor self, scalar p, int64_t dim, scalar maxnorm);
raw_tensor atg_repeat(gc_tensor self, int64_t *repeats_data, int repeats_len);
raw_tensor atg_repeat_interleave(gc_tensor repeats, int64_t output_size_v, int output_size_null);
raw_tensor atg_repeat_interleave_self_int(gc_tensor self, int64_t repeats, int64_t dim_v, int dim_null, int64_t output_size_v, int output_size_null);
raw_tensor atg_repeat_interleave_self_tensor(gc_tensor self, gc_tensor repeats, int64_t dim_v, int dim_null, int64_t output_size_v, int output_size_null);
raw_tensor atg_repeat_interleave_tensor_out(gc_tensor out, gc_tensor repeats, int64_t output_size_v, int output_size_null);
raw_tensor atg_repeat_out(gc_tensor out, gc_tensor self, int64_t *repeats_data, int repeats_len);
raw_tensor atg_replication_pad1d(gc_tensor self, int64_t *padding_data, int padding_len);
raw_tensor atg_replication_pad1d_backward(gc_tensor grad_output, gc_tensor self, int64_t *padding_data, int padding_len);
raw_tensor atg_replication_pad1d_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, int64_t *padding_data, int padding_len);
raw_tensor atg_replication_pad1d_out(gc_tensor out, gc_tensor self, int64_t *padding_data, int padding_len);
raw_tensor atg_replication_pad2d(gc_tensor self, int64_t *padding_data, int padding_len);
raw_tensor atg_replication_pad2d_backward(gc_tensor grad_output, gc_tensor self, int64_t *padding_data, int padding_len);
raw_tensor atg_replication_pad2d_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, int64_t *padding_data, int padding_len);
raw_tensor atg_replication_pad2d_out(gc_tensor out, gc_tensor self, int64_t *padding_data, int padding_len);
raw_tensor atg_replication_pad3d(gc_tensor self, int64_t *padding_data, int padding_len);
raw_tensor atg_replication_pad3d_backward(gc_tensor grad_output, gc_tensor self, int64_t *padding_data, int padding_len);
raw_tensor atg_replication_pad3d_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, int64_t *padding_data, int padding_len);
raw_tensor atg_replication_pad3d_out(gc_tensor out, gc_tensor self, int64_t *padding_data, int padding_len);
raw_tensor atg_requires_grad_(gc_tensor self, int requires_grad);
raw_tensor atg_reshape(gc_tensor self, int64_t *shape_data, int shape_len);
raw_tensor atg_reshape_as(gc_tensor self, gc_tensor other);
raw_tensor atg_resize(gc_tensor self, int64_t *size_data, int size_len);
raw_tensor atg_resize_(gc_tensor self, int64_t *size_data, int size_len);
raw_tensor atg_resize_as(gc_tensor self, gc_tensor the_template);
raw_tensor atg_resize_as_(gc_tensor self, gc_tensor the_template);
raw_tensor atg_resize_as_out(gc_tensor out, gc_tensor self, gc_tensor the_template);
raw_tensor atg_resize_as_sparse(gc_tensor self, gc_tensor the_template);
raw_tensor atg_resize_as_sparse_(gc_tensor self, gc_tensor the_template);
raw_tensor atg_resize_as_sparse_out(gc_tensor out, gc_tensor self, gc_tensor the_template);
raw_tensor atg_resize_out(gc_tensor out, gc_tensor self, int64_t *size_data, int size_len);
raw_tensor atg_resolve_conj(gc_tensor self);
raw_tensor atg_resolve_neg(gc_tensor self);
int atg_retains_grad(gc_tensor self);
raw_tensor atg_rms_norm(gc_tensor input, int64_t *normalized_shape_data, int normalized_shape_len, gc_tensor weight, double eps_v, int eps_null);
void atg_rnn_relu(raw_tensor *, gc_tensor input, gc_tensor hx, gc_tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional, int batch_first);
raw_tensor atg_rnn_relu_cell(gc_tensor input, gc_tensor hx, gc_tensor w_ih, gc_tensor w_hh, gc_tensor b_ih, gc_tensor b_hh);
void atg_rnn_relu_data(raw_tensor *, gc_tensor data, gc_tensor batch_sizes, gc_tensor hx, gc_tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional);
void atg_rnn_tanh(raw_tensor *, gc_tensor input, gc_tensor hx, gc_tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional, int batch_first);
raw_tensor atg_rnn_tanh_cell(gc_tensor input, gc_tensor hx, gc_tensor w_ih, gc_tensor w_hh, gc_tensor b_ih, gc_tensor b_hh);
void atg_rnn_tanh_data(raw_tensor *, gc_tensor data, gc_tensor batch_sizes, gc_tensor hx, gc_tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional);
raw_tensor atg_roll(gc_tensor self, int64_t *shifts_data, int shifts_len, int64_t *dims_data, int dims_len);
raw_tensor atg_roll_out(gc_tensor out, gc_tensor self, int64_t *shifts_data, int shifts_len, int64_t *dims_data, int dims_len);
raw_tensor atg_rot90(gc_tensor self, int64_t k, int64_t *dims_data, int dims_len);
raw_tensor atg_rot90_out(gc_tensor out, gc_tensor self, int64_t k, int64_t *dims_data, int dims_len);
raw_tensor atg_round(gc_tensor self);
raw_tensor atg_round_(gc_tensor self);
raw_tensor atg_round_decimals(gc_tensor self, int64_t decimals);
raw_tensor atg_round_decimals_(gc_tensor self, int64_t decimals);
raw_tensor atg_round_decimals_out(gc_tensor out, gc_tensor self, int64_t decimals);
raw_tensor atg_round_out(gc_tensor out, gc_tensor self);
raw_tensor atg_row_indices(gc_tensor self);
raw_tensor atg_row_indices_copy(gc_tensor self);
raw_tensor atg_row_indices_copy_out(gc_tensor out, gc_tensor self);
raw_tensor atg_row_stack(gc_tensor *tensors_data, int tensors_len);
raw_tensor atg_row_stack_out(gc_tensor out, gc_tensor *tensors_data, int tensors_len);
raw_tensor atg_rrelu(gc_tensor self, int training);
raw_tensor atg_rrelu_(gc_tensor self, int training);
raw_tensor atg_rrelu_with_noise(gc_tensor self, gc_tensor noise, int training);
raw_tensor atg_rrelu_with_noise_(gc_tensor self, gc_tensor noise, int training);
raw_tensor atg_rrelu_with_noise_backward(gc_tensor grad_output, gc_tensor self, gc_tensor noise, scalar lower, scalar upper, int training, int self_is_result);
raw_tensor atg_rrelu_with_noise_backward_out(gc_tensor out, gc_tensor grad_output, gc_tensor self, gc_tensor noise, scalar lower, scalar upper, int training, int self_is_result);
void atg_rrelu_with_noise_functional(raw_tensor *, gc_tensor self, gc_tensor noise, int training);
raw_tensor atg_rrelu_with_noise_out(gc_tensor out, gc_tensor self, gc_tensor noise, int training);
raw_tensor atg_rsqrt(gc_tensor self);
raw_tensor atg_rsqrt_(gc_tensor self);
raw_tensor atg_rsqrt_out(gc_tensor out, gc_tensor self);
raw_tensor atg_rsub(gc_tensor self, gc_tensor other);
raw_tensor atg_rsub_scalar(gc_tensor self, scalar other);
raw_tensor atg_rsub_scalar_out(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg_rsub_tensor_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_scalar_tensor(scalar s, int options_kind, int options_device);
raw_tensor atg_scalar_tensor_out(gc_tensor out, scalar s);
raw_tensor atg_scaled_dot_product_attention(gc_tensor query, gc_tensor key, gc_tensor value, gc_tensor attn_mask, double dropout_p, int is_causal, double scale_v, int scale_null, int enable_gqa);
raw_tensor atg_scatter(gc_tensor self, int64_t dim, gc_tensor index, gc_tensor src);
raw_tensor atg_scatter_(gc_tensor self, int64_t dim, gc_tensor index, gc_tensor src);
raw_tensor atg_scatter_add(gc_tensor self, int64_t dim, gc_tensor index, gc_tensor src);
raw_tensor atg_scatter_add_(gc_tensor self, int64_t dim, gc_tensor index, gc_tensor src);
raw_tensor atg_scatter_add_out(gc_tensor out, gc_tensor self, int64_t dim, gc_tensor index, gc_tensor src);
raw_tensor atg_scatter_reduce(gc_tensor self, int64_t dim, gc_tensor index, gc_tensor src, char * reduce);
raw_tensor atg_scatter_reduce_(gc_tensor self, int64_t dim, gc_tensor index, gc_tensor src, char * reduce);
raw_tensor atg_scatter_reduce_out(gc_tensor out, gc_tensor self, int64_t dim, gc_tensor index, gc_tensor src, char * reduce);
raw_tensor atg_scatter_src_out(gc_tensor out, gc_tensor self, int64_t dim, gc_tensor index, gc_tensor src);
raw_tensor atg_scatter_value(gc_tensor self, int64_t dim, gc_tensor index, scalar value);
raw_tensor atg_scatter_value_(gc_tensor self, int64_t dim, gc_tensor index, scalar value);
raw_tensor atg_scatter_value_out(gc_tensor out, gc_tensor self, int64_t dim, gc_tensor index, scalar value);
raw_tensor atg_scatter_value_reduce(gc_tensor self, int64_t dim, gc_tensor index, scalar value, char * reduce);
raw_tensor atg_scatter_value_reduce_(gc_tensor self, int64_t dim, gc_tensor index, scalar value, char * reduce);
raw_tensor atg_scatter_value_reduce_out(gc_tensor out, gc_tensor self, int64_t dim, gc_tensor index, scalar value, char * reduce);
raw_tensor atg_searchsorted(gc_tensor sorted_sequence, gc_tensor self, int out_int32, int right, char * side_v, int side_null, gc_tensor sorter);
raw_tensor atg_searchsorted_scalar(gc_tensor sorted_sequence, scalar self, int out_int32, int right, char * side_v, int side_null, gc_tensor sorter);
raw_tensor atg_searchsorted_scalar_out(gc_tensor out, gc_tensor sorted_sequence, scalar self, int out_int32, int right, char * side_v, int side_null, gc_tensor sorter);
raw_tensor atg_searchsorted_tensor_out(gc_tensor out, gc_tensor sorted_sequence, gc_tensor self, int out_int32, int right, char * side_v, int side_null, gc_tensor sorter);
raw_tensor atg_segment_reduce(gc_tensor data, char * reduce, gc_tensor lengths, gc_tensor indices, gc_tensor offsets, int64_t axis, int unsafe, scalar initial);
raw_tensor atg_segment_reduce_out(gc_tensor out, gc_tensor data, char * reduce, gc_tensor lengths, gc_tensor indices, gc_tensor offsets, int64_t axis, int unsafe, scalar initial);
raw_tensor atg_select(gc_tensor self, int64_t dim, int64_t index);
raw_tensor atg_select_backward(gc_tensor grad_output, int64_t *input_sizes_data, int input_sizes_len, int64_t dim, int64_t index);
raw_tensor atg_select_backward_out(gc_tensor out, gc_tensor grad_output, int64_t *input_sizes_data, int input_sizes_len, int64_t dim, int64_t index);
raw_tensor atg_select_copy(gc_tensor self, int64_t dim, int64_t index);
raw_tensor atg_select_copy_int_out(gc_tensor out, gc_tensor self, int64_t dim, int64_t index);
raw_tensor atg_select_scatter(gc_tensor self, gc_tensor src, int64_t dim, int64_t index);
raw_tensor atg_select_scatter_out(gc_tensor out, gc_tensor self, gc_tensor src, int64_t dim, int64_t index);
raw_tensor atg_selu(gc_tensor self);
raw_tensor atg_selu_(gc_tensor self);
raw_tensor atg_set(gc_tensor self);
raw_tensor atg_set_(gc_tensor self);
raw_tensor atg_set_out(gc_tensor out, gc_tensor self);
raw_tensor atg_set_requires_grad(gc_tensor self, int r);
raw_tensor atg_set_source_tensor(gc_tensor self, gc_tensor source);
raw_tensor atg_set_source_tensor_(gc_tensor self, gc_tensor source);
raw_tensor atg_set_source_tensor_out(gc_tensor out, gc_tensor self, gc_tensor source);
raw_tensor atg_set_source_tensor_storage_offset_(gc_tensor self, gc_tensor source, int64_t storage_offset, int64_t *size_data, int size_len, int64_t *stride_data, int stride_len);
raw_tensor atg_sgn(gc_tensor self);
raw_tensor atg_sgn_(gc_tensor self);
raw_tensor atg_sgn_out(gc_tensor out, gc_tensor self);
raw_tensor atg_sigmoid(gc_tensor self);
raw_tensor atg_sigmoid_(gc_tensor self);
raw_tensor atg_sigmoid_backward(gc_tensor grad_output, gc_tensor output);
raw_tensor atg_sigmoid_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor output);
raw_tensor atg_sigmoid_out(gc_tensor out, gc_tensor self);
raw_tensor atg_sign(gc_tensor self);
raw_tensor atg_sign_(gc_tensor self);
raw_tensor atg_sign_out(gc_tensor out, gc_tensor self);
raw_tensor atg_signbit(gc_tensor self);
raw_tensor atg_signbit_out(gc_tensor out, gc_tensor self);
raw_tensor atg_silu(gc_tensor self);
raw_tensor atg_silu_(gc_tensor self);
raw_tensor atg_silu_backward(gc_tensor grad_output, gc_tensor self);
raw_tensor atg_silu_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self);
raw_tensor atg_silu_out(gc_tensor out, gc_tensor self);
raw_tensor atg_sin(gc_tensor self);
raw_tensor atg_sin_(gc_tensor self);
raw_tensor atg_sin_out(gc_tensor out, gc_tensor self);
raw_tensor atg_sinc(gc_tensor self);
raw_tensor atg_sinc_(gc_tensor self);
raw_tensor atg_sinc_out(gc_tensor out, gc_tensor self);
raw_tensor atg_sinh(gc_tensor self);
raw_tensor atg_sinh_(gc_tensor self);
raw_tensor atg_sinh_out(gc_tensor out, gc_tensor self);
int64_t atg_size(gc_tensor self, int64_t dim);
raw_tensor atg_slice(gc_tensor self, int64_t dim, int64_t start_v, int start_null, int64_t end_v, int end_null, int64_t step);
raw_tensor atg_slice_backward(gc_tensor grad_output, int64_t *input_sizes_data, int input_sizes_len, int64_t dim, int64_t start, int64_t end, int64_t step);
raw_tensor atg_slice_backward_out(gc_tensor out, gc_tensor grad_output, int64_t *input_sizes_data, int input_sizes_len, int64_t dim, int64_t start, int64_t end, int64_t step);
raw_tensor atg_slice_copy(gc_tensor self, int64_t dim, int64_t start_v, int start_null, int64_t end_v, int end_null, int64_t step);
raw_tensor atg_slice_copy_tensor_out(gc_tensor out, gc_tensor self, int64_t dim, int64_t start_v, int start_null, int64_t end_v, int end_null, int64_t step);
raw_tensor atg_slice_inverse(gc_tensor self, gc_tensor src, int64_t dim, int64_t start_v, int start_null, int64_t end_v, int end_null, int64_t step);
raw_tensor atg_slice_scatter(gc_tensor self, gc_tensor src, int64_t dim, int64_t start_v, int start_null, int64_t end_v, int end_null, int64_t step);
raw_tensor atg_slice_scatter_out(gc_tensor out, gc_tensor self, gc_tensor src, int64_t dim, int64_t start_v, int start_null, int64_t end_v, int end_null, int64_t step);
void atg_slogdet(raw_tensor *, gc_tensor self);
void atg_slogdet_out(raw_tensor *, gc_tensor sign, gc_tensor logabsdet, gc_tensor self);
raw_tensor atg_slow_conv3d(gc_tensor self, gc_tensor weight, int64_t *kernel_size_data, int kernel_size_len, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len);
raw_tensor atg_slow_conv3d_out(gc_tensor out, gc_tensor self, gc_tensor weight, int64_t *kernel_size_data, int kernel_size_len, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len);
raw_tensor atg_slow_conv_dilated2d(gc_tensor self, gc_tensor weight, int64_t *kernel_size_data, int kernel_size_len, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len);
raw_tensor atg_slow_conv_dilated2d_out(gc_tensor out, gc_tensor self, gc_tensor weight, int64_t *kernel_size_data, int kernel_size_len, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len);
raw_tensor atg_slow_conv_dilated3d(gc_tensor self, gc_tensor weight, int64_t *kernel_size_data, int kernel_size_len, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len);
raw_tensor atg_slow_conv_dilated3d_out(gc_tensor out, gc_tensor self, gc_tensor weight, int64_t *kernel_size_data, int kernel_size_len, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len);
raw_tensor atg_slow_conv_transpose2d(gc_tensor self, gc_tensor weight, int64_t *kernel_size_data, int kernel_size_len, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *output_padding_data, int output_padding_len, int64_t *dilation_data, int dilation_len);
raw_tensor atg_slow_conv_transpose2d_out(gc_tensor out, gc_tensor self, gc_tensor weight, int64_t *kernel_size_data, int kernel_size_len, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *output_padding_data, int output_padding_len, int64_t *dilation_data, int dilation_len);
raw_tensor atg_slow_conv_transpose3d(gc_tensor self, gc_tensor weight, int64_t *kernel_size_data, int kernel_size_len, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *output_padding_data, int output_padding_len, int64_t *dilation_data, int dilation_len);
raw_tensor atg_slow_conv_transpose3d_out(gc_tensor out, gc_tensor self, gc_tensor weight, int64_t *kernel_size_data, int kernel_size_len, gc_tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *output_padding_data, int output_padding_len, int64_t *dilation_data, int dilation_len);
raw_tensor atg_smm(gc_tensor self, gc_tensor mat2);
raw_tensor atg_smooth_l1_loss(gc_tensor self, gc_tensor target, int64_t reduction, double beta);
raw_tensor atg_smooth_l1_loss_backward(gc_tensor grad_output, gc_tensor self, gc_tensor target, int64_t reduction, double beta);
raw_tensor atg_smooth_l1_loss_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, gc_tensor target, int64_t reduction, double beta);
raw_tensor atg_smooth_l1_loss_out(gc_tensor out, gc_tensor self, gc_tensor target, int64_t reduction, double beta);
raw_tensor atg_soft_margin_loss(gc_tensor self, gc_tensor target, int64_t reduction);
raw_tensor atg_soft_margin_loss_backward(gc_tensor grad_output, gc_tensor self, gc_tensor target, int64_t reduction);
raw_tensor atg_soft_margin_loss_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, gc_tensor target, int64_t reduction);
raw_tensor atg_soft_margin_loss_out(gc_tensor out, gc_tensor self, gc_tensor target, int64_t reduction);
raw_tensor atg_softmax(gc_tensor self, int64_t dim, int dtype);
raw_tensor atg_softmax_int_out(gc_tensor out, gc_tensor self, int64_t dim, int dtype);
raw_tensor atg_softplus(gc_tensor self);
raw_tensor atg_softplus_backward(gc_tensor grad_output, gc_tensor self, scalar beta, scalar threshold);
raw_tensor atg_softplus_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, scalar beta, scalar threshold);
raw_tensor atg_softplus_out(gc_tensor out, gc_tensor self);
raw_tensor atg_softshrink(gc_tensor self);
raw_tensor atg_softshrink_backward(gc_tensor grad_output, gc_tensor self, scalar lambd);
raw_tensor atg_softshrink_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, scalar lambd);
raw_tensor atg_softshrink_out(gc_tensor out, gc_tensor self);
void atg_sort(raw_tensor *, gc_tensor self, int64_t dim, int descending);
void atg_sort_stable(raw_tensor *, gc_tensor self, int stable, int64_t dim, int descending);
void atg_sort_values(raw_tensor *, gc_tensor values, gc_tensor indices, gc_tensor self, int64_t dim, int descending);
void atg_sort_values_stable(raw_tensor *, gc_tensor values, gc_tensor indices, gc_tensor self, int stable, int64_t dim, int descending);
raw_tensor atg_sparse_bsc_tensor(gc_tensor ccol_indices, gc_tensor row_indices, gc_tensor values, int options_kind, int options_device);
raw_tensor atg_sparse_bsc_tensor_ccol_row_value_size(gc_tensor ccol_indices, gc_tensor row_indices, gc_tensor values, int64_t *size_data, int size_len, int options_kind, int options_device);
raw_tensor atg_sparse_bsr_tensor(gc_tensor crow_indices, gc_tensor col_indices, gc_tensor values, int options_kind, int options_device);
raw_tensor atg_sparse_bsr_tensor_crow_col_value_size(gc_tensor crow_indices, gc_tensor col_indices, gc_tensor values, int64_t *size_data, int size_len, int options_kind, int options_device);
raw_tensor atg_sparse_compressed_tensor(gc_tensor compressed_indices, gc_tensor plain_indices, gc_tensor values, int options_kind, int options_device);
raw_tensor atg_sparse_compressed_tensor_comp_plain_value_size(gc_tensor compressed_indices, gc_tensor plain_indices, gc_tensor values, int64_t *size_data, int size_len, int options_kind, int options_device);
raw_tensor atg_sparse_coo_tensor(int64_t *size_data, int size_len, int options_kind, int options_device);
raw_tensor atg_sparse_coo_tensor_indices(gc_tensor indices, gc_tensor values, int options_kind, int options_device, int is_coalesced);
raw_tensor atg_sparse_coo_tensor_indices_size(gc_tensor indices, gc_tensor values, int64_t *size_data, int size_len, int options_kind, int options_device, int is_coalesced);
raw_tensor atg_sparse_coo_tensor_size_out(gc_tensor out, int64_t *size_data, int size_len);
raw_tensor atg_sparse_csc_tensor(gc_tensor ccol_indices, gc_tensor row_indices, gc_tensor values, int options_kind, int options_device);
raw_tensor atg_sparse_csc_tensor_ccol_row_value_size(gc_tensor ccol_indices, gc_tensor row_indices, gc_tensor values, int64_t *size_data, int size_len, int options_kind, int options_device);
raw_tensor atg_sparse_csr_tensor(gc_tensor crow_indices, gc_tensor col_indices, gc_tensor values, int options_kind, int options_device);
raw_tensor atg_sparse_csr_tensor_crow_col_value_size(gc_tensor crow_indices, gc_tensor col_indices, gc_tensor values, int64_t *size_data, int size_len, int options_kind, int options_device);
int64_t atg_sparse_dim(gc_tensor self);
raw_tensor atg_sparse_mask(gc_tensor self, gc_tensor mask);
raw_tensor atg_sparse_mask_out(gc_tensor out, gc_tensor self, gc_tensor mask);
raw_tensor atg_sparse_resize(gc_tensor self, int64_t *size_data, int size_len, int64_t sparse_dim, int64_t dense_dim);
raw_tensor atg_sparse_resize_(gc_tensor self, int64_t *size_data, int size_len, int64_t sparse_dim, int64_t dense_dim);
raw_tensor atg_sparse_resize_and_clear(gc_tensor self, int64_t *size_data, int size_len, int64_t sparse_dim, int64_t dense_dim);
raw_tensor atg_sparse_resize_and_clear_(gc_tensor self, int64_t *size_data, int size_len, int64_t sparse_dim, int64_t dense_dim);
raw_tensor atg_sparse_resize_and_clear_out(gc_tensor out, gc_tensor self, int64_t *size_data, int size_len, int64_t sparse_dim, int64_t dense_dim);
raw_tensor atg_sparse_resize_out(gc_tensor out, gc_tensor self, int64_t *size_data, int size_len, int64_t sparse_dim, int64_t dense_dim);
raw_tensor atg_sparse_sampled_addmm(gc_tensor self, gc_tensor mat1, gc_tensor mat2);
raw_tensor atg_sparse_sampled_addmm_out(gc_tensor out, gc_tensor self, gc_tensor mat1, gc_tensor mat2);
raw_tensor atg_special_airy_ai(gc_tensor x);
raw_tensor atg_special_airy_ai_out(gc_tensor out, gc_tensor x);
raw_tensor atg_special_bessel_j0(gc_tensor self);
raw_tensor atg_special_bessel_j0_out(gc_tensor out, gc_tensor self);
raw_tensor atg_special_bessel_j1(gc_tensor self);
raw_tensor atg_special_bessel_j1_out(gc_tensor out, gc_tensor self);
raw_tensor atg_special_bessel_y0(gc_tensor self);
raw_tensor atg_special_bessel_y0_out(gc_tensor out, gc_tensor self);
raw_tensor atg_special_bessel_y1(gc_tensor self);
raw_tensor atg_special_bessel_y1_out(gc_tensor out, gc_tensor self);
raw_tensor atg_special_chebyshev_polynomial_t(gc_tensor x, gc_tensor n);
raw_tensor atg_special_chebyshev_polynomial_t_n_scalar(gc_tensor x, scalar n);
raw_tensor atg_special_chebyshev_polynomial_t_n_scalar_out(gc_tensor out, gc_tensor x, scalar n);
raw_tensor atg_special_chebyshev_polynomial_t_out(gc_tensor out, gc_tensor x, gc_tensor n);
raw_tensor atg_special_chebyshev_polynomial_t_x_scalar(scalar x, gc_tensor n);
raw_tensor atg_special_chebyshev_polynomial_t_x_scalar_out(gc_tensor out, scalar x, gc_tensor n);
raw_tensor atg_special_chebyshev_polynomial_u(gc_tensor x, gc_tensor n);
raw_tensor atg_special_chebyshev_polynomial_u_n_scalar(gc_tensor x, scalar n);
raw_tensor atg_special_chebyshev_polynomial_u_n_scalar_out(gc_tensor out, gc_tensor x, scalar n);
raw_tensor atg_special_chebyshev_polynomial_u_out(gc_tensor out, gc_tensor x, gc_tensor n);
raw_tensor atg_special_chebyshev_polynomial_u_x_scalar(scalar x, gc_tensor n);
raw_tensor atg_special_chebyshev_polynomial_u_x_scalar_out(gc_tensor out, scalar x, gc_tensor n);
raw_tensor atg_special_chebyshev_polynomial_v(gc_tensor x, gc_tensor n);
raw_tensor atg_special_chebyshev_polynomial_v_n_scalar(gc_tensor x, scalar n);
raw_tensor atg_special_chebyshev_polynomial_v_n_scalar_out(gc_tensor out, gc_tensor x, scalar n);
raw_tensor atg_special_chebyshev_polynomial_v_out(gc_tensor out, gc_tensor x, gc_tensor n);
raw_tensor atg_special_chebyshev_polynomial_v_x_scalar(scalar x, gc_tensor n);
raw_tensor atg_special_chebyshev_polynomial_v_x_scalar_out(gc_tensor out, scalar x, gc_tensor n);
raw_tensor atg_special_chebyshev_polynomial_w(gc_tensor x, gc_tensor n);
raw_tensor atg_special_chebyshev_polynomial_w_n_scalar(gc_tensor x, scalar n);
raw_tensor atg_special_chebyshev_polynomial_w_n_scalar_out(gc_tensor out, gc_tensor x, scalar n);
raw_tensor atg_special_chebyshev_polynomial_w_out(gc_tensor out, gc_tensor x, gc_tensor n);
raw_tensor atg_special_chebyshev_polynomial_w_x_scalar(scalar x, gc_tensor n);
raw_tensor atg_special_chebyshev_polynomial_w_x_scalar_out(gc_tensor out, scalar x, gc_tensor n);
raw_tensor atg_special_digamma(gc_tensor self);
raw_tensor atg_special_digamma_out(gc_tensor out, gc_tensor self);
raw_tensor atg_special_entr(gc_tensor self);
raw_tensor atg_special_entr_out(gc_tensor out, gc_tensor self);
raw_tensor atg_special_erf(gc_tensor self);
raw_tensor atg_special_erf_out(gc_tensor out, gc_tensor self);
raw_tensor atg_special_erfc(gc_tensor self);
raw_tensor atg_special_erfc_out(gc_tensor out, gc_tensor self);
raw_tensor atg_special_erfcx(gc_tensor self);
raw_tensor atg_special_erfcx_out(gc_tensor out, gc_tensor self);
raw_tensor atg_special_erfinv(gc_tensor self);
raw_tensor atg_special_erfinv_out(gc_tensor out, gc_tensor self);
raw_tensor atg_special_exp2(gc_tensor self);
raw_tensor atg_special_exp2_out(gc_tensor out, gc_tensor self);
raw_tensor atg_special_expit(gc_tensor self);
raw_tensor atg_special_expit_out(gc_tensor out, gc_tensor self);
raw_tensor atg_special_expm1(gc_tensor self);
raw_tensor atg_special_expm1_out(gc_tensor out, gc_tensor self);
raw_tensor atg_special_gammainc(gc_tensor self, gc_tensor other);
raw_tensor atg_special_gammainc_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_special_gammaincc(gc_tensor self, gc_tensor other);
raw_tensor atg_special_gammaincc_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_special_gammaln(gc_tensor self);
raw_tensor atg_special_gammaln_out(gc_tensor out, gc_tensor self);
raw_tensor atg_special_hermite_polynomial_h(gc_tensor x, gc_tensor n);
raw_tensor atg_special_hermite_polynomial_h_n_scalar(gc_tensor x, scalar n);
raw_tensor atg_special_hermite_polynomial_h_n_scalar_out(gc_tensor out, gc_tensor x, scalar n);
raw_tensor atg_special_hermite_polynomial_h_out(gc_tensor out, gc_tensor x, gc_tensor n);
raw_tensor atg_special_hermite_polynomial_h_x_scalar(scalar x, gc_tensor n);
raw_tensor atg_special_hermite_polynomial_h_x_scalar_out(gc_tensor out, scalar x, gc_tensor n);
raw_tensor atg_special_hermite_polynomial_he(gc_tensor x, gc_tensor n);
raw_tensor atg_special_hermite_polynomial_he_n_scalar(gc_tensor x, scalar n);
raw_tensor atg_special_hermite_polynomial_he_n_scalar_out(gc_tensor out, gc_tensor x, scalar n);
raw_tensor atg_special_hermite_polynomial_he_out(gc_tensor out, gc_tensor x, gc_tensor n);
raw_tensor atg_special_hermite_polynomial_he_x_scalar(scalar x, gc_tensor n);
raw_tensor atg_special_hermite_polynomial_he_x_scalar_out(gc_tensor out, scalar x, gc_tensor n);
raw_tensor atg_special_i0(gc_tensor self);
raw_tensor atg_special_i0_out(gc_tensor out, gc_tensor self);
raw_tensor atg_special_i0e(gc_tensor self);
raw_tensor atg_special_i0e_out(gc_tensor out, gc_tensor self);
raw_tensor atg_special_i1(gc_tensor self);
raw_tensor atg_special_i1_out(gc_tensor out, gc_tensor self);
raw_tensor atg_special_i1e(gc_tensor self);
raw_tensor atg_special_i1e_out(gc_tensor out, gc_tensor self);
raw_tensor atg_special_laguerre_polynomial_l(gc_tensor x, gc_tensor n);
raw_tensor atg_special_laguerre_polynomial_l_n_scalar(gc_tensor x, scalar n);
raw_tensor atg_special_laguerre_polynomial_l_n_scalar_out(gc_tensor out, gc_tensor x, scalar n);
raw_tensor atg_special_laguerre_polynomial_l_out(gc_tensor out, gc_tensor x, gc_tensor n);
raw_tensor atg_special_laguerre_polynomial_l_x_scalar(scalar x, gc_tensor n);
raw_tensor atg_special_laguerre_polynomial_l_x_scalar_out(gc_tensor out, scalar x, gc_tensor n);
raw_tensor atg_special_legendre_polynomial_p(gc_tensor x, gc_tensor n);
raw_tensor atg_special_legendre_polynomial_p_n_scalar(gc_tensor x, scalar n);
raw_tensor atg_special_legendre_polynomial_p_n_scalar_out(gc_tensor out, gc_tensor x, scalar n);
raw_tensor atg_special_legendre_polynomial_p_out(gc_tensor out, gc_tensor x, gc_tensor n);
raw_tensor atg_special_legendre_polynomial_p_x_scalar(scalar x, gc_tensor n);
raw_tensor atg_special_legendre_polynomial_p_x_scalar_out(gc_tensor out, scalar x, gc_tensor n);
raw_tensor atg_special_log1p(gc_tensor self);
raw_tensor atg_special_log1p_out(gc_tensor out, gc_tensor self);
raw_tensor atg_special_log_ndtr(gc_tensor self);
raw_tensor atg_special_log_ndtr_out(gc_tensor out, gc_tensor self);
raw_tensor atg_special_log_softmax(gc_tensor self, int64_t dim, int dtype);
raw_tensor atg_special_logit(gc_tensor self, double eps_v, int eps_null);
raw_tensor atg_special_logit_out(gc_tensor out, gc_tensor self, double eps_v, int eps_null);
raw_tensor atg_special_logsumexp(gc_tensor self, int64_t *dim_data, int dim_len, int keepdim);
raw_tensor atg_special_logsumexp_out(gc_tensor out, gc_tensor self, int64_t *dim_data, int dim_len, int keepdim);
raw_tensor atg_special_modified_bessel_i0(gc_tensor self);
raw_tensor atg_special_modified_bessel_i0_out(gc_tensor out, gc_tensor self);
raw_tensor atg_special_modified_bessel_i1(gc_tensor self);
raw_tensor atg_special_modified_bessel_i1_out(gc_tensor out, gc_tensor self);
raw_tensor atg_special_modified_bessel_k0(gc_tensor self);
raw_tensor atg_special_modified_bessel_k0_out(gc_tensor out, gc_tensor self);
raw_tensor atg_special_modified_bessel_k1(gc_tensor self);
raw_tensor atg_special_modified_bessel_k1_out(gc_tensor out, gc_tensor self);
raw_tensor atg_special_multigammaln(gc_tensor self, int64_t p);
raw_tensor atg_special_multigammaln_out(gc_tensor out, gc_tensor self, int64_t p);
raw_tensor atg_special_ndtr(gc_tensor self);
raw_tensor atg_special_ndtr_out(gc_tensor out, gc_tensor self);
raw_tensor atg_special_ndtri(gc_tensor self);
raw_tensor atg_special_ndtri_out(gc_tensor out, gc_tensor self);
raw_tensor atg_special_polygamma(int64_t n, gc_tensor self);
raw_tensor atg_special_polygamma_out(gc_tensor out, int64_t n, gc_tensor self);
raw_tensor atg_special_psi(gc_tensor self);
raw_tensor atg_special_psi_out(gc_tensor out, gc_tensor self);
raw_tensor atg_special_round(gc_tensor self, int64_t decimals);
raw_tensor atg_special_round_out(gc_tensor out, gc_tensor self, int64_t decimals);
raw_tensor atg_special_scaled_modified_bessel_k0(gc_tensor x);
raw_tensor atg_special_scaled_modified_bessel_k0_out(gc_tensor out, gc_tensor x);
raw_tensor atg_special_scaled_modified_bessel_k1(gc_tensor x);
raw_tensor atg_special_scaled_modified_bessel_k1_out(gc_tensor out, gc_tensor x);
raw_tensor atg_special_shifted_chebyshev_polynomial_t(gc_tensor x, gc_tensor n);
raw_tensor atg_special_shifted_chebyshev_polynomial_t_n_scalar(gc_tensor x, scalar n);
raw_tensor atg_special_shifted_chebyshev_polynomial_t_n_scalar_out(gc_tensor out, gc_tensor x, scalar n);
raw_tensor atg_special_shifted_chebyshev_polynomial_t_out(gc_tensor out, gc_tensor x, gc_tensor n);
raw_tensor atg_special_shifted_chebyshev_polynomial_t_x_scalar(scalar x, gc_tensor n);
raw_tensor atg_special_shifted_chebyshev_polynomial_t_x_scalar_out(gc_tensor out, scalar x, gc_tensor n);
raw_tensor atg_special_shifted_chebyshev_polynomial_u(gc_tensor x, gc_tensor n);
raw_tensor atg_special_shifted_chebyshev_polynomial_u_n_scalar(gc_tensor x, scalar n);
raw_tensor atg_special_shifted_chebyshev_polynomial_u_n_scalar_out(gc_tensor out, gc_tensor x, scalar n);
raw_tensor atg_special_shifted_chebyshev_polynomial_u_out(gc_tensor out, gc_tensor x, gc_tensor n);
raw_tensor atg_special_shifted_chebyshev_polynomial_u_x_scalar(scalar x, gc_tensor n);
raw_tensor atg_special_shifted_chebyshev_polynomial_u_x_scalar_out(gc_tensor out, scalar x, gc_tensor n);
raw_tensor atg_special_shifted_chebyshev_polynomial_v(gc_tensor x, gc_tensor n);
raw_tensor atg_special_shifted_chebyshev_polynomial_v_n_scalar(gc_tensor x, scalar n);
raw_tensor atg_special_shifted_chebyshev_polynomial_v_n_scalar_out(gc_tensor out, gc_tensor x, scalar n);
raw_tensor atg_special_shifted_chebyshev_polynomial_v_out(gc_tensor out, gc_tensor x, gc_tensor n);
raw_tensor atg_special_shifted_chebyshev_polynomial_v_x_scalar(scalar x, gc_tensor n);
raw_tensor atg_special_shifted_chebyshev_polynomial_v_x_scalar_out(gc_tensor out, scalar x, gc_tensor n);
raw_tensor atg_special_shifted_chebyshev_polynomial_w(gc_tensor x, gc_tensor n);
raw_tensor atg_special_shifted_chebyshev_polynomial_w_n_scalar(gc_tensor x, scalar n);
raw_tensor atg_special_shifted_chebyshev_polynomial_w_n_scalar_out(gc_tensor out, gc_tensor x, scalar n);
raw_tensor atg_special_shifted_chebyshev_polynomial_w_out(gc_tensor out, gc_tensor x, gc_tensor n);
raw_tensor atg_special_shifted_chebyshev_polynomial_w_x_scalar(scalar x, gc_tensor n);
raw_tensor atg_special_shifted_chebyshev_polynomial_w_x_scalar_out(gc_tensor out, scalar x, gc_tensor n);
raw_tensor atg_special_sinc(gc_tensor self);
raw_tensor atg_special_sinc_out(gc_tensor out, gc_tensor self);
raw_tensor atg_special_softmax(gc_tensor self, int64_t dim, int dtype);
raw_tensor atg_special_spherical_bessel_j0(gc_tensor x);
raw_tensor atg_special_spherical_bessel_j0_out(gc_tensor out, gc_tensor x);
raw_tensor atg_special_xlog1py(gc_tensor self, gc_tensor other);
raw_tensor atg_special_xlog1py_other_scalar(gc_tensor self, scalar other);
raw_tensor atg_special_xlog1py_other_scalar_out(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg_special_xlog1py_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_special_xlog1py_self_scalar(scalar self, gc_tensor other);
raw_tensor atg_special_xlog1py_self_scalar_out(gc_tensor out, scalar self, gc_tensor other);
raw_tensor atg_special_xlogy(gc_tensor self, gc_tensor other);
raw_tensor atg_special_xlogy_other_scalar(gc_tensor self, scalar other);
raw_tensor atg_special_xlogy_other_scalar_out(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg_special_xlogy_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_special_xlogy_self_scalar(scalar self, gc_tensor other);
raw_tensor atg_special_xlogy_self_scalar_out(gc_tensor out, scalar self, gc_tensor other);
raw_tensor atg_special_zeta(gc_tensor self, gc_tensor other);
raw_tensor atg_special_zeta_other_scalar(gc_tensor self, scalar other);
raw_tensor atg_special_zeta_other_scalar_out(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg_special_zeta_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_special_zeta_self_scalar(scalar self, gc_tensor other);
raw_tensor atg_special_zeta_self_scalar_out(gc_tensor out, scalar self, gc_tensor other);
raw_tensor *atg_split(gc_tensor self, int64_t split_size, int64_t dim);
raw_tensor *atg_split_copy(gc_tensor self, int64_t split_size, int64_t dim);
void atg_split_copy_tensor_out(gc_tensor *out_data, int out_len, gc_tensor self, int64_t split_size, int64_t dim);
raw_tensor *atg_split_sizes(gc_tensor self, int64_t *split_size_data, int split_size_len, int64_t dim);
raw_tensor *atg_split_with_sizes(gc_tensor self, int64_t *split_sizes_data, int split_sizes_len, int64_t dim);
raw_tensor *atg_split_with_sizes_copy(gc_tensor self, int64_t *split_sizes_data, int split_sizes_len, int64_t dim);
void atg_split_with_sizes_copy_out(gc_tensor *out_data, int out_len, gc_tensor self, int64_t *split_sizes_data, int split_sizes_len, int64_t dim);
raw_tensor atg_sqrt(gc_tensor self);
raw_tensor atg_sqrt_(gc_tensor self);
raw_tensor atg_sqrt_out(gc_tensor out, gc_tensor self);
raw_tensor atg_square(gc_tensor self);
raw_tensor atg_square_(gc_tensor self);
raw_tensor atg_square_out(gc_tensor out, gc_tensor self);
raw_tensor atg_squeeze(gc_tensor self);
raw_tensor atg_squeeze_(gc_tensor self);
raw_tensor atg_squeeze_copy(gc_tensor self);
raw_tensor atg_squeeze_copy_dim(gc_tensor self, int64_t dim);
raw_tensor atg_squeeze_copy_dim_out(gc_tensor out, gc_tensor self, int64_t dim);
raw_tensor atg_squeeze_copy_dims(gc_tensor self, int64_t *dim_data, int dim_len);
raw_tensor atg_squeeze_copy_dims_out(gc_tensor out, gc_tensor self, int64_t *dim_data, int dim_len);
raw_tensor atg_squeeze_copy_out(gc_tensor out, gc_tensor self);
raw_tensor atg_squeeze_dim(gc_tensor self, int64_t dim);
raw_tensor atg_squeeze_dim_(gc_tensor self, int64_t dim);
raw_tensor atg_squeeze_dims(gc_tensor self, int64_t *dim_data, int dim_len);
raw_tensor atg_squeeze_dims_(gc_tensor self, int64_t *dim_data, int dim_len);
raw_tensor atg_sspaddmm(gc_tensor self, gc_tensor mat1, gc_tensor mat2);
raw_tensor atg_sspaddmm_out(gc_tensor out, gc_tensor self, gc_tensor mat1, gc_tensor mat2);
raw_tensor atg_stack(gc_tensor *tensors_data, int tensors_len, int64_t dim);
raw_tensor atg_stack_out(gc_tensor out, gc_tensor *tensors_data, int tensors_len, int64_t dim);
raw_tensor atg_std(gc_tensor self, int unbiased);
raw_tensor atg_std_correction(gc_tensor self, int64_t *dim_data, int dim_len, scalar correction, int keepdim);
raw_tensor atg_std_correction_out(gc_tensor out, gc_tensor self, int64_t *dim_data, int dim_len, scalar correction, int keepdim);
raw_tensor atg_std_dim(gc_tensor self, int64_t *dim_data, int dim_len, int unbiased, int keepdim);
void atg_std_mean(raw_tensor *, gc_tensor self, int unbiased);
void atg_std_mean_correction(raw_tensor *, gc_tensor self, int64_t *dim_data, int dim_len, scalar correction, int keepdim);
void atg_std_mean_correction_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor self, int64_t *dim_data, int dim_len, scalar correction, int keepdim);
void atg_std_mean_dim(raw_tensor *, gc_tensor self, int64_t *dim_data, int dim_len, int unbiased, int keepdim);
raw_tensor atg_std_out(gc_tensor out, gc_tensor self, int64_t *dim_data, int dim_len, int unbiased, int keepdim);
raw_tensor atg_stft(gc_tensor self, int64_t n_fft, int64_t hop_length_v, int hop_length_null, int64_t win_length_v, int win_length_null, gc_tensor window, int normalized, int onesided, int return_complex, int align_to_window);
raw_tensor atg_stft_center(gc_tensor self, int64_t n_fft, int64_t hop_length_v, int hop_length_null, int64_t win_length_v, int win_length_null, gc_tensor window, int center, char * pad_mode, int normalized, int onesided, int return_complex, int align_to_window);
int64_t atg_stride(gc_tensor self, int64_t dim);
raw_tensor atg_sub(gc_tensor self, gc_tensor other);
raw_tensor atg_sub_(gc_tensor self, gc_tensor other);
raw_tensor atg_sub_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_sub_scalar(gc_tensor self, scalar other);
raw_tensor atg_sub_scalar_(gc_tensor self, scalar other);
raw_tensor atg_sub_scalar_out(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg_subtract(gc_tensor self, gc_tensor other);
raw_tensor atg_subtract_(gc_tensor self, gc_tensor other);
raw_tensor atg_subtract_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_subtract_scalar(gc_tensor self, scalar other);
raw_tensor atg_subtract_scalar_(gc_tensor self, scalar other);
raw_tensor atg_sum(gc_tensor self, int dtype);
raw_tensor atg_sum_dim_intlist(gc_tensor self, int64_t *dim_data, int dim_len, int keepdim, int dtype);
raw_tensor atg_sum_intlist_out(gc_tensor out, gc_tensor self, int64_t *dim_data, int dim_len, int keepdim, int dtype);
raw_tensor atg_sum_out(gc_tensor out, gc_tensor self, int dtype);
raw_tensor atg_sum_to_size(gc_tensor self, int64_t *size_data, int size_len);
void atg_svd(raw_tensor *, gc_tensor self, int some, int compute_uv);
void atg_svd_u(raw_tensor *, gc_tensor U, gc_tensor S, gc_tensor V, gc_tensor self, int some, int compute_uv);
raw_tensor atg_swapaxes(gc_tensor self, int64_t axis0, int64_t axis1);
raw_tensor atg_swapaxes_(gc_tensor self, int64_t axis0, int64_t axis1);
raw_tensor atg_swapdims(gc_tensor self, int64_t dim0, int64_t dim1);
raw_tensor atg_swapdims_(gc_tensor self, int64_t dim0, int64_t dim1);
raw_tensor atg_t(gc_tensor self);
raw_tensor atg_t_(gc_tensor self);
raw_tensor atg_t_copy(gc_tensor self);
raw_tensor atg_t_copy_out(gc_tensor out, gc_tensor self);
raw_tensor atg_take(gc_tensor self, gc_tensor index);
raw_tensor atg_take_along_dim(gc_tensor self, gc_tensor indices, int64_t dim_v, int dim_null);
raw_tensor atg_take_along_dim_out(gc_tensor out, gc_tensor self, gc_tensor indices, int64_t dim_v, int dim_null);
raw_tensor atg_take_out(gc_tensor out, gc_tensor self, gc_tensor index);
raw_tensor atg_tan(gc_tensor self);
raw_tensor atg_tan_(gc_tensor self);
raw_tensor atg_tan_out(gc_tensor out, gc_tensor self);
raw_tensor atg_tanh(gc_tensor self);
raw_tensor atg_tanh_(gc_tensor self);
raw_tensor atg_tanh_backward(gc_tensor grad_output, gc_tensor output);
raw_tensor atg_tanh_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor output);
raw_tensor atg_tanh_out(gc_tensor out, gc_tensor self);
raw_tensor *atg_tensor_split(gc_tensor self, int64_t sections, int64_t dim);
raw_tensor *atg_tensor_split_indices(gc_tensor self, int64_t *indices_data, int indices_len, int64_t dim);
raw_tensor *atg_tensor_split_tensor_indices_or_sections(gc_tensor self, gc_tensor tensor_indices_or_sections, int64_t dim);
raw_tensor atg_tensordot(gc_tensor self, gc_tensor other, int64_t *dims_self_data, int dims_self_len, int64_t *dims_other_data, int dims_other_len);
raw_tensor atg_tensordot_out(gc_tensor out, gc_tensor self, gc_tensor other, int64_t *dims_self_data, int dims_self_len, int64_t *dims_other_data, int dims_other_len);
raw_tensor atg_threshold(gc_tensor self, scalar threshold, scalar value);
raw_tensor atg_threshold_(gc_tensor self, scalar threshold, scalar value);
raw_tensor atg_threshold_backward(gc_tensor grad_output, gc_tensor self, scalar threshold);
raw_tensor atg_threshold_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, gc_tensor self, scalar threshold);
raw_tensor atg_threshold_out(gc_tensor out, gc_tensor self, scalar threshold, scalar value);
raw_tensor atg_tile(gc_tensor self, int64_t *dims_data, int dims_len);
raw_tensor atg_to(gc_tensor self, int device);
raw_tensor atg_to_dense(gc_tensor self, int dtype, int masked_grad);
raw_tensor atg_to_dense_backward(gc_tensor grad, gc_tensor input, int masked_grad);
raw_tensor atg_to_device(gc_tensor self, int device, int dtype, int non_blocking, int copy);
raw_tensor atg_to_dtype(gc_tensor self, int dtype, int non_blocking, int copy);
raw_tensor atg_to_dtype_layout(gc_tensor self, int options_kind, int options_device, int non_blocking, int copy);
raw_tensor atg_to_mkldnn(gc_tensor self, int dtype);
raw_tensor atg_to_mkldnn_backward(gc_tensor grad, gc_tensor input);
raw_tensor atg_to_mkldnn_out(gc_tensor out, gc_tensor self, int dtype);
raw_tensor atg_to_other(gc_tensor self, gc_tensor other, int non_blocking, int copy);
raw_tensor atg_to_padded_tensor(gc_tensor self, double padding, int64_t *output_size_data, int output_size_len);
raw_tensor atg_to_padded_tensor_out(gc_tensor out, gc_tensor self, double padding, int64_t *output_size_data, int output_size_len);
void atg_topk(raw_tensor *, gc_tensor self, int64_t k, int64_t dim, int largest, int sorted);
void atg_topk_values(raw_tensor *, gc_tensor values, gc_tensor indices, gc_tensor self, int64_t k, int64_t dim, int largest, int sorted);
raw_tensor atg_totype(gc_tensor self, int scalar_type);
raw_tensor atg_trace(gc_tensor self);
raw_tensor atg_trace_backward(gc_tensor grad, int64_t *sizes_data, int sizes_len);
raw_tensor atg_trace_out(gc_tensor out, gc_tensor self);
raw_tensor atg_transpose(gc_tensor self, int64_t dim0, int64_t dim1);
raw_tensor atg_transpose_(gc_tensor self, int64_t dim0, int64_t dim1);
raw_tensor atg_transpose_copy(gc_tensor self, int64_t dim0, int64_t dim1);
raw_tensor atg_transpose_copy_int_out(gc_tensor out, gc_tensor self, int64_t dim0, int64_t dim1);
raw_tensor atg_trapezoid(gc_tensor y, int64_t dim);
raw_tensor atg_trapezoid_x(gc_tensor y, gc_tensor x, int64_t dim);
raw_tensor atg_trapz(gc_tensor y, gc_tensor x, int64_t dim);
raw_tensor atg_trapz_dx(gc_tensor y, double dx, int64_t dim);
void atg_triangular_solve(raw_tensor *, gc_tensor self, gc_tensor A, int upper, int transpose, int unitriangular);
void atg_triangular_solve_x(raw_tensor *, gc_tensor X, gc_tensor M, gc_tensor self, gc_tensor A, int upper, int transpose, int unitriangular);
raw_tensor atg_tril(gc_tensor self, int64_t diagonal);
raw_tensor atg_tril_(gc_tensor self, int64_t diagonal);
raw_tensor atg_tril_indices(int64_t row, int64_t col, int64_t offset, int options_kind, int options_device);
raw_tensor atg_tril_indices_out(gc_tensor out, int64_t row, int64_t col, int64_t offset);
raw_tensor atg_tril_out(gc_tensor out, gc_tensor self, int64_t diagonal);
raw_tensor atg_triplet_margin_loss(gc_tensor anchor, gc_tensor positive, gc_tensor negative, double margin, double p, double eps, int swap, int64_t reduction);
raw_tensor atg_triu(gc_tensor self, int64_t diagonal);
raw_tensor atg_triu_(gc_tensor self, int64_t diagonal);
raw_tensor atg_triu_indices(int64_t row, int64_t col, int64_t offset, int options_kind, int options_device);
raw_tensor atg_triu_indices_out(gc_tensor out, int64_t row, int64_t col, int64_t offset);
raw_tensor atg_triu_out(gc_tensor out, gc_tensor self, int64_t diagonal);
raw_tensor atg_true_divide(gc_tensor self, gc_tensor other);
raw_tensor atg_true_divide_(gc_tensor self, gc_tensor other);
raw_tensor atg_true_divide_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_true_divide_scalar(gc_tensor self, scalar other);
raw_tensor atg_true_divide_scalar_(gc_tensor self, scalar other);
raw_tensor atg_trunc(gc_tensor self);
raw_tensor atg_trunc_(gc_tensor self);
raw_tensor atg_trunc_out(gc_tensor out, gc_tensor self);
raw_tensor atg_type_as(gc_tensor self, gc_tensor other);
raw_tensor *atg_unbind(gc_tensor self, int64_t dim);
raw_tensor *atg_unbind_copy(gc_tensor self, int64_t dim);
void atg_unbind_copy_int_out(gc_tensor *out_data, int out_len, gc_tensor self, int64_t dim);
raw_tensor atg_unflatten(gc_tensor self, int64_t dim, int64_t *sizes_data, int sizes_len);
raw_tensor *atg_unflatten_dense_tensors(gc_tensor flat, gc_tensor *tensors_data, int tensors_len);
raw_tensor atg_unfold(gc_tensor self, int64_t dimension, int64_t size, int64_t step);
raw_tensor atg_unfold_backward(gc_tensor grad_in, int64_t *input_sizes_data, int input_sizes_len, int64_t dim, int64_t size, int64_t step);
raw_tensor atg_unfold_backward_out(gc_tensor out, gc_tensor grad_in, int64_t *input_sizes_data, int input_sizes_len, int64_t dim, int64_t size, int64_t step);
raw_tensor atg_unfold_copy(gc_tensor self, int64_t dimension, int64_t size, int64_t step);
raw_tensor atg_unfold_copy_out(gc_tensor out, gc_tensor self, int64_t dimension, int64_t size, int64_t step);
raw_tensor atg_uniform(gc_tensor self, double from, double to);
raw_tensor atg_uniform_(gc_tensor self, double from, double to);
raw_tensor atg_uniform_out(gc_tensor out, gc_tensor self, double from, double to);
void atg_unique_consecutive(raw_tensor *, gc_tensor self, int return_inverse, int return_counts, int64_t dim_v, int dim_null);
void atg_unique_consecutive_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor out2, gc_tensor self, int return_inverse, int return_counts, int64_t dim_v, int dim_null);
void atg_unique_dim(raw_tensor *, gc_tensor self, int64_t dim, int sorted, int return_inverse, int return_counts);
void atg_unique_dim_consecutive(raw_tensor *, gc_tensor self, int64_t dim, int return_inverse, int return_counts);
void atg_unique_dim_consecutive_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor out2, gc_tensor self, int64_t dim, int return_inverse, int return_counts);
void atg_unique_dim_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor out2, gc_tensor self, int64_t dim, int sorted, int return_inverse, int return_counts);
raw_tensor *atg_unsafe_chunk(gc_tensor self, int64_t chunks, int64_t dim);
raw_tensor *atg_unsafe_split(gc_tensor self, int64_t split_size, int64_t dim);
void atg_unsafe_split_tensor_out(gc_tensor *out_data, int out_len, gc_tensor self, int64_t split_size, int64_t dim);
raw_tensor *atg_unsafe_split_with_sizes(gc_tensor self, int64_t *split_sizes_data, int split_sizes_len, int64_t dim);
void atg_unsafe_split_with_sizes_out(gc_tensor *out_data, int out_len, gc_tensor self, int64_t *split_sizes_data, int split_sizes_len, int64_t dim);
raw_tensor atg_unsqueeze(gc_tensor self, int64_t dim);
raw_tensor atg_unsqueeze_(gc_tensor self, int64_t dim);
raw_tensor atg_unsqueeze_copy(gc_tensor self, int64_t dim);
raw_tensor atg_unsqueeze_copy_out(gc_tensor out, gc_tensor self, int64_t dim);
raw_tensor atg_upsample_bicubic2d(gc_tensor self, int64_t *output_size_data, int output_size_len, int align_corners, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg_upsample_bicubic2d_backward(gc_tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, int align_corners, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg_upsample_bicubic2d_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, int align_corners, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg_upsample_bicubic2d_out(gc_tensor out, gc_tensor self, int64_t *output_size_data, int output_size_len, int align_corners, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg_upsample_bicubic2d_vec(gc_tensor input, int64_t *output_size_data, int output_size_len, int align_corners, double *scale_factors_data, int scale_factors_len);
raw_tensor atg_upsample_bilinear2d(gc_tensor self, int64_t *output_size_data, int output_size_len, int align_corners, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg_upsample_bilinear2d_backward(gc_tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, int align_corners, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg_upsample_bilinear2d_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, int align_corners, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg_upsample_bilinear2d_out(gc_tensor out, gc_tensor self, int64_t *output_size_data, int output_size_len, int align_corners, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg_upsample_bilinear2d_vec(gc_tensor input, int64_t *output_size_data, int output_size_len, int align_corners, double *scale_factors_data, int scale_factors_len);
raw_tensor atg_upsample_bilinear2d_vec_out(gc_tensor out, gc_tensor input, int64_t *output_size_data, int output_size_len, int align_corners, double *scale_factors_data, int scale_factors_len);
raw_tensor atg_upsample_linear1d(gc_tensor self, int64_t *output_size_data, int output_size_len, int align_corners, double scales_v, int scales_null);
raw_tensor atg_upsample_linear1d_backward(gc_tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, int align_corners, double scales_v, int scales_null);
raw_tensor atg_upsample_linear1d_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, int align_corners, double scales_v, int scales_null);
raw_tensor atg_upsample_linear1d_out(gc_tensor out, gc_tensor self, int64_t *output_size_data, int output_size_len, int align_corners, double scales_v, int scales_null);
raw_tensor atg_upsample_linear1d_vec(gc_tensor input, int64_t *output_size_data, int output_size_len, int align_corners, double *scale_factors_data, int scale_factors_len);
raw_tensor atg_upsample_nearest1d(gc_tensor self, int64_t *output_size_data, int output_size_len, double scales_v, int scales_null);
raw_tensor atg_upsample_nearest1d_backward(gc_tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, double scales_v, int scales_null);
raw_tensor atg_upsample_nearest1d_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, double scales_v, int scales_null);
raw_tensor atg_upsample_nearest1d_out(gc_tensor out, gc_tensor self, int64_t *output_size_data, int output_size_len, double scales_v, int scales_null);
raw_tensor atg_upsample_nearest1d_vec(gc_tensor input, int64_t *output_size_data, int output_size_len, double *scale_factors_data, int scale_factors_len);
raw_tensor atg_upsample_nearest2d(gc_tensor self, int64_t *output_size_data, int output_size_len, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg_upsample_nearest2d_backward(gc_tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg_upsample_nearest2d_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg_upsample_nearest2d_out(gc_tensor out, gc_tensor self, int64_t *output_size_data, int output_size_len, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg_upsample_nearest2d_vec(gc_tensor input, int64_t *output_size_data, int output_size_len, double *scale_factors_data, int scale_factors_len);
raw_tensor atg_upsample_nearest2d_vec_out(gc_tensor out, gc_tensor input, int64_t *output_size_data, int output_size_len, double *scale_factors_data, int scale_factors_len);
raw_tensor atg_upsample_nearest3d(gc_tensor self, int64_t *output_size_data, int output_size_len, double scales_d_v, int scales_d_null, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg_upsample_nearest3d_backward(gc_tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, double scales_d_v, int scales_d_null, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg_upsample_nearest3d_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, double scales_d_v, int scales_d_null, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg_upsample_nearest3d_out(gc_tensor out, gc_tensor self, int64_t *output_size_data, int output_size_len, double scales_d_v, int scales_d_null, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg_upsample_nearest3d_vec(gc_tensor input, int64_t *output_size_data, int output_size_len, double *scale_factors_data, int scale_factors_len);
raw_tensor atg_upsample_trilinear3d(gc_tensor self, int64_t *output_size_data, int output_size_len, int align_corners, double scales_d_v, int scales_d_null, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg_upsample_trilinear3d_backward(gc_tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, int align_corners, double scales_d_v, int scales_d_null, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg_upsample_trilinear3d_backward_grad_input(gc_tensor grad_input, gc_tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, int align_corners, double scales_d_v, int scales_d_null, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg_upsample_trilinear3d_out(gc_tensor out, gc_tensor self, int64_t *output_size_data, int output_size_len, int align_corners, double scales_d_v, int scales_d_null, double scales_h_v, int scales_h_null, double scales_w_v, int scales_w_null);
raw_tensor atg_upsample_trilinear3d_vec(gc_tensor input, int64_t *output_size_data, int output_size_len, int align_corners, double *scale_factors_data, int scale_factors_len);
raw_tensor atg_value_selecting_reduction_backward(gc_tensor grad, int64_t dim, gc_tensor indices, int64_t *sizes_data, int sizes_len, int keepdim);
raw_tensor atg_values(gc_tensor self);
raw_tensor atg_values_copy(gc_tensor self);
raw_tensor atg_values_copy_out(gc_tensor out, gc_tensor self);
raw_tensor atg_vander(gc_tensor x, int64_t n_v, int n_null, int increasing);
raw_tensor atg_var(gc_tensor self, int unbiased);
raw_tensor atg_var_correction(gc_tensor self, int64_t *dim_data, int dim_len, scalar correction, int keepdim);
raw_tensor atg_var_correction_out(gc_tensor out, gc_tensor self, int64_t *dim_data, int dim_len, scalar correction, int keepdim);
raw_tensor atg_var_dim(gc_tensor self, int64_t *dim_data, int dim_len, int unbiased, int keepdim);
void atg_var_mean(raw_tensor *, gc_tensor self, int unbiased);
void atg_var_mean_correction(raw_tensor *, gc_tensor self, int64_t *dim_data, int dim_len, scalar correction, int keepdim);
void atg_var_mean_correction_out(raw_tensor *, gc_tensor out0, gc_tensor out1, gc_tensor self, int64_t *dim_data, int dim_len, scalar correction, int keepdim);
void atg_var_mean_dim(raw_tensor *, gc_tensor self, int64_t *dim_data, int dim_len, int unbiased, int keepdim);
raw_tensor atg_var_out(gc_tensor out, gc_tensor self, int64_t *dim_data, int dim_len, int unbiased, int keepdim);
raw_tensor atg_vdot(gc_tensor self, gc_tensor other);
raw_tensor atg_vdot_out(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_view(gc_tensor self, int64_t *size_data, int size_len);
raw_tensor atg_view_as(gc_tensor self, gc_tensor other);
raw_tensor atg_view_as_complex(gc_tensor self);
raw_tensor atg_view_as_complex_copy(gc_tensor self);
raw_tensor atg_view_as_complex_copy_out(gc_tensor out, gc_tensor self);
raw_tensor atg_view_as_real(gc_tensor self);
raw_tensor atg_view_as_real_copy(gc_tensor self);
raw_tensor atg_view_as_real_copy_out(gc_tensor out, gc_tensor self);
raw_tensor atg_view_copy(gc_tensor self, int64_t *size_data, int size_len);
raw_tensor atg_view_copy_dtype(gc_tensor self, int dtype);
raw_tensor atg_view_copy_dtype_out(gc_tensor out, gc_tensor self, int dtype);
raw_tensor atg_view_copy_out(gc_tensor out, gc_tensor self, int64_t *size_data, int size_len);
raw_tensor atg_view_dtype(gc_tensor self, int dtype);
raw_tensor *atg_vsplit(gc_tensor self, int64_t sections);
raw_tensor *atg_vsplit_array(gc_tensor self, int64_t *indices_data, int indices_len);
raw_tensor atg_vstack(gc_tensor *tensors_data, int tensors_len);
raw_tensor atg_vstack_out(gc_tensor out, gc_tensor *tensors_data, int tensors_len);
raw_tensor *atg_where(gc_tensor condition);
raw_tensor atg_where_scalar(gc_tensor condition, scalar self, scalar other);
raw_tensor atg_where_scalarother(gc_tensor condition, gc_tensor self, scalar other);
raw_tensor atg_where_scalarself(gc_tensor condition, scalar self, gc_tensor other);
raw_tensor atg_where_self(gc_tensor condition, gc_tensor self, gc_tensor other);
raw_tensor atg_where_self_out(gc_tensor out, gc_tensor condition, gc_tensor self, gc_tensor other);
raw_tensor atg_xlogy(gc_tensor self, gc_tensor other);
raw_tensor atg_xlogy_(gc_tensor self, gc_tensor other);
raw_tensor atg_xlogy_outscalar_other(gc_tensor out, gc_tensor self, scalar other);
raw_tensor atg_xlogy_outscalar_self(gc_tensor out, scalar self, gc_tensor other);
raw_tensor atg_xlogy_outtensor(gc_tensor out, gc_tensor self, gc_tensor other);
raw_tensor atg_xlogy_scalar_other(gc_tensor self, scalar other);
raw_tensor atg_xlogy_scalar_other_(gc_tensor self, scalar other);
raw_tensor atg_xlogy_scalar_self(scalar self, gc_tensor other);
raw_tensor atg_zero(gc_tensor self);
raw_tensor atg_zero_(gc_tensor self);
raw_tensor atg_zero_out(gc_tensor out, gc_tensor self);
raw_tensor atg_zeros(int64_t *size_data, int size_len, int options_kind, int options_device);
raw_tensor atg_zeros_like(gc_tensor self);
raw_tensor atg_zeros_like_out(gc_tensor out, gc_tensor self);
raw_tensor atg_zeros_out(gc_tensor out, int64_t *size_data, int size_len);
